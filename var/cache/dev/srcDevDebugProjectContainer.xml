<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/var/www/symfony/src</parameter>
    <parameter key="kernel.project_dir">/var/www/symfony</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">src</parameter>
    <parameter key="kernel.cache_dir">/var/www/symfony/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/var/www/symfony/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="DoctrineCacheBundle">Doctrine\Bundle\DoctrineCacheBundle\DoctrineCacheBundle</parameter>
      <parameter key="SensioFrameworkExtraBundle">Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle</parameter>
      <parameter key="DoctrineBundle">Doctrine\Bundle\DoctrineBundle\DoctrineBundle</parameter>
      <parameter key="DoctrineMigrationsBundle">Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle</parameter>
      <parameter key="SecurityBundle">Symfony\Bundle\SecurityBundle\SecurityBundle</parameter>
      <parameter key="SwiftmailerBundle">Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle</parameter>
      <parameter key="WebProfilerBundle">Symfony\Bundle\WebProfilerBundle\WebProfilerBundle</parameter>
      <parameter key="TwigBundle">Symfony\Bundle\TwigBundle\TwigBundle</parameter>
      <parameter key="MonologBundle">Symfony\Bundle\MonologBundle\MonologBundle</parameter>
      <parameter key="DebugBundle">Symfony\Bundle\DebugBundle\DebugBundle</parameter>
      <parameter key="MakerBundle">Symfony\Bundle\MakerBundle\MakerBundle</parameter>
      <parameter key="WebServerBundle">Symfony\Bundle\WebServerBundle\WebServerBundle</parameter>
      <parameter key="LpCmsBundle">App\Lp\CmsBundle\LpCmsBundle</parameter>
      <parameter key="LpCatalogBundle">App\Lp\CatalogBundle\LpCatalogBundle</parameter>
      <parameter key="LpUrlsBundle">App\Lp\UrlsBundle\LpUrlsBundle</parameter>
      <parameter key="LpBasketBundle">App\Lp\BasketBundle\LpBasketBundle</parameter>
      <parameter key="LpProfileBundle">App\Lp\ProfileBundle\LpProfileBundle</parameter>
      <parameter key="EasyAdminBundle">EasyCorp\Bundle\EasyAdminBundle\EasyAdminBundle</parameter>
      <parameter key="DoctrineFixturesBundle">Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle</parameter>
      <parameter key="VichUploaderBundle">Vich\UploaderBundle\VichUploaderBundle</parameter>
      <parameter key="OverblogGraphQLBundle">Overblog\GraphQLBundle\OverblogGraphQLBundle</parameter>
      <parameter key="OverblogGraphiQLBundle">Overblog\GraphiQLBundle\OverblogGraphiQLBundle</parameter>
      <parameter key="OnurbExcelBundle">Onurb\Bundle\ExcelBundle\OnurbExcelBundle</parameter>
      <parameter key="LexikJWTAuthenticationBundle">Lexik\Bundle\JWTAuthenticationBundle\LexikJWTAuthenticationBundle</parameter>
      <parameter key="AssoConnectGraphQLMutationValidatorBundle">AssoConnect\GraphQLMutationValidatorBundle\AssoConnectGraphQLMutationValidatorBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="DoctrineCacheBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/doctrine/doctrine-cache-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\DoctrineCacheBundle</parameter>
      </parameter>
      <parameter key="SensioFrameworkExtraBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/sensio/framework-extra-bundle</parameter>
        <parameter key="namespace">Sensio\Bundle\FrameworkExtraBundle</parameter>
      </parameter>
      <parameter key="DoctrineBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/doctrine/doctrine-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\DoctrineBundle</parameter>
      </parameter>
      <parameter key="DoctrineMigrationsBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/doctrine/doctrine-migrations-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\MigrationsBundle</parameter>
      </parameter>
      <parameter key="SecurityBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/security-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SecurityBundle</parameter>
      </parameter>
      <parameter key="SwiftmailerBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/swiftmailer-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SwiftmailerBundle</parameter>
      </parameter>
      <parameter key="WebProfilerBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/web-profiler-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\WebProfilerBundle</parameter>
      </parameter>
      <parameter key="TwigBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/twig-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\TwigBundle</parameter>
      </parameter>
      <parameter key="MonologBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/monolog-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\MonologBundle</parameter>
      </parameter>
      <parameter key="DebugBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/debug-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\DebugBundle</parameter>
      </parameter>
      <parameter key="MakerBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/maker-bundle/src</parameter>
        <parameter key="namespace">Symfony\Bundle\MakerBundle</parameter>
      </parameter>
      <parameter key="WebServerBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/symfony/web-server-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\WebServerBundle</parameter>
      </parameter>
      <parameter key="LpCmsBundle" type="collection">
        <parameter key="path">/var/www/symfony/src/Lp/CmsBundle</parameter>
        <parameter key="namespace">App\Lp\CmsBundle</parameter>
      </parameter>
      <parameter key="LpCatalogBundle" type="collection">
        <parameter key="path">/var/www/symfony/src/Lp/CatalogBundle</parameter>
        <parameter key="namespace">App\Lp\CatalogBundle</parameter>
      </parameter>
      <parameter key="LpUrlsBundle" type="collection">
        <parameter key="path">/var/www/symfony/src/Lp/UrlsBundle</parameter>
        <parameter key="namespace">App\Lp\UrlsBundle</parameter>
      </parameter>
      <parameter key="LpBasketBundle" type="collection">
        <parameter key="path">/var/www/symfony/src/Lp/BasketBundle</parameter>
        <parameter key="namespace">App\Lp\BasketBundle</parameter>
      </parameter>
      <parameter key="LpProfileBundle" type="collection">
        <parameter key="path">/var/www/symfony/src/Lp/ProfileBundle</parameter>
        <parameter key="namespace">App\Lp\ProfileBundle</parameter>
      </parameter>
      <parameter key="EasyAdminBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/easycorp/easyadmin-bundle/src</parameter>
        <parameter key="namespace">EasyCorp\Bundle\EasyAdminBundle</parameter>
      </parameter>
      <parameter key="DoctrineFixturesBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/doctrine/doctrine-fixtures-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\FixturesBundle</parameter>
      </parameter>
      <parameter key="VichUploaderBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/vich/uploader-bundle</parameter>
        <parameter key="namespace">Vich\UploaderBundle</parameter>
      </parameter>
      <parameter key="OverblogGraphQLBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/overblog/graphql-bundle/src</parameter>
        <parameter key="namespace">Overblog\GraphQLBundle</parameter>
      </parameter>
      <parameter key="OverblogGraphiQLBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/overblog/graphiql-bundle</parameter>
        <parameter key="namespace">Overblog\GraphiQLBundle</parameter>
      </parameter>
      <parameter key="OnurbExcelBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/onurb/excel-bundle/lib/ExcelBundle</parameter>
        <parameter key="namespace">Onurb\Bundle\ExcelBundle</parameter>
      </parameter>
      <parameter key="LexikJWTAuthenticationBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/lexik/jwt-authentication-bundle</parameter>
        <parameter key="namespace">Lexik\Bundle\JWTAuthenticationBundle</parameter>
      </parameter>
      <parameter key="AssoConnectGraphQLMutationValidatorBundle" type="collection">
        <parameter key="path">/var/www/symfony/vendor/assoconnect/graphql-mutation-validator-bundle</parameter>
        <parameter key="namespace">AssoConnect\GraphQLMutationValidatorBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">srcDevDebugProjectContainer</parameter>
    <parameter key="container.autowiring.strict_mode">true</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="env(DATABASE_URL)"></parameter>
    <parameter key="locale">en</parameter>
    <parameter key="app.path.product_images">/uploads/images/products</parameter>
    <parameter key="app.path.import_product">/public/uploads/import/</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="templating.helper.code.file_link_format">null</parameter>
    <parameter key="debug.file_link_format">null</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter">0</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">/var/www/symfony/var/cache/dev/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="form.type_extension.csrf.enabled">true</parameter>
    <parameter key="form.type_extension.csrf.field_name">_token</parameter>
    <parameter key="asset.request_context.base_path"></parameter>
    <parameter key="asset.request_context.secure">false</parameter>
    <parameter key="validator.mapping.cache.prefix"></parameter>
    <parameter key="validator.mapping.cache.file">/var/www/symfony/var/cache/dev/validation.php</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="translator.logging">false</parameter>
    <parameter key="translator.default_path">/var/www/symfony/translations</parameter>
    <parameter key="profiler_listener.only_exceptions">false</parameter>
    <parameter key="profiler_listener.only_master_requests">false</parameter>
    <parameter key="profiler.storage.dsn">file:/var/www/symfony/var/cache/dev/profiler</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/var/www/symfony/var/cache/dev/srcDevDebugProjectContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_class_prefix">srcDevDebugProjectContainer</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="serializer.mapping.cache.file">/var/www/symfony/var/cache/dev/serialization.php</parameter>
    <parameter key="serializer.mapping.cache.prefix"></parameter>
    <parameter key="doctrine_cache.apc.class">Doctrine\Common\Cache\ApcCache</parameter>
    <parameter key="doctrine_cache.apcu.class">Doctrine\Common\Cache\ApcuCache</parameter>
    <parameter key="doctrine_cache.array.class">Doctrine\Common\Cache\ArrayCache</parameter>
    <parameter key="doctrine_cache.chain.class">Doctrine\Common\Cache\ChainCache</parameter>
    <parameter key="doctrine_cache.couchbase.class">Doctrine\Common\Cache\CouchbaseCache</parameter>
    <parameter key="doctrine_cache.couchbase.connection.class">Couchbase</parameter>
    <parameter key="doctrine_cache.couchbase.hostnames">localhost:8091</parameter>
    <parameter key="doctrine_cache.file_system.class">Doctrine\Common\Cache\FilesystemCache</parameter>
    <parameter key="doctrine_cache.php_file.class">Doctrine\Common\Cache\PhpFileCache</parameter>
    <parameter key="doctrine_cache.memcache.class">Doctrine\Common\Cache\MemcacheCache</parameter>
    <parameter key="doctrine_cache.memcache.connection.class">Memcache</parameter>
    <parameter key="doctrine_cache.memcache.host">localhost</parameter>
    <parameter key="doctrine_cache.memcache.port">11211</parameter>
    <parameter key="doctrine_cache.memcached.class">Doctrine\Common\Cache\MemcachedCache</parameter>
    <parameter key="doctrine_cache.memcached.connection.class">Memcached</parameter>
    <parameter key="doctrine_cache.memcached.host">localhost</parameter>
    <parameter key="doctrine_cache.memcached.port">11211</parameter>
    <parameter key="doctrine_cache.mongodb.class">Doctrine\Common\Cache\MongoDBCache</parameter>
    <parameter key="doctrine_cache.mongodb.collection.class">MongoCollection</parameter>
    <parameter key="doctrine_cache.mongodb.connection.class">MongoClient</parameter>
    <parameter key="doctrine_cache.mongodb.server">localhost:27017</parameter>
    <parameter key="doctrine_cache.predis.client.class">Predis\Client</parameter>
    <parameter key="doctrine_cache.predis.scheme">tcp</parameter>
    <parameter key="doctrine_cache.predis.host">localhost</parameter>
    <parameter key="doctrine_cache.predis.port">6379</parameter>
    <parameter key="doctrine_cache.redis.class">Doctrine\Common\Cache\RedisCache</parameter>
    <parameter key="doctrine_cache.redis.connection.class">Redis</parameter>
    <parameter key="doctrine_cache.redis.host">localhost</parameter>
    <parameter key="doctrine_cache.redis.port">6379</parameter>
    <parameter key="doctrine_cache.riak.class">Doctrine\Common\Cache\RiakCache</parameter>
    <parameter key="doctrine_cache.riak.bucket.class">Riak\Bucket</parameter>
    <parameter key="doctrine_cache.riak.connection.class">Riak\Connection</parameter>
    <parameter key="doctrine_cache.riak.bucket_property_list.class">Riak\BucketPropertyList</parameter>
    <parameter key="doctrine_cache.riak.host">localhost</parameter>
    <parameter key="doctrine_cache.riak.port">8087</parameter>
    <parameter key="doctrine_cache.sqlite3.class">Doctrine\Common\Cache\SQLite3Cache</parameter>
    <parameter key="doctrine_cache.sqlite3.connection.class">SQLite3</parameter>
    <parameter key="doctrine_cache.void.class">Doctrine\Common\Cache\VoidCache</parameter>
    <parameter key="doctrine_cache.wincache.class">Doctrine\Common\Cache\WinCacheCache</parameter>
    <parameter key="doctrine_cache.xcache.class">Doctrine\Common\Cache\XcacheCache</parameter>
    <parameter key="doctrine_cache.zenddata.class">Doctrine\Common\Cache\ZendDataCache</parameter>
    <parameter key="doctrine_cache.security.acl.cache.class">Doctrine\Bundle\DoctrineCacheBundle\Acl\Model\AclCache</parameter>
    <parameter key="doctrine.dbal.logger.chain.class">Doctrine\DBAL\Logging\LoggerChain</parameter>
    <parameter key="doctrine.dbal.logger.profiling.class">Doctrine\DBAL\Logging\DebugStack</parameter>
    <parameter key="doctrine.dbal.logger.class">Symfony\Bridge\Doctrine\Logger\DbalLogger</parameter>
    <parameter key="doctrine.dbal.configuration.class">Doctrine\DBAL\Configuration</parameter>
    <parameter key="doctrine.data_collector.class">Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector</parameter>
    <parameter key="doctrine.dbal.connection.event_manager.class">Symfony\Bridge\Doctrine\ContainerAwareEventManager</parameter>
    <parameter key="doctrine.dbal.connection_factory.class">Doctrine\Bundle\DoctrineBundle\ConnectionFactory</parameter>
    <parameter key="doctrine.dbal.events.mysql_session_init.class">Doctrine\DBAL\Event\Listeners\MysqlSessionInit</parameter>
    <parameter key="doctrine.dbal.events.oracle_session_init.class">Doctrine\DBAL\Event\Listeners\OracleSessionInit</parameter>
    <parameter key="doctrine.class">Doctrine\Bundle\DoctrineBundle\Registry</parameter>
    <parameter key="doctrine.entity_managers" type="collection">
      <parameter key="default">doctrine.orm.default_entity_manager</parameter>
      <parameter key="lp_perl">doctrine.orm.lp_perl_entity_manager</parameter>
    </parameter>
    <parameter key="doctrine.default_entity_manager">default</parameter>
    <parameter key="doctrine.dbal.connection_factory.types" type="collection"/>
    <parameter key="doctrine.connections" type="collection">
      <parameter key="default">doctrine.dbal.default_connection</parameter>
      <parameter key="lp_perl">doctrine.dbal.lp_perl_connection</parameter>
    </parameter>
    <parameter key="doctrine.default_connection">default</parameter>
    <parameter key="doctrine.orm.configuration.class">Doctrine\ORM\Configuration</parameter>
    <parameter key="doctrine.orm.entity_manager.class">Doctrine\ORM\EntityManager</parameter>
    <parameter key="doctrine.orm.manager_configurator.class">Doctrine\Bundle\DoctrineBundle\ManagerConfigurator</parameter>
    <parameter key="doctrine.orm.cache.array.class">Doctrine\Common\Cache\ArrayCache</parameter>
    <parameter key="doctrine.orm.cache.apc.class">Doctrine\Common\Cache\ApcCache</parameter>
    <parameter key="doctrine.orm.cache.memcache.class">Doctrine\Common\Cache\MemcacheCache</parameter>
    <parameter key="doctrine.orm.cache.memcache_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcache_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcache_instance.class">Memcache</parameter>
    <parameter key="doctrine.orm.cache.memcached.class">Doctrine\Common\Cache\MemcachedCache</parameter>
    <parameter key="doctrine.orm.cache.memcached_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcached_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcached_instance.class">Memcached</parameter>
    <parameter key="doctrine.orm.cache.redis.class">Doctrine\Common\Cache\RedisCache</parameter>
    <parameter key="doctrine.orm.cache.redis_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.redis_port">6379</parameter>
    <parameter key="doctrine.orm.cache.redis_instance.class">Redis</parameter>
    <parameter key="doctrine.orm.cache.xcache.class">Doctrine\Common\Cache\XcacheCache</parameter>
    <parameter key="doctrine.orm.cache.wincache.class">Doctrine\Common\Cache\WinCacheCache</parameter>
    <parameter key="doctrine.orm.cache.zenddata.class">Doctrine\Common\Cache\ZendDataCache</parameter>
    <parameter key="doctrine.orm.metadata.driver_chain.class">Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain</parameter>
    <parameter key="doctrine.orm.metadata.annotation.class">Doctrine\ORM\Mapping\Driver\AnnotationDriver</parameter>
    <parameter key="doctrine.orm.metadata.xml.class">Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver</parameter>
    <parameter key="doctrine.orm.metadata.yml.class">Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver</parameter>
    <parameter key="doctrine.orm.metadata.php.class">Doctrine\ORM\Mapping\Driver\PHPDriver</parameter>
    <parameter key="doctrine.orm.metadata.staticphp.class">Doctrine\ORM\Mapping\Driver\StaticPHPDriver</parameter>
    <parameter key="doctrine.orm.proxy_cache_warmer.class">Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer</parameter>
    <parameter key="form.type_guesser.doctrine.class">Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</parameter>
    <parameter key="doctrine.orm.validator.unique.class">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator</parameter>
    <parameter key="doctrine.orm.validator_initializer.class">Symfony\Bridge\Doctrine\Validator\DoctrineInitializer</parameter>
    <parameter key="doctrine.orm.security.user.provider.class">Symfony\Bridge\Doctrine\Security\User\EntityUserProvider</parameter>
    <parameter key="doctrine.orm.listeners.resolve_target_entity.class">Doctrine\ORM\Tools\ResolveTargetEntityListener</parameter>
    <parameter key="doctrine.orm.listeners.attach_entity_listeners.class">Doctrine\ORM\Tools\AttachEntityListenersListener</parameter>
    <parameter key="doctrine.orm.naming_strategy.default.class">Doctrine\ORM\Mapping\DefaultNamingStrategy</parameter>
    <parameter key="doctrine.orm.naming_strategy.underscore.class">Doctrine\ORM\Mapping\UnderscoreNamingStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.default.class">Doctrine\ORM\Mapping\DefaultQuoteStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.ansi.class">Doctrine\ORM\Mapping\AnsiQuoteStrategy</parameter>
    <parameter key="doctrine.orm.entity_listener_resolver.class">Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_cache_factory.class">Doctrine\ORM\Cache\DefaultCacheFactory</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_region.class">Doctrine\ORM\Cache\Region\DefaultRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.filelock_region.class">Doctrine\ORM\Cache\Region\FileLockRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_chain.class">Doctrine\ORM\Cache\Logging\CacheLoggerChain</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_statistics.class">Doctrine\ORM\Cache\Logging\StatisticsCacheLogger</parameter>
    <parameter key="doctrine.orm.second_level_cache.cache_configuration.class">Doctrine\ORM\Cache\CacheConfiguration</parameter>
    <parameter key="doctrine.orm.second_level_cache.regions_configuration.class">Doctrine\ORM\Cache\RegionsConfiguration</parameter>
    <parameter key="doctrine.orm.auto_generate_proxy_classes">false</parameter>
    <parameter key="doctrine.orm.proxy_dir">/var/www/symfony/var/cache/dev/doctrine/orm/Proxies</parameter>
    <parameter key="doctrine.orm.proxy_namespace">Proxies</parameter>
    <parameter key="doctrine_migrations.dir_name">/var/www/symfony/src/Migrations</parameter>
    <parameter key="doctrine_migrations.namespace">DoctrineMigrations</parameter>
    <parameter key="doctrine_migrations.table_name">migration_versions</parameter>
    <parameter key="doctrine_migrations.column_name">version</parameter>
    <parameter key="doctrine_migrations.column_length">14</parameter>
    <parameter key="doctrine_migrations.executed_at_column_name">executed_at</parameter>
    <parameter key="doctrine_migrations.all_or_nothing">false</parameter>
    <parameter key="doctrine_migrations.name">Application Migrations</parameter>
    <parameter key="doctrine_migrations.custom_template">null</parameter>
    <parameter key="doctrine_migrations.organize_migrations">false</parameter>
    <parameter key="security.authentication.trust_resolver.anonymous_class">Symfony\Component\Security\Core\Authentication\Token\AnonymousToken</parameter>
    <parameter key="security.authentication.trust_resolver.rememberme_class">Symfony\Component\Security\Core\Authentication\Token\RememberMeToken</parameter>
    <parameter key="security.role_hierarchy.roles" type="collection"/>
    <parameter key="security.access.denied_url">null</parameter>
    <parameter key="security.authentication.manager.erase_credentials">true</parameter>
    <parameter key="security.authentication.session_strategy.strategy">migrate</parameter>
    <parameter key="security.access.always_authenticate_before_granting">false</parameter>
    <parameter key="security.authentication.hide_user_not_found">true</parameter>
    <parameter key="swiftmailer.mailer.default.transport.name">dynamic</parameter>
    <parameter key="swiftmailer.spool.default.memory.path">/var/www/symfony/var/cache/dev/swiftmailer/spool/default</parameter>
    <parameter key="swiftmailer.mailer.default.spool.enabled">true</parameter>
    <parameter key="swiftmailer.mailer.default.plugin.impersonate">null</parameter>
    <parameter key="swiftmailer.mailer.default.single_address">null</parameter>
    <parameter key="swiftmailer.mailer.default.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.spool.enabled">true</parameter>
    <parameter key="swiftmailer.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.single_address">null</parameter>
    <parameter key="swiftmailer.mailers" type="collection">
      <parameter key="default">swiftmailer.mailer.default</parameter>
    </parameter>
    <parameter key="swiftmailer.default_mailer">default</parameter>
    <parameter key="web_profiler.debug_toolbar.intercept_redirects">false</parameter>
    <parameter key="web_profiler.debug_toolbar.mode">2</parameter>
    <parameter key="twig.exception_listener.controller">twig.controller.exception::showAction</parameter>
    <parameter key="twig.form.resources" type="collection">
      <parameter>@VichUploader/Form/fields.html.twig</parameter>
      <parameter>form_div_layout.html.twig</parameter>
    </parameter>
    <parameter key="twig.default_path">/var/www/symfony/templates</parameter>
    <parameter key="monolog.use_microseconds">true</parameter>
    <parameter key="monolog.swift_mailer.handlers" type="collection"/>
    <parameter key="monolog.handlers_to_channels" type="collection">
      <parameter key="monolog.handler.console" type="collection">
        <parameter key="type">exclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>event</parameter>
          <parameter>doctrine</parameter>
          <parameter>console</parameter>
        </parameter>
      </parameter>
      <parameter key="monolog.handler.main" type="collection">
        <parameter key="type">exclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>event</parameter>
        </parameter>
      </parameter>
    </parameter>
    <parameter key="env(VAR_DUMPER_SERVER)">127.0.0.1:9912</parameter>
    <parameter key="easyadmin.config" type="collection">
      <parameter key="site_name">Laparfumerie</parameter>
      <parameter key="entities" type="collection">
        <parameter key="Tags" type="collection">
          <parameter key="class">App\Entity\Tags</parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>guid</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Tags</parameter>
        </parameter>
        <parameter key="Urls" type="collection">
          <parameter key="class">App\Entity\Urls</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>url</parameter>
              <parameter>created</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Urls</parameter>
        </parameter>
        <parameter key="ProductUrl" type="collection">
          <parameter key="class">App\Entity\ProductUrl</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>url</parameter>
              <parameter>created</parameter>
            </parameter>
          </parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>url</parameter>
            </parameter>
          </parameter>
          <parameter key="name">ProductUrl</parameter>
        </parameter>
        <parameter key="CatalogUrl" type="collection">
          <parameter key="class">App\Entity\CatalogUrl</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>url</parameter>
              <parameter>created</parameter>
            </parameter>
          </parameter>
          <parameter key="name">CatalogUrl</parameter>
        </parameter>
        <parameter key="Users" type="collection">
          <parameter key="class">App\Entity\Users</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>email</parameter>
              <parameter>roles</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Users</parameter>
        </parameter>
        <parameter key="Menu" type="collection">
          <parameter key="class">App\Entity\Menu</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
              <parameter>title</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Menu</parameter>
        </parameter>
        <parameter key="MenuItem" type="collection">
          <parameter key="class">App\Entity\MenuItem</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>title</parameter>
            </parameter>
          </parameter>
          <parameter key="name">MenuItem</parameter>
        </parameter>
        <parameter key="Catalog" type="collection">
          <parameter key="class">App\Entity\Catalog</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
              <parameter>visible</parameter>
            </parameter>
          </parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">General</parameter>
              </parameter>
              <parameter>visible</parameter>
              <parameter>name</parameter>
              <parameter>created</parameter>
              <parameter>updated</parameter>
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">Virtual Urls</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">catalogUrls</parameter>
                <parameter key="type">easyadmin_autocomplete</parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">Catalog</parameter>
        </parameter>
        <parameter key="Items" type="collection">
          <parameter key="class">App\Entity\ProductItem</parameter>
          <parameter key="controller">App\Controller\Admin\ItemsController</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
              <parameter>visible</parameter>
            </parameter>
          </parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>name</parameter>
              <parameter>price</parameter>
              <parameter type="collection">
                <parameter key="property">imageFile</parameter>
                <parameter key="type">App\Form\Type\MultipleImage</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">true</parameter>
                  <parameter key="block_name">custom_title</parameter>
                </parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">Items</parameter>
        </parameter>
        <parameter key="Product" type="collection">
          <parameter key="class">App\Entity\Product</parameter>
          <parameter key="controller">App\Controller\Admin\ProductController</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
              <parameter>visible</parameter>
            </parameter>
          </parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">General</parameter>
              </parameter>
              <parameter>visible</parameter>
              <parameter>name</parameter>
              <parameter>created</parameter>
              <parameter>updated</parameter>
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">Categories</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">catalogs</parameter>
                <parameter key="type">easyadmin_autocomplete</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">Product Items</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">productItems</parameter>
                <parameter key="type">easyadmin_autocomplete</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">Virtual Urls</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">productUrls</parameter>
                <parameter key="type">easyadmin_autocomplete</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="type">tab</parameter>
                <parameter key="label">Tags</parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">producttagitem</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="block_name">products_tags_items</parameter>
                </parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">Product</parameter>
        </parameter>
        <parameter key="Order" type="collection">
          <parameter key="class">App\Entity\Orders</parameter>
          <parameter key="controller">App\Controller\Admin\OrderController</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
              <parameter>visible</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Order</parameter>
        </parameter>
        <parameter key="Delivery" type="collection">
          <parameter key="class">App\Entity\Delivery</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
              <parameter>visible</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Delivery</parameter>
        </parameter>
        <parameter key="PaymentMethod" type="collection">
          <parameter key="class">App\Entity\PaymentMethod</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>name</parameter>
            </parameter>
          </parameter>
          <parameter key="name">PaymentMethod</parameter>
        </parameter>
        <parameter key="ImportProduct" type="collection">
          <parameter key="class">App\Entity\ImportProduct</parameter>
          <parameter key="controller">App\Controller\Admin\ImportProductController</parameter>
          <parameter key="name">ImportProduct</parameter>
        </parameter>
        <parameter key="ProductTag" type="collection">
          <parameter key="class">App\Entity\ProductTag</parameter>
          <parameter key="controller">App\Controller\Admin\ProductTagController</parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>name</parameter>
              <parameter type="collection">
                <parameter key="property">type</parameter>
                <parameter key="type">choice</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">false</parameter>
                  <parameter key="choices" type="collection">
                    <parameter key="bool">bool</parameter>
                    <parameter key="string">string</parameter>
                    <parameter key="int">int</parameter>
                    <parameter key="float">float</parameter>
                    <parameter key="enum">enum</parameter>
                  </parameter>
                </parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">visible</parameter>
                <parameter key="type">choice</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">false</parameter>
                  <parameter key="choices" type="collection">
                    <parameter key="No">No</parameter>
                    <parameter key="Yes">Yes</parameter>
                  </parameter>
                </parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">productTagItems</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="block_name">products_tags_items</parameter>
                </parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">ProductTag</parameter>
        </parameter>
        <parameter key="CatalogTag" type="collection">
          <parameter key="class">App\Entity\CatalogTag</parameter>
          <parameter key="controller">App\Controller\Admin\ProductTagController</parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>name</parameter>
              <parameter type="collection">
                <parameter key="property">type</parameter>
                <parameter key="type">choice</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">false</parameter>
                  <parameter key="choices" type="collection">
                    <parameter key="bool">bool</parameter>
                    <parameter key="string">string</parameter>
                    <parameter key="int">int</parameter>
                    <parameter key="float">float</parameter>
                    <parameter key="enum">enum</parameter>
                  </parameter>
                </parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">visible</parameter>
                <parameter key="type">choice</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">false</parameter>
                  <parameter key="choices" type="collection">
                    <parameter key="No">No</parameter>
                    <parameter key="Yes">Yes</parameter>
                  </parameter>
                </parameter>
              </parameter>
              <parameter type="collection">
                <parameter key="property">catalogTagItems</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="block_name">catalogs_tags_items</parameter>
                </parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">CatalogTag</parameter>
        </parameter>
        <parameter key="Configuration" type="collection">
          <parameter key="class">App\Entity\ProductTag</parameter>
          <parameter key="controller">App\Controller\Admin\ConfigurationController</parameter>
          <parameter key="name">Configuration</parameter>
        </parameter>
        <parameter key="Address" type="collection">
          <parameter key="class">App\Entity\Address</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>city</parameter>
              <parameter>street</parameter>
            </parameter>
          </parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>person</parameter>
              <parameter>user_id</parameter>
              <parameter>zip</parameter>
              <parameter>region_id</parameter>
              <parameter>city</parameter>
              <parameter>street</parameter>
              <parameter>house</parameter>
              <parameter>corp</parameter>
              <parameter>level</parameter>
              <parameter>flat</parameter>
              <parameter>code</parameter>
              <parameter>comment</parameter>
              <parameter>active</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Address</parameter>
        </parameter>
        <parameter key="Banner" type="collection">
          <parameter key="class">App\Entity\Banner</parameter>
          <parameter key="list" type="collection">
            <parameter key="fields" type="collection">
              <parameter>id</parameter>
              <parameter>path</parameter>
              <parameter>link</parameter>
            </parameter>
          </parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter type="collection">
                <parameter key="property">pathFile</parameter>
                <parameter key="type">App\Form\Type\MultipleImage</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">true</parameter>
                  <parameter key="block_name">custom_title</parameter>
                </parameter>
              </parameter>
              <parameter>link</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Banner</parameter>
        </parameter>
        <parameter key="Sale" type="collection">
          <parameter key="class">App\Entity\Sale</parameter>
          <parameter key="form" type="collection">
            <parameter key="fields" type="collection">
              <parameter>start</parameter>
              <parameter>finish</parameter>
              <parameter>category</parameter>
              <parameter>discount</parameter>
              <parameter>enabled</parameter>
              <parameter>featured</parameter>
              <parameter>type</parameter>
              <parameter>prior</parameter>
              <parameter type="collection">
                <parameter key="property">imagePath</parameter>
                <parameter key="type">App\Form\Type\MultipleImage</parameter>
                <parameter key="type_options" type="collection">
                  <parameter key="multiple">true</parameter>
                  <parameter key="block_name">custom_image</parameter>
                </parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">Sale</parameter>
        </parameter>
      </parameter>
      <parameter key="design" type="collection">
        <parameter key="brand_color">black</parameter>
        <parameter key="form_theme" type="collection">
          <parameter>admin/form/bootstrap_3_layout.html.twig</parameter>
          <parameter>admin/form/bootstrap_3_horizontal_layout.html.twig</parameter>
          <parameter>admin/form/images.html.twig</parameter>
          <parameter>admin/form/tags.html.twig</parameter>
          <parameter>admin/form/products_tags_items.html.twig</parameter>
        </parameter>
        <parameter key="menu" type="collection">
          <parameter type="collection">
            <parameter key="label">Urls</parameter>
            <parameter key="children" type="collection">
              <parameter>ProductUrl</parameter>
              <parameter>CatalogUrl</parameter>
            </parameter>
          </parameter>
          <parameter type="collection">
            <parameter key="label">Catalog</parameter>
            <parameter key="children" type="collection">
              <parameter>Catalog</parameter>
              <parameter>CatalogTag</parameter>
              <parameter>Product</parameter>
              <parameter>Items</parameter>
              <parameter>ProductTag</parameter>
            </parameter>
          </parameter>
          <parameter type="collection">
            <parameter key="label">Order</parameter>
            <parameter key="children" type="collection">
              <parameter>Order</parameter>
              <parameter>Delivery</parameter>
              <parameter>PaymentMethod</parameter>
              <parameter>ProductTag</parameter>
            </parameter>
          </parameter>
          <parameter type="collection">
            <parameter key="label">User</parameter>
            <parameter key="children" type="collection">
              <parameter>Users</parameter>
              <parameter>Address</parameter>
            </parameter>
          </parameter>
          <parameter>ImportProduct</parameter>
          <parameter type="collection">
            <parameter key="label">Menu</parameter>
            <parameter key="children" type="collection">
              <parameter>Menu</parameter>
              <parameter>MenuItem</parameter>
            </parameter>
          </parameter>
          <parameter>Banner</parameter>
          <parameter>Sale</parameter>
          <parameter>Configuration</parameter>
          <parameter>Tags</parameter>
        </parameter>
        <parameter key="assets" type="collection">
          <parameter key="css" type="collection">
            <parameter>/bundles/lp/css/lp.css</parameter>
          </parameter>
          <parameter key="js" type="collection"/>
          <parameter key="favicon" type="collection">
            <parameter key="path">favicon.ico</parameter>
            <parameter key="mime_type">image/x-icon</parameter>
          </parameter>
        </parameter>
        <parameter key="theme">default</parameter>
        <parameter key="color_scheme">dark</parameter>
      </parameter>
      <parameter key="formats" type="collection">
        <parameter key="date">Y-m-d</parameter>
        <parameter key="time">H:i:s</parameter>
        <parameter key="datetime">F j, Y H:i</parameter>
        <parameter key="dateinterval">%y Year(s) %m Month(s) %d Day(s)</parameter>
      </parameter>
      <parameter key="disabled_actions" type="collection"/>
      <parameter key="translation_domain">messages</parameter>
      <parameter key="list" type="collection">
        <parameter key="actions" type="collection"/>
        <parameter key="max_results">15</parameter>
      </parameter>
      <parameter key="search" type="collection"/>
      <parameter key="edit" type="collection">
        <parameter key="actions" type="collection"/>
      </parameter>
      <parameter key="new" type="collection">
        <parameter key="actions" type="collection"/>
      </parameter>
      <parameter key="show" type="collection">
        <parameter key="actions" type="collection"/>
        <parameter key="max_results">10</parameter>
      </parameter>
    </parameter>
    <parameter key="easyadmin.cache.dir">/var/www/symfony/var/cache/dev/easy_admin</parameter>
    <parameter key="vich_uploader.default_filename_attribute_suffix">_name</parameter>
    <parameter key="vich_uploader.mappings" type="collection">
      <parameter key="product_images" type="collection">
        <parameter key="uri_prefix">/uploads/images/products</parameter>
        <parameter key="upload_destination">/var/www/symfony/public/uploads/images/products</parameter>
        <parameter key="namer" type="collection">
          <parameter key="service">null</parameter>
          <parameter key="options">null</parameter>
        </parameter>
        <parameter key="directory_namer" type="collection">
          <parameter key="service">null</parameter>
          <parameter key="options">null</parameter>
        </parameter>
        <parameter key="delete_on_remove">true</parameter>
        <parameter key="delete_on_update">true</parameter>
        <parameter key="inject_on_load">false</parameter>
        <parameter key="db_driver">orm</parameter>
      </parameter>
    </parameter>
    <parameter key="vich_uploader.file_injector.class">Vich\UploaderBundle\Injector\FileInjector</parameter>
    <parameter key="overblog_graphql_types.config" type="collection">
      <parameter key="Query" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">QueryType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Product Item ORM repository</parameter>
          <parameter key="fields" type="collection">
            <parameter key="productitem" type="collection">
              <parameter key="type">ProductItem</parameter>
              <parameter key="args" type="collection">
                <parameter key="id" type="collection">
                  <parameter key="description">Resolves using the product item id.</parameter>
                  <parameter key="type">Int</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('ProductItem', [args])</parameter>
            </parameter>
            <parameter key="user" type="collection">
              <parameter key="type">User</parameter>
              <parameter key="args" type="collection">
                <parameter key="id" type="collection">
                  <parameter key="description">Resolves using the user id.</parameter>
                  <parameter key="type">Int</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('User', [args])</parameter>
            </parameter>
            <parameter key="product" type="collection">
              <parameter key="type">Product</parameter>
              <parameter key="args" type="collection">
                <parameter key="id" type="collection">
                  <parameter key="description">Resolves using the product ID.</parameter>
                  <parameter key="type">Int</parameter>
                </parameter>
                <parameter key="slug" type="collection">
                  <parameter key="description">Resolves using the product slug.</parameter>
                  <parameter key="type">String</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('Product', [args])</parameter>
            </parameter>
            <parameter key="catalog" type="collection">
              <parameter key="type">Catalog</parameter>
              <parameter key="args" type="collection">
                <parameter key="id" type="collection">
                  <parameter key="description">Resolves using the catalog ID.</parameter>
                  <parameter key="type">Int</parameter>
                </parameter>
                <parameter key="slug" type="collection">
                  <parameter key="description">Resolves using the catalog slug.</parameter>
                  <parameter key="type">String</parameter>
                </parameter>
                <parameter key="products" type="collection">
                  <parameter key="description">Products</parameter>
                  <parameter key="type">String</parameter>
                </parameter>
                <parameter key="tags" type="collection">
                  <parameter key="description">Tags</parameter>
                  <parameter key="type">[Int]</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('Catalog', [args])</parameter>
            </parameter>
            <parameter key="addresses" type="collection">
              <parameter key="type">Addresses</parameter>
              <parameter key="args" type="collection">
                <parameter key="token" type="collection">
                  <parameter key="description">User Token</parameter>
                  <parameter key="type">String</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('Address', [args])</parameter>
            </parameter>
            <parameter key="basket" type="collection">
              <parameter key="type">Basket</parameter>
              <parameter key="resolve">@=resolver('Basket', [args])</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="users_orders" type="collection">
              <parameter key="type">UsersOrders</parameter>
              <parameter key="resolve">@=resolver('UsersOrders', [args])</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="banner" type="collection">
              <parameter key="type">Banner</parameter>
              <parameter key="resolve">@=resolver('Banner', [args])</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="sale" type="collection">
              <parameter key="type">Sale</parameter>
              <parameter key="args" type="collection">
                <parameter key="limit" type="collection">
                  <parameter key="description">Sale Limit</parameter>
                  <parameter key="type">Int</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('Sales', [args])</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Query</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="DateTime" type="collection">
        <parameter key="type">custom-scalar</parameter>
        <parameter key="class_name">DateTimeType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="serialize" type="collection">
            <parameter>App\GraphQL\Type\DateTimeType</parameter>
            <parameter>serialize</parameter>
          </parameter>
          <parameter key="parseValue" type="collection">
            <parameter>App\GraphQL\Type\DateTimeType</parameter>
            <parameter>parseValue</parameter>
          </parameter>
          <parameter key="parseLiteral" type="collection">
            <parameter>App\GraphQL\Type\DateTimeType</parameter>
            <parameter>parseLiteral</parameter>
          </parameter>
          <parameter key="name">DateTime</parameter>
        </parameter>
      </parameter>
      <parameter key="User" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">UserType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">User</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">User Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="email" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Email</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">User</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="AuthorizedUser" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">AuthorizedUserType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Authorized User</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">User Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="email" type="collection">
              <parameter key="type">String!</parameter>
              <parameter key="description">Email</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="hash" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Hash</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">AuthorizedUser</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="createOrderInput" type="collection">
        <parameter key="type">input-object</parameter>
        <parameter key="class_name">createOrderInputType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="fields" type="collection">
            <parameter key="item_id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Item ID</parameter>
            </parameter>
            <parameter key="qty" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Qty</parameter>
            </parameter>
          </parameter>
          <parameter key="name">createOrderInput</parameter>
        </parameter>
      </parameter>
      <parameter key="Sale" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">SaleType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Sale</parameter>
          <parameter key="fields" type="collection">
            <parameter key="data" type="collection">
              <parameter key="type">[SaleItem]</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Sale</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="SaleItem" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">SaleItemType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Sale Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Banner Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="start" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Start</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="finish" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Finish</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="category" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Category</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="discount" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Discount</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="enabled" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Enabled</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="featured" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Featured</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="type" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Type</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="prior" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Prior</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="created" type="collection">
              <parameter key="type">DateTime</parameter>
              <parameter key="description">Created</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">SaleItem</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="AddressConnection" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">AddressConnectionType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="name">AddressConnection</parameter>
          <parameter key="description">A connection to a list of items.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="pageInfo" type="collection">
              <parameter key="type">PageInfo!</parameter>
              <parameter key="description">Information to aid in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="edges" type="collection">
              <parameter key="type">[AddressEdge]</parameter>
              <parameter key="description">Information to aid in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="ProductConnection" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ProductConnectionType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="name">ProductConnection</parameter>
          <parameter key="description">A connection to a list of items.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="pageInfo" type="collection">
              <parameter key="type">PageInfo!</parameter>
              <parameter key="description">Information to aid in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="edges" type="collection">
              <parameter key="type">[ProductEdge]</parameter>
              <parameter key="description">Information to aid in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Banner" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">BannerType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Banners</parameter>
          <parameter key="fields" type="collection">
            <parameter key="data" type="collection">
              <parameter key="type">[BannerItem]</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Banner</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="BannerItem" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">BannerItemType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Banner Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Banner Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="path" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Path</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="link" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Link</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">BannerItem</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="UsersOrders" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">UsersOrdersType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Users Orders</parameter>
          <parameter key="fields" type="collection">
            <parameter key="orders" type="collection">
              <parameter key="type">[UserOrder]</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">UsersOrders</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="UserOrder" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">UserOrderType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">User Order</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Order Id</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="orderItems" type="collection">
              <parameter key="type">[OrderItem]</parameter>
              <parameter key="description">Order Item Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">UserOrder</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="OrderItem" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">OrderItemType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Order Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Order Item Id</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="qty" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Order Item Qty</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="item" type="collection">
              <parameter key="type">ProductItem</parameter>
              <parameter key="description">Order Item Product Item</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">OrderItem</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Addresses" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">AddressesType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">User Addresses</parameter>
          <parameter key="resolveField">@=resolver("App\\GraphQL\\Resolver\\AddressField", [info, value, args])</parameter>
          <parameter key="fields" type="collection">
            <parameter key="data" type="collection">
              <parameter key="type">AddressConnection</parameter>
              <parameter key="args" type="collection">
                <parameter key="limit" type="collection">
                  <parameter key="type">Int!</parameter>
                  <parameter key="defaultValue">20</parameter>
                </parameter>
                <parameter key="offset" type="collection">
                  <parameter key="type">Int!</parameter>
                  <parameter key="defaultValue">0</parameter>
                </parameter>
              </parameter>
            </parameter>
          </parameter>
          <parameter key="name">Addresses</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="AddBasketInput" type="collection">
        <parameter key="type">input-object</parameter>
        <parameter key="class_name">AddBasketInputType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="fields" type="collection">
            <parameter key="item_id" type="collection">
              <parameter key="type">Int!</parameter>
            </parameter>
          </parameter>
          <parameter key="name">AddBasketInput</parameter>
        </parameter>
      </parameter>
      <parameter key="ProductItem" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ProductItemType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Product Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Product Item Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Product Item Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">ProductItem</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Product" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ProductType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Product</parameter>
          <parameter key="resolveField">@=resolver("App\\GraphQL\\Resolver\\ProductFieldResolver", [info, value, args])</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Product Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Product Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="url" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Product Url</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="items" type="collection">
              <parameter key="type">ItemConnection</parameter>
              <parameter key="args" type="collection">
                <parameter key="limit" type="collection">
                  <parameter key="type">Int!</parameter>
                  <parameter key="defaultValue">20</parameter>
                </parameter>
                <parameter key="offset" type="collection">
                  <parameter key="type">Int!</parameter>
                  <parameter key="defaultValue">0</parameter>
                </parameter>
              </parameter>
            </parameter>
            <parameter key="tags" type="collection">
              <parameter key="type">[ProductFilters]</parameter>
              <parameter key="description">Product Filter</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Product</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="ProductFilters" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ProductFiltersType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Product Filter Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Product Filter Name.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="value" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Product Filter Value</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">ProductFilters</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Address" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">AddressType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">User Address</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Product Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Address Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="user_id_id" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">User ID</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="person" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Person Address Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="zip" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Post Code</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="region_id" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Region ID</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="city" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">City</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="street" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Street</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="house" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">House</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="corp" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Corp</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="level" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Level</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="flat" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Flat</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="code" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Code</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="active" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Active</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Address</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="ItemConnection" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ItemConnectionType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="name">ItemConnection</parameter>
          <parameter key="description">A connection to a list of items.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="pageInfo" type="collection">
              <parameter key="type">PageInfo!</parameter>
              <parameter key="description">Information to aid in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="edges" type="collection">
              <parameter key="type">[ItemEdge]</parameter>
              <parameter key="description">Information to aid in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Basket" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">BasketType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Basket</parameter>
          <parameter key="fields" type="collection">
            <parameter key="products" type="collection">
              <parameter key="type">[BasketProduct]</parameter>
              <parameter key="description">Basket Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Basket</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="BasketProduct" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">BasketProductType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Basket Product</parameter>
          <parameter key="fields" type="collection">
            <parameter key="item_id" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Item Id</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="qty" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Qty</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Basket Product Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="product_name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Basket Product Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">BasketProduct</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="UpdateBasketInput" type="collection">
        <parameter key="type">input-object</parameter>
        <parameter key="class_name">UpdateBasketInputType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="fields" type="collection">
            <parameter key="item_id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Item ID</parameter>
            </parameter>
            <parameter key="qty" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Qty</parameter>
            </parameter>
          </parameter>
          <parameter key="name">UpdateBasketInput</parameter>
        </parameter>
      </parameter>
      <parameter key="UserInput" type="collection">
        <parameter key="type">input-object</parameter>
        <parameter key="class_name">UserInputType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="fields" type="collection">
            <parameter key="email" type="collection">
              <parameter key="type">String</parameter>
            </parameter>
            <parameter key="password" type="collection">
              <parameter key="type">String</parameter>
            </parameter>
          </parameter>
          <parameter key="name">UserInput</parameter>
        </parameter>
      </parameter>
      <parameter key="Catalog" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">CatalogType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Catalog</parameter>
          <parameter key="resolveField">@=resolver("App\\GraphQL\\Resolver\\CatalogResolver", [info, value, args])</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Catalog Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Catalog Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="products" type="collection">
              <parameter key="type">ProductConnection</parameter>
              <parameter key="args" type="collection">
                <parameter key="limit" type="collection">
                  <parameter key="type">Int!</parameter>
                  <parameter key="defaultValue">20</parameter>
                </parameter>
                <parameter key="offset" type="collection">
                  <parameter key="type">Int!</parameter>
                  <parameter key="defaultValue">0</parameter>
                </parameter>
              </parameter>
            </parameter>
            <parameter key="count" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Count of products</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="tags" type="collection">
              <parameter key="type">[CatalogFilters]</parameter>
              <parameter key="description">Catalog Filter</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Catalog</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="CatalogFilters" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">CatalogFiltersType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Catalog Filter Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Catalog Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Catalog Filter Item Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="childrens" type="collection">
              <parameter key="type">[CatalogFilterItem]</parameter>
              <parameter key="description">Catalog Filter Items Childrens</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">CatalogFilters</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="CatalogFilterItem" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">CatalogFilterItemType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Catalog Filter Item</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int!</parameter>
              <parameter key="description">Catalog Filter Item Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="name" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">Catalog Filter Item Name</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="count" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Count products in selected filter</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">CatalogFilterItem</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Mutation" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">MutationType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="fields" type="collection">
            <parameter key="auth" type="collection">
              <parameter key="type">AuthorizedUser!</parameter>
              <parameter key="resolve">@=mutation("App\\GraphQL\\Mutation\\UserMutation::auth", [args])</parameter>
              <parameter key="args" type="collection">
                <parameter key="input" type="collection">
                  <parameter key="type">UserInput!</parameter>
                </parameter>
              </parameter>
            </parameter>
            <parameter key="addBasket" type="collection">
              <parameter key="type">Basket!</parameter>
              <parameter key="resolve">@=mutation("App\\GraphQL\\Mutation\\BasketMutation::add", [args])</parameter>
              <parameter key="args" type="collection">
                <parameter key="input" type="collection">
                  <parameter key="type">AddBasketInput!</parameter>
                </parameter>
              </parameter>
            </parameter>
            <parameter key="removeBasket" type="collection">
              <parameter key="type">Basket!</parameter>
              <parameter key="resolve">@=mutation("App\\GraphQL\\Mutation\\BasketMutation::remove", [args])</parameter>
              <parameter key="args" type="collection">
                <parameter key="input" type="collection">
                  <parameter key="type">AddBasketInput!</parameter>
                </parameter>
              </parameter>
            </parameter>
            <parameter key="updateBasket" type="collection">
              <parameter key="type">Basket!</parameter>
              <parameter key="resolve">@=mutation("App\\GraphQL\\Mutation\\BasketMutation::update", [args])</parameter>
              <parameter key="args" type="collection">
                <parameter key="input" type="collection">
                  <parameter key="type">UpdateBasketInput!</parameter>
                </parameter>
              </parameter>
            </parameter>
            <parameter key="order" type="collection">
              <parameter key="type">Order!</parameter>
              <parameter key="resolve">@=mutation("App\\GraphQL\\Mutation\\OrderMutation::create", [args])</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Mutation</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="Order" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">OrderType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Order</parameter>
          <parameter key="fields" type="collection">
            <parameter key="id" type="collection">
              <parameter key="type">Int</parameter>
              <parameter key="description">Order Id.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">Order</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="PageInfo" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">PageInfoType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Information about pagination in a connection.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="hasNextPage" type="collection">
              <parameter key="type">Boolean!</parameter>
              <parameter key="description">When paginating forwards, are there more items?</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="hasPreviousPage" type="collection">
              <parameter key="type">Boolean!</parameter>
              <parameter key="description">When paginating backwards, are there more items?</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="startCursor" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">When paginating backwards, the cursor to continue.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="endCursor" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">When paginating forwards, the cursor to continue.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">PageInfo</parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="AddressEdge" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">AddressEdgeType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="name">AddressEdge</parameter>
          <parameter key="description">An edge in a connection.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="node" type="collection">
              <parameter key="type">Address!</parameter>
              <parameter key="resolve">null</parameter>
              <parameter key="description">The item at the end of the edge.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="cursor" type="collection">
              <parameter key="type">String!</parameter>
              <parameter key="resolve">null</parameter>
              <parameter key="description">A cursor for use in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="ProductEdge" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ProductEdgeType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="name">ProductEdge</parameter>
          <parameter key="description">An edge in a connection.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="node" type="collection">
              <parameter key="type">Product!</parameter>
              <parameter key="resolve">null</parameter>
              <parameter key="description">The item at the end of the edge.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="cursor" type="collection">
              <parameter key="type">String!</parameter>
              <parameter key="resolve">null</parameter>
              <parameter key="description">A cursor for use in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="ItemEdge" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ItemEdgeType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="name">ItemEdge</parameter>
          <parameter key="description">An edge in a connection.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="node" type="collection">
              <parameter key="type">ProductItem!</parameter>
              <parameter key="resolve">null</parameter>
              <parameter key="description">The item at the end of the edge.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="cursor" type="collection">
              <parameter key="type">String!</parameter>
              <parameter key="resolve">null</parameter>
              <parameter key="description">A cursor for use in pagination.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
    </parameter>
    <parameter key="overblog_graphql.batching_method">relay</parameter>
    <parameter key="overblog_graphql.handle_cors">true</parameter>
    <parameter key="overblog_graphql.query_max_depth">false</parameter>
    <parameter key="overblog_graphql.query_max_complexity">false</parameter>
    <parameter key="overblog_graphql.enable_introspection">true</parameter>
    <parameter key="overblog_graphql.auto_mapping.enabled">true</parameter>
    <parameter key="overblog_graphql.auto_mapping.directories" type="collection"/>
    <parameter key="overblog_graphql.default_resolver" type="collection">
      <parameter>Overblog\GraphQLBundle\Resolver\Resolver</parameter>
      <parameter>defaultResolveFn</parameter>
    </parameter>
    <parameter key="overblog_graphql.class_namespace">Overblog\GraphQLBundle\__DEFINITIONS__</parameter>
    <parameter key="overblog_graphql.cache_dir">null</parameter>
    <parameter key="overblog_graphql.cache_dir_permissions">null</parameter>
    <parameter key="overblog_graphql.use_classloader_listener">true</parameter>
    <parameter key="overblog_graphql.resources_dir">/var/www/symfony/vendor/overblog/graphql-bundle/src/Resources</parameter>
    <parameter key="overblog_graphiql.endpoint_resolver">Overblog\GraphiQLBundle\Config\GraphQLEndpoint\Helpers\OverblogGraphQLBundleEndpointResolver</parameter>
    <parameter key="lexik_jwt_authentication.pass_phrase">%env(JWT_PASSPHRASE)%</parameter>
    <parameter key="lexik_jwt_authentication.token_ttl">3600</parameter>
    <parameter key="lexik_jwt_authentication.clock_skew">0</parameter>
    <parameter key="lexik_jwt_authentication.user_identity_field">username</parameter>
    <parameter key="lexik_jwt_authentication.user_id_claim">username</parameter>
    <parameter key="lexik_jwt_authentication.encoder.signature_algorithm">RS256</parameter>
    <parameter key="lexik_jwt_authentication.encoder.crypto_engine">openssl</parameter>
    <parameter key="data_collector.templates" type="collection">
      <parameter key="data_collector.request" type="collection">
        <parameter>request</parameter>
        <parameter>@WebProfiler/Collector/request.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.time" type="collection">
        <parameter>time</parameter>
        <parameter>@WebProfiler/Collector/time.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.memory" type="collection">
        <parameter>memory</parameter>
        <parameter>@WebProfiler/Collector/memory.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.validator" type="collection">
        <parameter>validator</parameter>
        <parameter>@WebProfiler/Collector/validator.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.ajax" type="collection">
        <parameter>ajax</parameter>
        <parameter>@WebProfiler/Collector/ajax.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.form" type="collection">
        <parameter>form</parameter>
        <parameter>@WebProfiler/Collector/form.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.exception" type="collection">
        <parameter>exception</parameter>
        <parameter>@WebProfiler/Collector/exception.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.logger" type="collection">
        <parameter>logger</parameter>
        <parameter>@WebProfiler/Collector/logger.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.events" type="collection">
        <parameter>events</parameter>
        <parameter>@WebProfiler/Collector/events.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.router" type="collection">
        <parameter>router</parameter>
        <parameter>@WebProfiler/Collector/router.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.cache" type="collection">
        <parameter>cache</parameter>
        <parameter>@WebProfiler/Collector/cache.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.translation" type="collection">
        <parameter>translation</parameter>
        <parameter>@WebProfiler/Collector/translation.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.security" type="collection">
        <parameter>security</parameter>
        <parameter>@Security/Collector/security.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.twig" type="collection">
        <parameter>twig</parameter>
        <parameter>@WebProfiler/Collector/twig.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.doctrine" type="collection">
        <parameter>db</parameter>
        <parameter>@Doctrine/Collector/db.html.twig</parameter>
      </parameter>
      <parameter key="swiftmailer.data_collector" type="collection">
        <parameter>swiftmailer</parameter>
        <parameter>@Swiftmailer/Collector/swiftmailer.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.dump" type="collection">
        <parameter>dump</parameter>
        <parameter>@Debug/Profiler/dump.html.twig</parameter>
      </parameter>
      <parameter key="easyadmin.data_collector" type="collection">
        <parameter>easyadmin</parameter>
        <parameter>@EasyAdmin/data_collector/easyadmin.html.twig</parameter>
      </parameter>
      <parameter key="Vich\UploaderBundle\DataCollector\MappingCollector" type="collection">
        <parameter>vich_uploader.mapping_collector</parameter>
        <parameter>@VichUploader/Collector/mapping_collector.html.twig</parameter>
      </parameter>
      <parameter key="data_collector.config" type="collection">
        <parameter>config</parameter>
        <parameter>@WebProfiler/Collector/config.html.twig</parameter>
      </parameter>
    </parameter>
    <parameter key="console.command.ids" type="collection">
      <parameter>console.command.public_alias.doctrine_cache.contains_command</parameter>
      <parameter>console.command.public_alias.doctrine_cache.delete_command</parameter>
      <parameter>console.command.public_alias.doctrine_cache.flush_command</parameter>
      <parameter>console.command.public_alias.doctrine_cache.stats_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.diff_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.dump_schema_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.execute_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.generate_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.latest_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.migrate_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.rollup_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.status_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.up_to_date_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.version_command</parameter>
      <parameter>overblog_graphql.command.dump_schema</parameter>
      <parameter>overblog_graphql.command.debug</parameter>
      <parameter>overblog_graphql.command.compile</parameter>
    </parameter>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="EasyCorp\EasyLog\EasyLogHandler" class="EasyCorp\EasyLog\EasyLogHandler" public="false">
      <argument>/var/www/symfony/var/log/dev.log</argument>
    </service>
    <service id="App\Command\ImportProductCommand" class="App\Command\ImportProductCommand" public="false" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <argument type="service" id="App\Service\ConfigService"/>
      <argument type="service" id="App\Service\ImportParser"/>
      <argument type="service" id="App\Service\Import\Importer"/>
      <call method="setName">
        <argument>lp:productimport</argument>
      </call>
    </service>
    <service id="App\Command\MigrateCommand" class="App\Command\MigrateCommand" public="false" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <call method="setName">
        <argument>lp:migrate</argument>
      </call>
    </service>
    <service id="App\Controller\Admin\ConfigurationController" class="App\Controller\Admin\ConfigurationController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="App\Service\RequestFilterService"/>
      <argument type="service" id="App\Service\DoctrineService"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\Controller\Admin\ImportProductController" class="App\Controller\Admin\ImportProductController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Controller\Admin\ItemsController" class="App\Controller\Admin\ItemsController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Controller\Admin\OrderController" class="App\Controller\Admin\OrderController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Controller\Admin\ProductController" class="App\Controller\Admin\ProductController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Controller\Admin\ProductTagController" class="App\Controller\Admin\ProductTagController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\Controller\AdminController" class="App\Controller\AdminController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Controller\RootController" class="App\Controller\RootController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Controller\RootController"/>
      </call>
    </service>
    <service id="App\Controller\SecurityController" class="App\Controller\SecurityController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Controller\SecurityController"/>
      </call>
    </service>
    <service id="App\DataFixtures\AppFixtures" class="App\DataFixtures\AppFixtures" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
    </service>
    <service id="App\DataFixtures\UrlFixture" class="App\DataFixtures\UrlFixture" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
      <argument type="service" id="security.user_password_encoder.generic"/>
    </service>
    <service id="App\DataFixtures\UserFixture" class="App\DataFixtures\UserFixture" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
      <argument type="service" id="security.user_password_encoder.generic"/>
    </service>
    <service id="App\DataFixtures\UserProfileFixtures" class="App\DataFixtures\UserProfileFixtures" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
      <argument type="service" id="security.user_password_encoder.generic"/>
    </service>
    <service id="App\Form\Type\Image" class="App\Form\Type\Image" public="false" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="App\Form\Type\MultipleImage" class="App\Form\Type\MultipleImage" public="false" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="App\Form\Type\ShippingType" class="App\Form\Type\ShippingType" public="false" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="App\GraphQL\Args\Pager" class="App\GraphQL\Args\Pager" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\GraphQL\Args\PaginatoringBuilder" class="App\GraphQL\Args\PaginatoringBuilder" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\GraphQL\Input\AddBasketInput" class="App\GraphQL\Input\AddBasketInput" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\GraphQL\Input\UpdateBasketInput" class="App\GraphQL\Input\UpdateBasketInput" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\GraphQL\Input\UserInput" class="App\GraphQL\Input\UserInput" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\GraphQL\Mutation\AuthMutation" class="App\GraphQL\Mutation\AuthMutation" public="true" autowire="true">
      <tag name="overblog_graphql.mutation" method="getSessionKey"/>
      <tag name="overblog_graphql.mutation" method="getUser"/>
      <tag name="overblog_graphql.mutation" method="getAuthKey"/>
      <argument type="service" id="Redis"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
    </service>
    <service id="App\GraphQL\Mutation\BasketMutation" class="App\GraphQL\Mutation\BasketMutation" public="true" autowire="true">
      <tag name="overblog_graphql.mutation" method="add"/>
      <tag name="overblog_graphql.mutation" method="remove"/>
      <tag name="overblog_graphql.mutation" method="update"/>
      <tag name="overblog_graphql.mutation" method="getSessionKey"/>
      <tag name="overblog_graphql.mutation" method="getUser"/>
      <tag name="overblog_graphql.mutation" method="getAuthKey"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="Redis"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
      <argument type="service" id="App\Service\BasketService"/>
    </service>
    <service id="App\GraphQL\Mutation\OrderMutation" class="App\GraphQL\Mutation\OrderMutation" public="true" autowire="true">
      <tag name="overblog_graphql.mutation" method="create"/>
      <tag name="overblog_graphql.mutation" method="getSessionKey"/>
      <tag name="overblog_graphql.mutation" method="getUser"/>
      <tag name="overblog_graphql.mutation" method="getAuthKey"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="Redis"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
      <argument type="service" id="App\Service\BasketService"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\GraphQL\Mutation\UserMutation" class="App\GraphQL\Mutation\UserMutation" public="true" autowire="true">
      <tag name="overblog_graphql.mutation" method="auth"/>
      <tag name="overblog_graphql.mutation" method="getSessionKey"/>
      <tag name="overblog_graphql.mutation" method="getUser"/>
      <tag name="overblog_graphql.mutation" method="getAuthKey"/>
      <argument type="service" id="Redis"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
    </service>
    <service id="App\GraphQL\Resolver\AddressField" class="App\GraphQL\Resolver\AddressField" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" method="data"/>
    </service>
    <service id="App\GraphQL\Resolver\AddressResolver" class="App\GraphQL\Resolver\AddressResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="Address" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="monolog.logger"/>
    </service>
    <service id="App\GraphQL\Resolver\AuthAlias" class="App\GraphQL\Resolver\AuthAlias" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="getSessionKey"/>
      <tag name="overblog_graphql.resolver" method="getUser"/>
      <tag name="overblog_graphql.resolver" method="getAuthKey"/>
      <tag name="overblog_graphql.resolver" alias="App\GraphQL\Resolver\AuthAlias" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
    </service>
    <service id="App\GraphQL\Resolver\BannerResolver" class="App\GraphQL\Resolver\BannerResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="Banner" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\GraphQL\Resolver\BasketResolver" class="App\GraphQL\Resolver\BasketResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" method="getSessionKey"/>
      <tag name="overblog_graphql.resolver" method="getUser"/>
      <tag name="overblog_graphql.resolver" method="getAuthKey"/>
      <tag name="overblog_graphql.resolver" alias="Basket" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
      <argument type="service" id="App\Service\BasketService"/>
    </service>
    <service id="App\GraphQL\Resolver\CatalogResolver" class="App\GraphQL\Resolver\CatalogResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" method="name"/>
      <tag name="overblog_graphql.resolver" method="id"/>
      <tag name="overblog_graphql.resolver" method="products"/>
      <tag name="overblog_graphql.resolver" method="count"/>
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" method="tags"/>
      <tag name="overblog_graphql.resolver" alias="Catalog" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Service\TagService"/>
      <argument type="service" id="App\Service\UrlParseService"/>
    </service>
    <service id="App\GraphQL\Resolver\ProductFieldResolver" class="App\GraphQL\Resolver\ProductFieldResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" method="name"/>
      <tag name="overblog_graphql.resolver" method="url"/>
      <tag name="overblog_graphql.resolver" method="id"/>
      <tag name="overblog_graphql.resolver" method="tags"/>
      <tag name="overblog_graphql.resolver" method="items"/>
      <tag name="overblog_graphql.resolver" method="getAliases"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Service\TagService"/>
    </service>
    <service id="App\GraphQL\Resolver\ProductItemResolver" class="App\GraphQL\Resolver\ProductItemResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="ProductItem" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\GraphQL\Resolver\ProductResolver" class="App\GraphQL\Resolver\ProductResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="Product" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\GraphQL\Resolver\ProductsFieldsResolver" class="App\GraphQL\Resolver\ProductsFieldsResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="Catalog" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Service\UrlParseService"/>
    </service>
    <service id="App\GraphQL\Resolver\SalesResolver" class="App\GraphQL\Resolver\SalesResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="Sales" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\GraphQL\Resolver\UserResolver" class="App\GraphQL\Resolver\UserResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="User" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\GraphQL\Resolver\UsersOrdersResolver" class="App\GraphQL\Resolver\UsersOrdersResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" method="getSessionKey"/>
      <tag name="overblog_graphql.resolver" method="getUser"/>
      <tag name="overblog_graphql.resolver" method="getAuthKey"/>
      <tag name="overblog_graphql.resolver" alias="UsersOrders" method="resolve"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="App\Service\AuthenticatorService"/>
      <argument type="service" id="App\Service\OrderService"/>
    </service>
    <service id="App\GraphQL\Type\DateTimeType" class="App\GraphQL\Type\DateTimeType" public="true" autowire="true">
      <tag name="overblog_graphql.type"/>
      <tag name="overblog_graphql.type" alias="DateTime"/>
    </service>
    <service id="App\Lp\BasketBundle\Controller\BasketController" class="App\Lp\BasketBundle\Controller\BasketController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Lp\BasketBundle\LpBasketBundle" class="App\Lp\BasketBundle\LpBasketBundle" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\CatalogBundle\Controller\CatalogController" class="App\Lp\CatalogBundle\Controller\CatalogController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Lp\CatalogBundle\Controller\ProductController" class="App\Lp\CatalogBundle\Controller\ProductController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Lp\CatalogBundle\DependencyInjection\CatalogExtension" class="App\Lp\CatalogBundle\DependencyInjection\CatalogExtension" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\CatalogBundle\DependencyInjection\Configuration" class="App\Lp\CatalogBundle\DependencyInjection\Configuration" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\CatalogBundle\LpCatalogBundle" class="App\Lp\CatalogBundle\LpCatalogBundle" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\CmsBundle\Controller\CmsController" class="App\Lp\CmsBundle\Controller\CmsController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="monolog.logger"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="App\Service\TagService"/>
      <argument type="service" id="App\Service\UrlParseService"/>
    </service>
    <service id="App\Lp\CmsBundle\LpCmsBundle" class="App\Lp\CmsBundle\LpCmsBundle" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\Framework\Lp" class="App\Lp\Framework\Lp" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\Framework\LpController" class="App\Lp\Framework\LpController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Lp\ProfileBundle\Controller\ProfileController" class="App\Lp\ProfileBundle\Controller\ProfileController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Lp\ProfileBundle\LpProfileBundle" class="App\Lp\ProfileBundle\LpProfileBundle" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Lp\UrlsBundle\Controller\UrlController" class="App\Lp\UrlsBundle\Controller\UrlController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="App\Lp\UrlsBundle\LpUrlsBundle" class="App\Lp\UrlsBundle\LpUrlsBundle" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Repository\AccountRepository" class="App\Repository\AccountRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\AddressRepository" class="App\Repository\AddressRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\BannerRepository" class="App\Repository\BannerRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\BasketItemRepository" class="App\Repository\BasketItemRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\BasketRepository" class="App\Repository\BasketRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CatalogRepository" class="App\Repository\CatalogRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CatalogTagItemRepository" class="App\Repository\CatalogTagItemRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CatalogTagItemValueRepository" class="App\Repository\CatalogTagItemValueRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CatalogTagRepository" class="App\Repository\CatalogTagRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CatalogUrlRepository" class="App\Repository\CatalogUrlRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ConfigurationRepository" class="App\Repository\ConfigurationRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\DeliveryRepository" class="App\Repository\DeliveryRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ImagesRepository" class="App\Repository\ImagesRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ImportProductRepository" class="App\Repository\ImportProductRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ImportQueueRelationRepository" class="App\Repository\ImportQueueRelationRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ImportQueueRepository" class="App\Repository\ImportQueueRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ImportRelationRepository" class="App\Repository\ImportRelationRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\MenuItemRepository" class="App\Repository\MenuItemRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\MenuRepository" class="App\Repository\MenuRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\OrderItemRepository" class="App\Repository\OrderItemRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\OrdersRepository" class="App\Repository\OrdersRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\PaymentMethodRepository" class="App\Repository\PaymentMethodRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductItemImageRepository" class="App\Repository\ProductItemImageRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductItemRepository" class="App\Repository\ProductItemRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductRepository" class="App\Repository\ProductRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductTagItemRepository" class="App\Repository\ProductTagItemRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductTagItemValueRepository" class="App\Repository\ProductTagItemValueRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductTagRepository" class="App\Repository\ProductTagRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductTagValueRepository" class="App\Repository\ProductTagValueRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProductUrlRepository" class="App\Repository\ProductUrlRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\SaleRepository" class="App\Repository\SaleRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\TagsRepository" class="App\Repository\TagsRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\UrlsRepository" class="App\Repository\UrlsRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\UsersRepository" class="App\Repository\UsersRepository" public="false" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Security\LoginFormAuthenticator" class="App\Security\LoginFormAuthenticator" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="security.csrf.token_manager"/>
      <argument type="service" id="security.user_password_encoder.generic"/>
    </service>
    <service id="App\Service\AuthenticatorService" class="App\Service\AuthenticatorService" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="security.user_password_encoder.generic"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
    </service>
    <service id="App\Service\BasketService" class="App\Service\BasketService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="Redis"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\BasketService"/>
      </call>
    </service>
    <service id="App\Service\BeguService" class="App\Service\BeguService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\BeguService"/>
      </call>
    </service>
    <service id="App\Service\ConfigService" class="App\Service\ConfigService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\ConfigService"/>
      </call>
    </service>
    <service id="App\Service\DoctrineService" class="App\Service\DoctrineService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\DoctrineService"/>
      </call>
    </service>
    <service id="App\Service\Import\Formatter\Gradient" class="App\Service\Import\Formatter\Gradient" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Service\Import\Formatter\Loader" class="App\Service\Import\Formatter\Loader" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Service\Import\Formatter\Marinaparfyum" class="App\Service\Import\Formatter\Marinaparfyum" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Service\Import\Importer" class="App\Service\Import\Importer" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\Import\Importer"/>
      </call>
    </service>
    <service id="App\Service\ImportParser" class="App\Service\ImportParser" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="App\Service\TranslitService"/>
      <argument type="service" id="App\Service\Import\Formatter\Loader"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\ImportParser"/>
      </call>
    </service>
    <service id="App\Service\LpService" class="App\Service\LpService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\LpService"/>
      </call>
    </service>
    <service id="App\Service\Manager\TagManager" class="App\Service\Manager\TagManager" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="Redis"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\Manager\TagManager"/>
      </call>
    </service>
    <service id="App\Service\OrderService" class="App\Service\OrderService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\OrderService"/>
      </call>
    </service>
    <service id="App\Service\RequestFilterService" class="App\Service\RequestFilterService" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Service\TagService" class="App\Service\TagService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="Redis"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\TagService"/>
      </call>
    </service>
    <service id="App\Service\TranslitService" class="App\Service\TranslitService" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Service\Twig\Basket" class="App\Service\Twig\Basket" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\Twig\Basket"/>
      </call>
    </service>
    <service id="App\Service\Twig\Tags" class="App\Service\Twig\Tags" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="App\Service\UrlParseService" class="App\Service\UrlParseService" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.ychIlgF.App\Service\UrlParseService"/>
      </call>
    </service>
    <service id="Redis" class="Redis" public="false" autowire="true" autoconfigure="true">
      <call method="connect">
        <argument>%env(REDIS_HOST)%</argument>
        <argument>%env(int:REDIS_PORT)%</argument>
      </call>
    </service>
    <service id="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="Redis"/>
    </service>
    <service id="controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory" public="false"/>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="resolve_controller_name_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="controller_name_converter"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag" public="false">
      <argument type="service" id="service_container"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="debug.argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <argument type="tagged" tag="kernel.cache_warmer"/>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer" public="true">
      <argument type="tagged" tag="kernel.cache_clearer"/>
    </service>
    <service id="kernel" public="true" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem" public="true"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/var/www/symfony/src/Resources</argument>
      <argument type="collection">
        <argument>/var/www/symfony/src</argument>
      </argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner" public="false">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory" public="false">
      <argument type="tagged" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="profiler" type="service" id="profiler" on-invalid="ignore_uninitialized"/>
        <argument key="debug.validator" type="service" id="debug.validator" on-invalid="ignore_uninitialized"/>
        <argument key="debug.stopwatch" type="service" id="debug.stopwatch" on-invalid="ignore_uninitialized"/>
        <argument key="form.type.entity" type="service" id="form.type.entity" on-invalid="ignore_uninitialized"/>
        <argument key="security.token_storage" type="service" id="security.token_storage" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.email_sender.listener" type="service" id="swiftmailer.email_sender.listener" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="profiler">reset</argument>
        <argument key="debug.validator">reset</argument>
        <argument key="debug.stopwatch">reset</argument>
        <argument key="form.type.entity">reset</argument>
        <argument key="security.token_storage">setToken</argument>
        <argument key="swiftmailer.email_sender.listener">reset</argument>
      </argument>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler" public="false">
      <argument type="service" id=".service_locator.gmwRZ3h"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer" public="false">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <argument type="service" id="monolog.logger.console" on-invalid="null"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand" public="false">
      <tag name="console.command" command="about"/>
      <call method="setName">
        <argument>about</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand" public="false">
      <tag name="console.command" command="assets:install"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand" public="false">
      <tag name="console.command" command="cache:clear"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand" public="false">
      <tag name="console.command" command="cache:pool:clear"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand" public="false">
      <tag name="console.command" command="cache:pool:prune"/>
      <argument type="iterator"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand" public="false">
      <tag name="console.command" command="cache:pool:delete"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand" public="false">
      <tag name="console.command" command="cache:warmup"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand" public="false">
      <tag name="console.command" command="debug:config"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand" public="false">
      <tag name="console.command" command="config:dump-reference"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand" public="false">
      <tag name="console.command" command="debug:container"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand" public="false">
      <tag name="console.command" command="debug:autowiring"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand" public="false">
      <tag name="console.command" command="debug:event-dispatcher"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand" public="false">
      <tag name="console.command" command="debug:router"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand" public="false">
      <tag name="console.command" command="router:match"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
    </service>
    <service id="console.command.translation_debug" class="Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand" public="false">
      <tag name="console.command" command="debug:translation"/>
      <argument type="service" id="translator.data_collector"/>
      <argument type="service" id="translation.reader"/>
      <argument type="service" id="translation.extractor"/>
      <argument>/var/www/symfony/translations</argument>
      <argument>/var/www/symfony/templates</argument>
      <call method="setName">
        <argument>debug:translation</argument>
      </call>
    </service>
    <service id="console.command.translation_update" class="Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand" public="false">
      <tag name="console.command" command="translation:update"/>
      <argument type="service" id="translation.writer"/>
      <argument type="service" id="translation.reader"/>
      <argument type="service" id="translation.extractor"/>
      <argument>en</argument>
      <argument>/var/www/symfony/translations</argument>
      <argument>/var/www/symfony/templates</argument>
      <call method="setName">
        <argument>translation:update</argument>
      </call>
    </service>
    <service id="console.command.xliff_lint" class="Symfony\Bundle\FrameworkBundle\Command\XliffLintCommand" public="false">
      <tag name="console.command" command="lint:xliff"/>
      <call method="setName">
        <argument>lint:xliff</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand" public="false">
      <tag name="console.command" command="lint:yaml"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
    </service>
    <service id="console.command.form_debug" class="Symfony\Component\Form\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:form"/>
      <argument type="service" id="form.registry"/>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type</argument>
        <argument>App\Form\Type</argument>
        <argument>Symfony\Bridge\Doctrine\Form\Type</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Type</argument>
        <argument>Vich\UploaderBundle\Form\Type</argument>
      </argument>
      <argument type="collection">
        <argument>App\Form\Type\Image</argument>
        <argument>App\Form\Type\MultipleImage</argument>
        <argument>App\Form\Type\ShippingType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\FormType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\ChoiceType</argument>
        <argument>Symfony\Bridge\Doctrine\Form\Type\EntityType</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminFormType</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminAutocompleteType</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminDividerType</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminSectionType</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminGroupType</argument>
        <argument>Vich\UploaderBundle\Form\Type\VichFileType</argument>
        <argument>Vich\UploaderBundle\Form\Type\VichImageType</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension</argument>
        <argument>Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension</argument>
        <argument>Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Extension\EasyAdminExtension</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser</argument>
        <argument>Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</argument>
        <argument>EasyCorp\Bundle\EasyAdminBundle\Form\Guesser\MissingDoctrineOrmTypeGuesser</argument>
      </argument>
      <call method="setName">
        <argument>debug:form</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="true">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.app.recorder_inner"/>
    </service>
    <service id="cache.app.simple" class="Symfony\Component\Cache\Simple\Psr6Cache" public="false">
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="true">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.system.recorder_inner"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="false">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.validator.recorder_inner"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="false">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.serializer.recorder_inner"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="false">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.annotations.recorder_inner"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine" class="Symfony\Component\Cache\Adapter\DoctrineAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="false">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="translator.selector" class="Symfony\Component\Translation\MessageSelector" public="false"/>
    <service id=".2_ServiceLocator~S_1adHL" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="initialized_session" type="service" id="session" on-invalid="ignore_uninitialized"/>
        <argument key="session" type="service" id="session" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".1_NativeFileSessionHandler~S_1adHL" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler" public="false">
      <argument>/var/www/symfony/var/cache/dev/sessions</argument>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session" public="true">
      <argument type="service" id="session.storage.native"/>
      <argument type="service" id="session.attribute_bag"/>
      <argument type="service" id="session.flash_bag"/>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" public="false">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage" public="false">
      <argument>%session.storage.options%</argument>
      <argument type="service" id="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler"/>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage" public="false">
      <argument type="service" id="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler"/>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.flash_bag" class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag" public="false"/>
    <service id="session.attribute_bag" class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag" public="false"/>
    <service id="session.storage.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage" public="false">
      <argument>/var/www/symfony/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler" public="false">
      <argument type="service" id=".1_NativeFileSessionHandler~S_1adHL"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".2_ServiceLocator~S_1adHL"/>
    </service>
    <service id="session.save_listener" class="Symfony\Component\HttpKernel\EventListener\SaveSessionListener" public="false">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.1. Use the "session_listener" service instead.</deprecated>
    </service>
    <service id="security.csrf.token_generator" class="Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator" public="false"/>
    <service id="security.csrf.token_storage" class="Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage" public="false">
      <argument type="service" id="session"/>
    </service>
    <service id="security.csrf.token_manager" class="Symfony\Component\Security\Csrf\CsrfTokenManager" public="true">
      <argument type="service" id="security.csrf.token_generator"/>
      <argument type="service" id="security.csrf.token_storage"/>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="twig.runtime.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfRuntime" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="twig.extension.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="form.resolved_type_factory" class="Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy" public="false">
      <argument type="service" id=".1_ResolvedFormTypeFactory~8i6rKcS"/>
      <argument type="service" id="data_collector.form"/>
    </service>
    <service id="form.registry" class="Symfony\Component\Form\FormRegistry" public="false">
      <argument type="collection">
        <argument type="service" id="form.extension"/>
      </argument>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.factory" class="Symfony\Component\Form\FormFactory" public="true">
      <argument type="service" id="form.registry"/>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.extension" class="Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension" public="false">
      <argument type="service" id=".service_locator.xySqgao"/>
      <argument type="collection">
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="iterator">
          <argument type="service" id="form.type_extension.form.transformation_failure_handling"/>
          <argument type="service" id="form.type_extension.form.http_foundation"/>
          <argument type="service" id="form.type_extension.form.validator"/>
          <argument type="service" id="form.type_extension.upload.validator"/>
          <argument type="service" id="form.type_extension.csrf"/>
          <argument type="service" id="form.type_extension.form.data_collector"/>
          <argument type="service" id="easyadmin.form.type.extension"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\RepeatedType" type="iterator">
          <argument type="service" id="form.type_extension.repeated.validator"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\SubmitType" type="iterator">
          <argument type="service" id="form.type_extension.submit.validator"/>
        </argument>
      </argument>
      <argument type="iterator">
        <argument type="service" id="form.type_guesser.validator"/>
        <argument type="service" id="form.type_guesser.doctrine"/>
        <argument type="service" id="easyadmin.form.guesser.missing_doctrine_orm_type_guesser"/>
      </argument>
    </service>
    <service id="form.type_guesser.validator" class="Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser" public="false">
      <tag name="form.type_guesser"/>
      <argument type="service" id="debug.validator"/>
    </service>
    <service id="form.choice_list_factory.default" class="Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory" public="false"/>
    <service id="form.choice_list_factory.property_access" class="Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator" public="false">
      <argument type="service" id="form.choice_list_factory.default"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.choice_list_factory.cached" class="Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator" public="false">
      <argument type="service" id="form.choice_list_factory.property_access"/>
    </service>
    <service id="form.type.form" class="Symfony\Component\Form\Extension\Core\Type\FormType" public="false">
      <tag name="form.type"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.type.choice" class="Symfony\Component\Form\Extension\Core\Type\ChoiceType" public="false">
      <tag name="form.type"/>
      <argument type="service" id="form.choice_list_factory.cached"/>
    </service>
    <service id="form.type_extension.form.transformation_failure_handling" class="Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="translator.data_collector" on-invalid="ignore"/>
    </service>
    <service id="form.type_extension.form.http_foundation" class="Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="form.type_extension.form.request_handler"/>
    </service>
    <service id="form.type_extension.form.request_handler" class="Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler" public="false">
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="form.server_params" class="Symfony\Component\Form\Util\ServerParams" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="form.type_extension.form.validator" class="Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="debug.validator"/>
    </service>
    <service id="form.type_extension.repeated.validator" class="Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\RepeatedType" extended-type="Symfony\Component\Form\Extension\Core\Type\RepeatedType"/>
    </service>
    <service id="form.type_extension.submit.validator" class="Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\SubmitType" extended-type="Symfony\Component\Form\Extension\Core\Type\SubmitType"/>
    </service>
    <service id="form.type_extension.upload.validator" class="Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="translator.data_collector"/>
      <argument>validators</argument>
    </service>
    <service id="form.type_extension.csrf" class="Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="security.csrf.token_manager"/>
      <argument>true</argument>
      <argument>_token</argument>
      <argument type="service" id="translator.data_collector" on-invalid="null"/>
      <argument>validators</argument>
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="assets.packages" class="Symfony\Component\Asset\Packages" public="false">
      <argument type="service" id="assets._default_package"/>
      <argument type="collection"/>
    </service>
    <service id="assets.empty_package" class="Symfony\Component\Asset\Package" public="false">
      <argument type="service" id="assets.empty_version_strategy"/>
    </service>
    <service id="assets.context" class="Symfony\Component\Asset\Context\RequestStackContext" public="false">
      <argument type="service" id="request_stack"/>
      <argument></argument>
      <argument>false</argument>
    </service>
    <service id="assets.path_package" class="Symfony\Component\Asset\PathPackage" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="assets.url_package" class="Symfony\Component\Asset\UrlPackage" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="assets.static_version_strategy" class="Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
    </service>
    <service id="assets.empty_version_strategy" class="Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy" public="false"/>
    <service id="assets.json_manifest_version_strategy" class="Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="assets._default_package" class="Symfony\Component\Asset\PathPackage" public="false">
      <argument></argument>
      <argument type="service" id="assets.empty_version_strategy"/>
      <argument type="service" id="assets.context"/>
    </service>
    <service id=".1_PhpArrayAdapter~xZnfN8V" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/var/www/symfony/var/cache/dev/validation.php</argument>
      <argument type="service" id="cache.validator"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="validator.builder" class="Symfony\Component\Validator\ValidatorBuilderInterface" public="false">
      <call method="setConstraintValidatorFactory">
        <argument type="service" id="validator.validator_factory"/>
      </call>
      <call method="setTranslator">
        <argument type="service" id="translator.data_collector"/>
      </call>
      <call method="setTranslationDomain">
        <argument>validators</argument>
      </call>
      <call method="addXmlMappings">
        <argument type="collection">
          <argument>/var/www/symfony/vendor/symfony/form/Resources/config/validation.xml</argument>
        </argument>
      </call>
      <call method="enableAnnotationMapping">
        <argument type="service" id="annotations.cached_reader"/>
      </call>
      <call method="addMethodMapping">
        <argument>loadValidatorMetadata</argument>
      </call>
      <call method="addObjectInitializers">
        <argument type="collection">
          <argument type="service" id="doctrine.orm.validator_initializer"/>
        </argument>
      </call>
      <factory class="Symfony\Component\Validator\Validation" method="createValidatorBuilder"/>
    </service>
    <service id="validator.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="validator.builder"/>
      <argument>/var/www/symfony/var/cache/dev/validation.php</argument>
      <argument type="service" id="cache.validator"/>
    </service>
    <service id="validator.mapping.cache.symfony" class="Symfony\Component\Validator\Mapping\Cache\Psr6Cache" public="false">
      <argument type="service" id=".1_PhpArrayAdapter~xZnfN8V"/>
    </service>
    <service id="validator.validator_factory" class="Symfony\Component\Validator\ContainerConstraintValidatorFactory" public="false">
      <argument type="service" id=".service_locator.HKoUR8q"/>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator" public="false">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
    </service>
    <service id="validator.email" class="Symfony\Component\Validator\Constraints\EmailValidator" public="false">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\EmailValidator"/>
      <argument>html5</argument>
    </service>
    <service id="translator.default" class="Symfony\Bundle\FrameworkBundle\Translation\Translator" public="false">
      <argument type="service" id=".service_locator.yQVjGlt"/>
      <argument type="service" id="translator.formatter.default"/>
      <argument>en</argument>
      <argument type="collection">
        <argument key="translation.loader.php" type="collection">
          <argument>php</argument>
        </argument>
        <argument key="translation.loader.yml" type="collection">
          <argument>yaml</argument>
          <argument>yml</argument>
        </argument>
        <argument key="translation.loader.xliff" type="collection">
          <argument>xlf</argument>
          <argument>xliff</argument>
        </argument>
        <argument key="translation.loader.po" type="collection">
          <argument>po</argument>
        </argument>
        <argument key="translation.loader.mo" type="collection">
          <argument>mo</argument>
        </argument>
        <argument key="translation.loader.qt" type="collection">
          <argument>ts</argument>
        </argument>
        <argument key="translation.loader.csv" type="collection">
          <argument>csv</argument>
        </argument>
        <argument key="translation.loader.res" type="collection">
          <argument>res</argument>
        </argument>
        <argument key="translation.loader.dat" type="collection">
          <argument>dat</argument>
        </argument>
        <argument key="translation.loader.ini" type="collection">
          <argument>ini</argument>
        </argument>
        <argument key="translation.loader.json" type="collection">
          <argument>json</argument>
        </argument>
      </argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/symfony/var/cache/dev/translations</argument>
        <argument key="debug">true</argument>
        <argument key="resource_files" type="collection">
          <argument key="af" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.af.xlf</argument>
          </argument>
          <argument key="ar" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.ar.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.ar.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.ar.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.ar.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.ar.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.ar.yml</argument>
          </argument>
          <argument key="az" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.az.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.az.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.az.xlf</argument>
          </argument>
          <argument key="bg" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.bg.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.bg.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.bg.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.bg.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.bg.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.bg.yml</argument>
          </argument>
          <argument key="ca" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.ca.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.ca.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.ca.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.ca.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.ca.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.ca.yml</argument>
          </argument>
          <argument key="cs" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.cs.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.cs.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.cs.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.cs.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.cs.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.cs.yml</argument>
          </argument>
          <argument key="cy" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.cy.xlf</argument>
          </argument>
          <argument key="da" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.da.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.da.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.da.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.da.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.da.xlf</argument>
          </argument>
          <argument key="de" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.de.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.de.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.de.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.de.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.de.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.de.yml</argument>
          </argument>
          <argument key="el" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.el.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.el.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.el.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.el.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.el.xlf</argument>
          </argument>
          <argument key="en" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.en.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.en.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.en.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.en.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.en.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.en.yml</argument>
          </argument>
          <argument key="es" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.es.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.es.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.es.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.es.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.es.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.es.yml</argument>
          </argument>
          <argument key="et" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.et.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.et.xlf</argument>
          </argument>
          <argument key="eu" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.eu.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.eu.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.eu.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.eu.xlf</argument>
          </argument>
          <argument key="fa" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.fa.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.fa.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.fa.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.fa.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.fa.xlf</argument>
          </argument>
          <argument key="fi" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.fi.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.fi.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.fi.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.fi.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.fi.yml</argument>
          </argument>
          <argument key="fr" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.fr.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.fr.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.fr.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.fr.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.fr.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.fr.yml</argument>
          </argument>
          <argument key="gl" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.gl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.gl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.gl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.gl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.gl.xlf</argument>
          </argument>
          <argument key="he" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.he.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.he.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.he.xlf</argument>
          </argument>
          <argument key="hr" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.hr.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.hr.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.hr.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.hr.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.hr.xlf</argument>
          </argument>
          <argument key="hu" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.hu.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.hu.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.hu.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.hu.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.hu.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.hu.yml</argument>
          </argument>
          <argument key="hy" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.hy.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.hy.xlf</argument>
          </argument>
          <argument key="id" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.id.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.id.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.id.xlf</argument>
          </argument>
          <argument key="it" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.it.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.it.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.it.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.it.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.it.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.it.yml</argument>
          </argument>
          <argument key="ja" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.ja.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.ja.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.ja.xlf</argument>
          </argument>
          <argument key="lb" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.lb.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.lb.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.lb.xlf</argument>
          </argument>
          <argument key="lt" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.lt.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.lt.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.lt.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.lt.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.lt.xlf</argument>
          </argument>
          <argument key="lv" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.lv.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.lv.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.lv.xlf</argument>
          </argument>
          <argument key="mn" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.mn.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.mn.xlf</argument>
          </argument>
          <argument key="nb" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.nb.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.nb.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.nb.xlf</argument>
          </argument>
          <argument key="nl" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.nl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.nl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.nl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.nl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.nl.xlf</argument>
          </argument>
          <argument key="nn" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.nn.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.nn.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.nn.xlf</argument>
          </argument>
          <argument key="no" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.no.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.no.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.no.xlf</argument>
          </argument>
          <argument key="pl" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.pl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.pl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.pl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.pl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.pl.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.pl.yml</argument>
          </argument>
          <argument key="pt" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.pt.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.pt.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.pt.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.pt.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.pt.yml</argument>
          </argument>
          <argument key="pt_BR" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.pt_BR.xlf</argument>
          </argument>
          <argument key="ro" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.ro.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.ro.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.ro.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.ro.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.ro.xlf</argument>
          </argument>
          <argument key="ru" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.ru.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.ru.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.ru.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.ru.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.ru.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.ru.yml</argument>
          </argument>
          <argument key="sk" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.sk.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.sk.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.sk.xlf</argument>
          </argument>
          <argument key="sl" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.sl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.sl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.sl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.sl.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.sl.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.sl.yml</argument>
          </argument>
          <argument key="sq" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.sq.xlf</argument>
          </argument>
          <argument key="sr_Cyrl" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.sr_Cyrl.xlf</argument>
          </argument>
          <argument key="sr_Latn" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.sr_Latn.xlf</argument>
          </argument>
          <argument key="sv" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.sv.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.sv.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.sv.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.sv.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.sv.xlf</argument>
          </argument>
          <argument key="th" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.th.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.th.xlf</argument>
          </argument>
          <argument key="tl" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.tl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.tl.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.tl.xlf</argument>
          </argument>
          <argument key="tr" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.tr.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.tr.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.tr.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.tr.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.tr.yml</argument>
          </argument>
          <argument key="uk" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.uk.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.uk.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.uk.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.uk.xlf</argument>
            <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/translations/VichUploaderBundle.uk.yml</argument>
          </argument>
          <argument key="vi" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.vi.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.vi.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.vi.xlf</argument>
          </argument>
          <argument key="zh_CN" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf</argument>
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.zh_CN.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.zh_CN.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.zh_CN.xlf</argument>
          </argument>
          <argument key="zh_TW" type="collection">
            <argument>/var/www/symfony/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf</argument>
          </argument>
          <argument key="pt_PT" type="collection">
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.pt_PT.xlf</argument>
          </argument>
          <argument key="ua" type="collection">
            <argument>/var/www/symfony/vendor/symfony/security/Core/Resources/translations/security.ua.xlf</argument>
          </argument>
          <argument key="sr_RS" type="collection">
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/EasyAdminBundle.sr_RS.xlf</argument>
            <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/translations/messages.sr_RS.xlf</argument>
          </argument>
        </argument>
      </argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
      <call method="setFallbackLocales">
        <argument type="collection">
          <argument>en</argument>
        </argument>
      </call>
    </service>
    <service id="translator.logging" class="Symfony\Component\Translation\LoggingTranslator" public="false">
      <tag name="monolog.logger" channel="translation"/>
      <argument type="service" id="translator.logging.inner"/>
      <argument type="service" id="monolog.logger.translation"/>
    </service>
    <service id="translator.formatter.default" class="Symfony\Component\Translation\Formatter\MessageFormatter" public="false">
      <argument type="service" id="translator.selector"/>
    </service>
    <service id="translation.loader.php" class="Symfony\Component\Translation\Loader\PhpFileLoader" public="false">
      <tag name="translation.loader" alias="php"/>
    </service>
    <service id="translation.loader.yml" class="Symfony\Component\Translation\Loader\YamlFileLoader" public="false">
      <tag name="translation.loader" alias="yaml" legacy_alias="yml" legacy-alias="yml"/>
    </service>
    <service id="translation.loader.xliff" class="Symfony\Component\Translation\Loader\XliffFileLoader" public="false">
      <tag name="translation.loader" alias="xlf" legacy_alias="xliff" legacy-alias="xliff"/>
    </service>
    <service id="translation.loader.po" class="Symfony\Component\Translation\Loader\PoFileLoader" public="false">
      <tag name="translation.loader" alias="po"/>
    </service>
    <service id="translation.loader.mo" class="Symfony\Component\Translation\Loader\MoFileLoader" public="false">
      <tag name="translation.loader" alias="mo"/>
    </service>
    <service id="translation.loader.qt" class="Symfony\Component\Translation\Loader\QtFileLoader" public="false">
      <tag name="translation.loader" alias="ts"/>
    </service>
    <service id="translation.loader.csv" class="Symfony\Component\Translation\Loader\CsvFileLoader" public="false">
      <tag name="translation.loader" alias="csv"/>
    </service>
    <service id="translation.loader.res" class="Symfony\Component\Translation\Loader\IcuResFileLoader" public="false">
      <tag name="translation.loader" alias="res"/>
    </service>
    <service id="translation.loader.dat" class="Symfony\Component\Translation\Loader\IcuDatFileLoader" public="false">
      <tag name="translation.loader" alias="dat"/>
    </service>
    <service id="translation.loader.ini" class="Symfony\Component\Translation\Loader\IniFileLoader" public="false">
      <tag name="translation.loader" alias="ini"/>
    </service>
    <service id="translation.loader.json" class="Symfony\Component\Translation\Loader\JsonFileLoader" public="false">
      <tag name="translation.loader" alias="json"/>
    </service>
    <service id="translation.dumper.php" class="Symfony\Component\Translation\Dumper\PhpFileDumper" public="false">
      <tag name="translation.dumper" alias="php"/>
    </service>
    <service id="translation.dumper.xliff" class="Symfony\Component\Translation\Dumper\XliffFileDumper" public="false">
      <tag name="translation.dumper" alias="xlf"/>
    </service>
    <service id="translation.dumper.po" class="Symfony\Component\Translation\Dumper\PoFileDumper" public="false">
      <tag name="translation.dumper" alias="po"/>
    </service>
    <service id="translation.dumper.mo" class="Symfony\Component\Translation\Dumper\MoFileDumper" public="false">
      <tag name="translation.dumper" alias="mo"/>
    </service>
    <service id="translation.dumper.yml" class="Symfony\Component\Translation\Dumper\YamlFileDumper" public="false">
      <tag name="translation.dumper" alias="yml"/>
    </service>
    <service id="translation.dumper.yaml" class="Symfony\Component\Translation\Dumper\YamlFileDumper" public="false">
      <tag name="translation.dumper" alias="yaml"/>
      <argument>yaml</argument>
    </service>
    <service id="translation.dumper.qt" class="Symfony\Component\Translation\Dumper\QtFileDumper" public="false">
      <tag name="translation.dumper" alias="ts"/>
    </service>
    <service id="translation.dumper.csv" class="Symfony\Component\Translation\Dumper\CsvFileDumper" public="false">
      <tag name="translation.dumper" alias="csv"/>
    </service>
    <service id="translation.dumper.ini" class="Symfony\Component\Translation\Dumper\IniFileDumper" public="false">
      <tag name="translation.dumper" alias="ini"/>
    </service>
    <service id="translation.dumper.json" class="Symfony\Component\Translation\Dumper\JsonFileDumper" public="false">
      <tag name="translation.dumper" alias="json"/>
    </service>
    <service id="translation.dumper.res" class="Symfony\Component\Translation\Dumper\IcuResFileDumper" public="false">
      <tag name="translation.dumper" alias="res"/>
    </service>
    <service id="translation.extractor.php" class="Symfony\Component\Translation\Extractor\PhpExtractor" public="false">
      <tag name="translation.extractor" alias="php"/>
    </service>
    <service id="translation.reader" class="Symfony\Component\Translation\Reader\TranslationReader" public="false">
      <call method="addLoader">
        <argument>php</argument>
        <argument type="service" id="translation.loader.php"/>
      </call>
      <call method="addLoader">
        <argument>yaml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>yml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>xlf</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>xliff</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>po</argument>
        <argument type="service" id="translation.loader.po"/>
      </call>
      <call method="addLoader">
        <argument>mo</argument>
        <argument type="service" id="translation.loader.mo"/>
      </call>
      <call method="addLoader">
        <argument>ts</argument>
        <argument type="service" id="translation.loader.qt"/>
      </call>
      <call method="addLoader">
        <argument>csv</argument>
        <argument type="service" id="translation.loader.csv"/>
      </call>
      <call method="addLoader">
        <argument>res</argument>
        <argument type="service" id="translation.loader.res"/>
      </call>
      <call method="addLoader">
        <argument>dat</argument>
        <argument type="service" id="translation.loader.dat"/>
      </call>
      <call method="addLoader">
        <argument>ini</argument>
        <argument type="service" id="translation.loader.ini"/>
      </call>
      <call method="addLoader">
        <argument>json</argument>
        <argument type="service" id="translation.loader.json"/>
      </call>
    </service>
    <service id="translation.extractor" class="Symfony\Component\Translation\Extractor\ChainExtractor" public="false">
      <call method="addExtractor">
        <argument>php</argument>
        <argument type="service" id="translation.extractor.php"/>
      </call>
      <call method="addExtractor">
        <argument>twig</argument>
        <argument type="service" id="twig.translation.extractor"/>
      </call>
    </service>
    <service id="translation.writer" class="Symfony\Component\Translation\Writer\TranslationWriter" public="false">
      <call method="addDumper">
        <argument>php</argument>
        <argument type="service" id="translation.dumper.php"/>
      </call>
      <call method="addDumper">
        <argument>xlf</argument>
        <argument type="service" id="translation.dumper.xliff"/>
      </call>
      <call method="addDumper">
        <argument>po</argument>
        <argument type="service" id="translation.dumper.po"/>
      </call>
      <call method="addDumper">
        <argument>mo</argument>
        <argument type="service" id="translation.dumper.mo"/>
      </call>
      <call method="addDumper">
        <argument>yml</argument>
        <argument type="service" id="translation.dumper.yml"/>
      </call>
      <call method="addDumper">
        <argument>yaml</argument>
        <argument type="service" id="translation.dumper.yaml"/>
      </call>
      <call method="addDumper">
        <argument>ts</argument>
        <argument type="service" id="translation.dumper.qt"/>
      </call>
      <call method="addDumper">
        <argument>csv</argument>
        <argument type="service" id="translation.dumper.csv"/>
      </call>
      <call method="addDumper">
        <argument>ini</argument>
        <argument type="service" id="translation.dumper.ini"/>
      </call>
      <call method="addDumper">
        <argument>json</argument>
        <argument type="service" id="translation.dumper.json"/>
      </call>
      <call method="addDumper">
        <argument>res</argument>
        <argument type="service" id="translation.dumper.res"/>
      </call>
    </service>
    <service id="translation.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="translator"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.3nNxzEJ.translation.warmer"/>
    </service>
    <service id="translator_listener" class="Symfony\Component\HttpKernel\EventListener\TranslatorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="translator.data_collector"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="profiler" class="Symfony\Component\HttpKernel\Profiler\Profiler" public="true">
      <tag name="monolog.logger" channel="profiler"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="profiler.storage"/>
      <argument type="service" id="monolog.logger.profiler" on-invalid="null"/>
      <argument>true</argument>
      <call method="add">
        <argument type="service" id="data_collector.request"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.time"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.memory"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.validator"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.ajax"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.form"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.exception"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.logger"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.events"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.router"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.cache"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.translation"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.security"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.twig"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.doctrine"/>
      </call>
      <call method="add">
        <argument type="service" id="swiftmailer.data_collector"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.dump"/>
      </call>
      <call method="add">
        <argument type="service" id="easyadmin.data_collector"/>
      </call>
      <call method="add">
        <argument type="service" id="Vich\UploaderBundle\DataCollector\MappingCollector"/>
      </call>
      <call method="add">
        <argument type="service" id="data_collector.config"/>
      </call>
    </service>
    <service id="profiler.storage" class="Symfony\Component\HttpKernel\Profiler\FileProfilerStorage" public="false">
      <argument>file:/var/www/symfony/var/cache/dev/profiler</argument>
    </service>
    <service id="profiler_listener" class="Symfony\Component\HttpKernel\EventListener\ProfilerListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="profiler"/>
      <argument type="service" id="request_stack"/>
      <argument>null</argument>
      <argument>false</argument>
      <argument>false</argument>
    </service>
    <service id="data_collector.config" class="Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/config.html.twig" id="config" priority="-255"/>
      <call method="setKernel">
        <argument type="service" id="kernel" on-invalid="ignore"/>
      </call>
    </service>
    <service id="data_collector.request" class="Symfony\Component\HttpKernel\DataCollector\RequestDataCollector" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="data_collector" template="@WebProfiler/Collector/request.html.twig" id="request" priority="335"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="data_collector.ajax" class="Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/ajax.html.twig" id="ajax" priority="315"/>
    </service>
    <service id="data_collector.exception" class="Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/exception.html.twig" id="exception" priority="305"/>
    </service>
    <service id="data_collector.events" class="Symfony\Component\HttpKernel\DataCollector\EventDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/events.html.twig" id="events" priority="290"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="ignore"/>
    </service>
    <service id="data_collector.logger" class="Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/logger.html.twig" id="logger" priority="300"/>
      <tag name="monolog.logger" channel="profiler"/>
      <argument type="service" id="monolog.logger.profiler" on-invalid="ignore"/>
      <argument>/var/www/symfony/var/cache/dev/srcDevDebugProjectContainer</argument>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="data_collector.time" class="Symfony\Component\HttpKernel\DataCollector\TimeDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/time.html.twig" id="time" priority="330"/>
      <argument type="service" id="kernel" on-invalid="ignore"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
    </service>
    <service id="data_collector.memory" class="Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/memory.html.twig" id="memory" priority="325"/>
    </service>
    <service id="data_collector.router" class="Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector" public="false">
      <tag name="kernel.event_listener" event="kernel.controller" method="onKernelController"/>
      <tag name="data_collector" template="@WebProfiler/Collector/router.html.twig" id="router" priority="285"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="data_collector.cache" class="Symfony\Component\Cache\DataCollector\CacheDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/cache.html.twig" id="cache" priority="275"/>
      <call method="addInstance">
        <argument>cache.app</argument>
        <argument type="service" id="cache.app"/>
      </call>
      <call method="addInstance">
        <argument>cache.system</argument>
        <argument type="service" id="cache.system"/>
      </call>
      <call method="addInstance">
        <argument>cache.validator</argument>
        <argument type="service" id="cache.validator"/>
      </call>
      <call method="addInstance">
        <argument>cache.serializer</argument>
        <argument type="service" id="cache.serializer"/>
      </call>
      <call method="addInstance">
        <argument>cache.annotations</argument>
        <argument type="service" id="cache.annotations"/>
      </call>
      <call method="addInstance">
        <argument>cache.security_expression_language</argument>
        <argument type="service" id="cache.security_expression_language"/>
      </call>
    </service>
    <service id=".1_ResolvedFormTypeFactory~8i6rKcS" class="Symfony\Component\Form\ResolvedFormTypeFactory" public="false"/>
    <service id="form.type_extension.form.data_collector" class="Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="data_collector.form"/>
    </service>
    <service id="data_collector.form.extractor" class="Symfony\Component\Form\Extension\DataCollector\FormDataExtractor" public="false"/>
    <service id="data_collector.form" class="Symfony\Component\Form\Extension\DataCollector\FormDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/form.html.twig" id="form" priority="310"/>
      <argument type="service" id="data_collector.form.extractor"/>
    </service>
    <service id="debug.validator" class="Symfony\Component\Validator\Validator\TraceableValidator" public="false">
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="debug.validator.inner"/>
    </service>
    <service id="data_collector.validator" class="Symfony\Component\Validator\DataCollector\ValidatorDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/validator.html.twig" id="validator" priority="320"/>
      <argument type="service" id="debug.validator"/>
    </service>
    <service id="translator.data_collector" class="Symfony\Component\Translation\DataCollectorTranslator" public="false">
      <argument type="service" id="translator.default"/>
    </service>
    <service id="data_collector.translation" class="Symfony\Component\Translation\DataCollector\TranslationDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/translation.html.twig" id="translation" priority="275"/>
      <argument type="service" id="translator.data_collector"/>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id="cache.property_access" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false">
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument type="service" id="monolog.logger.php" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
      <argument>true</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" public="false">
      <argument>null</argument>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
      <argument>/var/www/symfony</argument>
      <argument type="service" id="debug.file_link_formatter.url_format"/>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch">
      <tag name="kernel.reset" method="reset"/>
      <argument>true</argument>
    </service>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher" public="false">
      <tag name="container.hot_path"/>
      <tag name="monolog.logger" channel="event"/>
      <argument type="service" id="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="monolog.logger.event" on-invalid="null"/>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="data_collector.router"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="easyadmin.listener.controller"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>easy_admin.post_initialize</argument>
        <argument type="collection">
          <argument type="service" id="easyadmin.listener.request_post_initialize"/>
          <argument>initializeRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.executor.context</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\RequestFilesListener"/>
          <argument>onExecutorContextEvent</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.post_executor</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\ErrorHandlerListener"/>
          <argument>onPostExecutor</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.error_formatting</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\ErrorLoggerListener"/>
          <argument>onErrorFormatting</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.pre_executor</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\DebugListener"/>
          <argument>onPreExecutor</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.post_executor</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\DebugListener"/>
          <argument>onPostExecutor</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="overblog_graphql.event_listener.classloader_listener"/>
          <argument>load</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="overblog_graphql.event_listener.classloader_listener"/>
          <argument>load</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>graphql.error_formatting</argument>
        <argument type="collection">
          <argument type="service" id="assoconnect_graphql_mutation_validator.formatter"/>
          <argument>onErrorFormatting</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="streamed_response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="resolve_controller_name_subscriber"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>24</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="translator_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="translator_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="profiler_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="profiler_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.terminate</argument>
        <argument type="collection">
          <argument type="service" id="profiler_listener"/>
          <argument>onKernelTerminate</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="data_collector.request"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="data_collector.request"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="web_link.add_link_header_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.controller.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.converter.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.view.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.view.listener"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.security.listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service" id="framework_extra_bundle.event.is_granted"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="security.rememberme.response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.security.firewall"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="debug.security.firewall"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.terminate</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="web_profiler.debug_toolbar"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="twig.exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="twig.exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="monolog.handler.console"/>
          <argument>onCommand</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="monolog.handler.console"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="debug.dump_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="maker.console_error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="maker.console_error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver" public="false">
      <argument type="service" id="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.log_processor" class="Symfony\Bridge\Monolog\Processor\DebugProcessor" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.service"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.service" class="Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="routing.resolver"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router" public="false">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.oNnsU_h.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/symfony/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</argument>
        <argument key="generator_cache_class">srcDevDebugProjectContainerUrlGenerator</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</argument>
        <argument key="matcher_cache_class">srcDevDebugProjectContainerUrlMatcher</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.router" on-invalid="ignore"/>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.tdKlFgs.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
      <argument>/var/www/symfony</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument type="service" id="twig" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id=".2_PhpArrayAdapter~bl7ELaz" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/var/www/symfony/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id=".1_ArrayCache~bl7ELaz" class="Doctrine\Common\Cache\ArrayCache" public="false"/>
    <service id="annotations.reader" class="Doctrine\Common\Annotations\AnnotationReader" public="false">
      <call method="addGlobalIgnoredName">
        <argument>required</argument>
        <argument type="service" id="annotations.dummy_registry"/>
      </call>
    </service>
    <service id="annotations.dummy_registry" class="Doctrine\Common\Annotations\AnnotationRegistry" public="false">
      <call method="registerUniqueLoader">
        <argument>class_exists</argument>
      </call>
    </service>
    <service id="annotations.cached_reader" class="Doctrine\Common\Annotations\CachedReader" public="false">
      <tag name="annotations.cached_reader"/>
      <argument type="service" id="annotations.reader"/>
      <argument type="service" id=".1_ArrayCache~bl7ELaz"/>
      <argument>true</argument>
      <property name="cacheProviderBackup" type="service" id="annotations.cache"/>
    </service>
    <service id="annotations.filesystem_cache" class="Doctrine\Common\Cache\FilesystemCache" public="false">
      <argument></argument>
    </service>
    <service id="annotations.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="annotations.reader"/>
      <argument>/var/www/symfony/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <argument>#^Symfony\\(?:Component\\HttpKernel\\|Bundle\\FrameworkBundle\\Controller\\(?!AbstractController$|Controller$))#</argument>
      <argument>true</argument>
    </service>
    <service id="annotations.cache" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <argument type="service" id=".2_PhpArrayAdapter~bl7ELaz"/>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor" public="false">
      <argument>false</argument>
      <argument>false</argument>
      <argument type="service" id="cache.property_access" on-invalid="ignore"/>
    </service>
    <service id="serializer" class="Symfony\Component\Serializer\Serializer" public="true">
      <argument type="collection">
        <argument type="service" id="serializer.normalizer.json_serializable"/>
        <argument type="service" id="serializer.normalizer.datetime"/>
        <argument type="service" id="serializer.normalizer.constraint_violation_list"/>
        <argument type="service" id="serializer.normalizer.dateinterval"/>
        <argument type="service" id="serializer.normalizer.data_uri"/>
        <argument type="service" id="serializer.denormalizer.array"/>
        <argument type="service" id="serializer.normalizer.object"/>
      </argument>
      <argument type="collection">
        <argument type="service" id="serializer.encoder.xml"/>
        <argument type="service" id="serializer.encoder.json"/>
        <argument type="service" id="serializer.encoder.yaml"/>
        <argument type="service" id="serializer.encoder.csv"/>
      </argument>
    </service>
    <service id="serializer.mapping.class_discriminator_resolver" class="Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata" public="false">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.dateinterval" class="Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.data_uri" class="Symfony\Component\Serializer\Normalizer\DataUriNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-920"/>
    </service>
    <service id="serializer.normalizer.datetime" class="Symfony\Component\Serializer\Normalizer\DateTimeNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-910"/>
    </service>
    <service id="serializer.normalizer.json_serializable" class="Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-900"/>
    </service>
    <service id="serializer.normalizer.object" class="Symfony\Component\Serializer\Normalizer\ObjectNormalizer" public="false">
      <tag name="serializer.normalizer" priority="-1000"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
      <argument>null</argument>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="property_info" on-invalid="ignore"/>
      <argument type="service" id="serializer.mapping.class_discriminator_resolver" on-invalid="ignore"/>
    </service>
    <service id="serializer.denormalizer.array" class="Symfony\Component\Serializer\Normalizer\ArrayDenormalizer" public="false">
      <tag name="serializer.normalizer" priority="-990"/>
    </service>
    <service id="serializer.mapping.chain_loader" class="Symfony\Component\Serializer\Mapping\Loader\LoaderChain" public="false">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader" public="false">
            <argument type="service" id="annotations.cached_reader"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="serializer.mapping.class_metadata_factory" class="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory" public="false">
      <argument type="service" id="serializer.mapping.chain_loader"/>
      <argument>null</argument>
    </service>
    <service id="serializer.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader" public="false">
            <argument type="service" id="annotations.cached_reader"/>
          </service>
        </argument>
      </argument>
      <argument>/var/www/symfony/var/cache/dev/serialization.php</argument>
      <argument type="service" id="cache.serializer"/>
    </service>
    <service id="serializer.mapping.cache.symfony" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/var/www/symfony/var/cache/dev/serialization.php</argument>
      <argument type="service" id="cache.serializer"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="serializer.encoder.xml" class="Symfony\Component\Serializer\Encoder\XmlEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.json" class="Symfony\Component\Serializer\Encoder\JsonEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.yaml" class="Symfony\Component\Serializer\Encoder\YamlEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.csv" class="Symfony\Component\Serializer\Encoder\CsvEncoder" public="false">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.name_converter.camel_case_to_snake_case" class="Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter" public="false"/>
    <service id="property_info.serializer_extractor" class="Symfony\Component\PropertyInfo\Extractor\SerializerExtractor" public="false">
      <tag name="property_info.list_extractor" priority="-999"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="property_info" class="Symfony\Component\PropertyInfo\PropertyInfoExtractor" public="false">
      <argument type="iterator">
        <argument type="service" id="property_info.serializer_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
        <argument type="service" id="doctrine.orm.lp_perl_entity_manager.property_info_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
        <argument type="service" id="doctrine.orm.lp_perl_entity_manager.property_info_extractor"/>
        <argument type="service" id="property_info.php_doc_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.php_doc_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
    </service>
    <service id="property_info.reflection_extractor" class="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor" public="false">
      <tag name="property_info.list_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1002"/>
      <tag name="property_info.access_extractor" priority="-1000"/>
    </service>
    <service id="property_info.php_doc_extractor" class="Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor">
      <tag name="property_info.description_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1001"/>
    </service>
    <service id="web_link.add_link_header_listener" class="Symfony\Component\WebLink\EventListener\AddLinkHeaderListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="doctrine_cache.abstract.apc" class="Doctrine\Common\Cache\ApcCache" abstract="true"/>
    <service id="doctrine_cache.abstract.apcu" class="Doctrine\Common\Cache\ApcuCache" abstract="true"/>
    <service id="doctrine_cache.abstract.array" class="Doctrine\Common\Cache\ArrayCache" abstract="true"/>
    <service id="doctrine_cache.abstract.chain" class="Doctrine\Common\Cache\ChainCache" abstract="true"/>
    <service id="doctrine_cache.abstract.couchbase" class="Doctrine\Common\Cache\CouchbaseCache" abstract="true"/>
    <service id="doctrine_cache.abstract.file_system" class="Doctrine\Common\Cache\FilesystemCache" abstract="true"/>
    <service id="doctrine_cache.abstract.php_file" class="Doctrine\Common\Cache\PhpFileCache" abstract="true"/>
    <service id="doctrine_cache.abstract.memcache" class="Doctrine\Common\Cache\MemcacheCache" abstract="true"/>
    <service id="doctrine_cache.abstract.memcached" class="Doctrine\Common\Cache\MemcachedCache" abstract="true"/>
    <service id="doctrine_cache.abstract.mongodb" class="Doctrine\Common\Cache\MongoDBCache" abstract="true"/>
    <service id="doctrine_cache.abstract.redis" class="Doctrine\Common\Cache\RedisCache" abstract="true"/>
    <service id="doctrine_cache.abstract.predis" class="Doctrine\Common\Cache\PredisCache" abstract="true"/>
    <service id="doctrine_cache.abstract.riak" class="Doctrine\Common\Cache\RiakCache" abstract="true"/>
    <service id="doctrine_cache.abstract.sqlite3" class="Doctrine\Common\Cache\SQLite3Cache" abstract="true"/>
    <service id="doctrine_cache.abstract.void" class="Doctrine\Common\Cache\VoidCache" abstract="true"/>
    <service id="doctrine_cache.abstract.wincache" class="Doctrine\Common\Cache\WinCacheCache" abstract="true"/>
    <service id="doctrine_cache.abstract.xcache" class="Doctrine\Common\Cache\XcacheCache" abstract="true"/>
    <service id="doctrine_cache.abstract.zenddata" class="Doctrine\Common\Cache\ZendDataCache" abstract="true"/>
    <service id="doctrine_cache.contains_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.delete_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.flush_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.stats_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand">
      <tag name="console.command"/>
    </service>
    <service id="sensio_framework_extra.controller.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="sensio_framework_extra.converter.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="sensio_framework_extra.converter.manager"/>
      <argument>true</argument>
    </service>
    <service id="sensio_framework_extra.converter.manager" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager">
      <call method="add">
        <argument type="service" id="sensio_framework_extra.converter.doctrine.orm"/>
        <argument>0</argument>
        <argument>doctrine.orm</argument>
      </call>
      <call method="add">
        <argument type="service" id="framework_extra_bundle.date_time_param_converter"/>
        <argument>0</argument>
        <argument>datetime</argument>
      </call>
    </service>
    <service id="sensio_framework_extra.converter.doctrine.orm" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter" public="false">
      <tag name="request.param_converter" converter="doctrine.orm"/>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
      <argument type="service" id="sensio_framework_extra.converter.doctrine.orm.expression_language.default" on-invalid="null"/>
    </service>
    <service id="framework_extra_bundle.date_time_param_converter" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter" public="false">
      <tag name="request.param_converter" converter="datetime"/>
    </service>
    <service id="sensio_framework_extra.converter.doctrine.orm.expression_language.default" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage" public="false"/>
    <service id="sensio_framework_extra.view.guesser" class="Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser" public="false">
      <argument type="service" id="kernel"/>
    </service>
    <service id="sensio_framework_extra.view.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="sensio_framework_extra.view.guesser"/>
      <argument type="service" id="twig" on-invalid="null"/>
    </service>
    <service id="sensio_framework_extra.cache.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="sensio_framework_extra.security.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument type="service" id="sensio_framework_extra.security.expression_language.default" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver" on-invalid="null"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="sensio_framework_extra.security.expression_language.default" class="Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage" public="false"/>
    <service id="framework_extra_bundle.event.is_granted" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
    </service>
    <service id="framework_extra_bundle.argument_name_convertor" class="Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter" public="false">
      <argument type="service" id="argument_metadata_factory"/>
    </service>
    <service id="doctrine.dbal.logger.chain" class="Doctrine\DBAL\Logging\LoggerChain" public="false" abstract="true">
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger"/>
      </call>
    </service>
    <service id="doctrine.dbal.logger.profiling" class="Doctrine\DBAL\Logging\DebugStack" public="false" abstract="true"/>
    <service id="doctrine.dbal.logger" class="Symfony\Bridge\Doctrine\Logger\DbalLogger" public="false">
      <tag name="monolog.logger" channel="doctrine"/>
      <argument type="service" id="monolog.logger.doctrine" on-invalid="null"/>
      <argument type="service" id="debug.stopwatch" on-invalid="null"/>
    </service>
    <service id="data_collector.doctrine" class="Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector" public="false">
      <tag name="data_collector" template="@Doctrine/Collector/db.html.twig" id="db" priority="250"/>
      <argument type="service" id="doctrine"/>
      <call method="addLogger">
        <argument>default</argument>
        <argument type="service" id="doctrine.dbal.logger.profiling.default"/>
      </call>
      <call method="addLogger">
        <argument>lp_perl</argument>
        <argument type="service" id="doctrine.dbal.logger.profiling.lp_perl"/>
      </call>
    </service>
    <service id="doctrine.dbal.connection_factory" class="Doctrine\Bundle\DoctrineBundle\ConnectionFactory">
      <argument type="collection"/>
    </service>
    <service id="doctrine.dbal.connection" class="Doctrine\DBAL\Connection" abstract="true">
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.dbal.connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" public="false" abstract="true">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.dbal.connection.configuration" class="Doctrine\DBAL\Configuration" public="false" abstract="true"/>
    <service id="doctrine" class="Doctrine\Bundle\DoctrineBundle\Registry" public="true">
      <argument type="service" id="service_container"/>
      <argument>%doctrine.connections%</argument>
      <argument>%doctrine.entity_managers%</argument>
      <argument>default</argument>
      <argument>default</argument>
    </service>
    <service id="doctrine.twig.doctrine_extension" class="Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="doctrine.database_create_command" class="Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:create"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:create</argument>
      </call>
    </service>
    <service id="doctrine.database_drop_command" class="Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:drop"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:drop</argument>
      </call>
    </service>
    <service id="doctrine.generate_entities_command" class="Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand">
      <tag name="console.command" command="doctrine:generate:entities"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:generate:entities</argument>
      </call>
    </service>
    <service id="doctrine.query_sql_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand">
      <tag name="console.command" command="doctrine:query:sql"/>
      <call method="setName">
        <argument>doctrine:query:sql</argument>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection.configuration" class="Doctrine\DBAL\Configuration" public="false">
      <call method="setSQLLogger">
        <argument type="service" id="doctrine.dbal.logger.chain.default"/>
      </call>
    </service>
    <service id="doctrine.dbal.logger.profiling.default" class="Doctrine\DBAL\Logging\DebugStack" public="false"/>
    <service id="doctrine.dbal.logger.chain.default" class="Doctrine\DBAL\Logging\LoggerChain" public="false">
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger"/>
      </call>
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger.profiling.default"/>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" public="false">
      <argument type="service" id="service_container"/>
      <call method="addEventSubscriber">
        <argument type="service" id="vich_uploader.listener.clean.product_images"/>
      </call>
      <call method="addEventSubscriber">
        <argument type="service" id="vich_uploader.listener.remove.product_images"/>
      </call>
      <call method="addEventSubscriber">
        <argument type="service" id="vich_uploader.listener.upload.product_images"/>
      </call>
      <call method="addEventListener">
        <argument type="collection">
          <argument>loadClassMetadata</argument>
        </argument>
        <argument type="service" id="doctrine.orm.default_listeners.attach_entity_listeners"/>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection" class="Doctrine\DBAL\Connection" public="true">
      <argument type="collection">
        <argument key="url">%env(resolve:DATABASE_URL)%</argument>
        <argument key="driver">pdo_pgsql</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="user">root</argument>
        <argument key="password">null</argument>
        <argument key="driverOptions" type="collection"/>
        <argument key="serverVersion">5.7</argument>
        <argument key="defaultTableOptions" type="collection">
          <argument key="charset">utf8mb4</argument>
          <argument key="collate">utf8mb4_unicode_ci</argument>
        </argument>
      </argument>
      <argument type="service" id="doctrine.dbal.default_connection.configuration"/>
      <argument type="service" id="doctrine.dbal.default_connection.event_manager"/>
      <argument type="collection"/>
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.dbal.lp_perl_connection.configuration" class="Doctrine\DBAL\Configuration" public="false">
      <call method="setSQLLogger">
        <argument type="service" id="doctrine.dbal.logger.chain.lp_perl"/>
      </call>
    </service>
    <service id="doctrine.dbal.logger.profiling.lp_perl" class="Doctrine\DBAL\Logging\DebugStack" public="false"/>
    <service id="doctrine.dbal.logger.chain.lp_perl" class="Doctrine\DBAL\Logging\LoggerChain" public="false">
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger"/>
      </call>
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger.profiling.lp_perl"/>
      </call>
    </service>
    <service id="doctrine.dbal.lp_perl_connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" public="false">
      <argument type="service" id="service_container"/>
      <call method="addEventSubscriber">
        <argument type="service" id="vich_uploader.listener.clean.product_images"/>
      </call>
      <call method="addEventSubscriber">
        <argument type="service" id="vich_uploader.listener.remove.product_images"/>
      </call>
      <call method="addEventSubscriber">
        <argument type="service" id="vich_uploader.listener.upload.product_images"/>
      </call>
      <call method="addEventListener">
        <argument type="collection">
          <argument>loadClassMetadata</argument>
        </argument>
        <argument type="service" id="doctrine.orm.lp_perl_listeners.attach_entity_listeners"/>
      </call>
    </service>
    <service id="doctrine.dbal.lp_perl_connection" class="Doctrine\DBAL\Connection" public="true">
      <argument type="collection">
        <argument key="url">%env(DATABASE_LP_PERL_URL)%</argument>
        <argument key="driver">pdo_mysql</argument>
        <argument key="charset">UTF8</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="user">root</argument>
        <argument key="password">null</argument>
        <argument key="driverOptions" type="collection"/>
        <argument key="serverVersion">5.7</argument>
        <argument key="defaultTableOptions" type="collection"/>
      </argument>
      <argument type="service" id="doctrine.dbal.lp_perl_connection.configuration"/>
      <argument type="service" id="doctrine.dbal.lp_perl_connection.event_manager"/>
      <argument type="collection"/>
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.orm.proxy_cache_warmer" class="Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type_guesser.doctrine" class="Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser">
      <tag name="form.type_guesser"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type.entity" class="Symfony\Bridge\Doctrine\Form\Type\EntityType">
      <tag name="form.type" alias="entity"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.configuration" class="Doctrine\ORM\Configuration" public="false" abstract="true"/>
    <service id="doctrine.orm.entity_manager.abstract" class="Doctrine\ORM\EntityManager" lazy="true" abstract="true">
      <factory class="Doctrine\ORM\EntityManager" method="create"/>
    </service>
    <service id="doctrine.orm.container_repository_factory" class="Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory" public="false">
      <argument type="service" id=".service_locator.cfEy9_N"/>
    </service>
    <service id="doctrine.orm.manager_configurator.abstract" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator" abstract="true">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.validator.unique" class="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator">
      <tag name="validator.constraint_validator" alias="doctrine.orm.validator.unique"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.validator_initializer" class="Symfony\Bridge\Doctrine\Validator\DoctrineInitializer">
      <tag name="validator.initializer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.security.user.provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider" public="false" abstract="true">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.listeners.resolve_target_entity" class="Doctrine\ORM\Tools\ResolveTargetEntityListener" public="false"/>
    <service id="doctrine.orm.naming_strategy.default" class="Doctrine\ORM\Mapping\DefaultNamingStrategy" public="false"/>
    <service id="doctrine.orm.naming_strategy.underscore" class="Doctrine\ORM\Mapping\UnderscoreNamingStrategy" public="false"/>
    <service id="doctrine.orm.quote_strategy.default" class="Doctrine\ORM\Mapping\DefaultQuoteStrategy" public="false"/>
    <service id="doctrine.orm.quote_strategy.ansi" class="Doctrine\ORM\Mapping\AnsiQuoteStrategy" public="false"/>
    <service id="doctrine.cache_clear_metadata_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-metadata"/>
      <call method="setName">
        <argument>doctrine:cache:clear-metadata</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_query_cache_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-query"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_result_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-result"/>
      <call method="setName">
        <argument>doctrine:cache:clear-result</argument>
      </call>
    </service>
    <service id="doctrine.cache_collection_region_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-collection-region"/>
      <call method="setName">
        <argument>doctrine:cache:clear-collection-region</argument>
      </call>
    </service>
    <service id="doctrine.mapping_convert_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:convert"/>
      <call method="setName">
        <argument>doctrine:mapping:convert</argument>
      </call>
    </service>
    <service id="doctrine.schema_create_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand">
      <tag name="console.command" command="doctrine:schema:create"/>
      <call method="setName">
        <argument>doctrine:schema:create</argument>
      </call>
    </service>
    <service id="doctrine.schema_drop_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand">
      <tag name="console.command" command="doctrine:schema:drop"/>
      <call method="setName">
        <argument>doctrine:schema:drop</argument>
      </call>
    </service>
    <service id="doctrine.ensure_production_settings_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand">
      <tag name="console.command" command="doctrine:ensure-production-settings"/>
      <call method="setName">
        <argument>doctrine:ensure-production-settings</argument>
      </call>
    </service>
    <service id="doctrine.clear_entity_region_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-entity-region"/>
      <call method="setName">
        <argument>doctrine:cache:clear-entity-region</argument>
      </call>
    </service>
    <service id="doctrine.database_import_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand">
      <tag name="console.command" command="doctrine:database:import"/>
      <call method="setName">
        <argument>doctrine:database:import</argument>
      </call>
    </service>
    <service id="doctrine.mapping_info_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:info"/>
      <call method="setName">
        <argument>doctrine:mapping:info</argument>
      </call>
    </service>
    <service id="doctrine.clear_query_region_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-query-region"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query-region</argument>
      </call>
    </service>
    <service id="doctrine.query_dql_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand">
      <tag name="console.command" command="doctrine:query:dql"/>
      <call method="setName">
        <argument>doctrine:query:dql</argument>
      </call>
    </service>
    <service id="doctrine.schema_update_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand">
      <tag name="console.command" command="doctrine:schema:update"/>
      <call method="setName">
        <argument>doctrine:schema:update</argument>
      </call>
    </service>
    <service id="doctrine.schema_validate_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand">
      <tag name="console.command" command="doctrine:schema:validate"/>
      <call method="setName">
        <argument>doctrine:schema:validate</argument>
      </call>
    </service>
    <service id="doctrine.mapping_import_command" class="Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:import"/>
      <argument type="service" id="doctrine"/>
      <argument>%kernel.bundles%</argument>
      <call method="setName">
        <argument>doctrine:mapping:import</argument>
      </call>
    </service>
    <service id="doctrine.orm.default_configuration" class="Doctrine\ORM\Configuration" public="false">
      <call method="setEntityNamespaces">
        <argument type="collection">
          <argument key="App">App\Entity</argument>
        </argument>
      </call>
      <call method="setMetadataCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.default_metadata_cache"/>
      </call>
      <call method="setQueryCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.default_query_cache"/>
      </call>
      <call method="setResultCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.default_result_cache"/>
      </call>
      <call method="setMetadataDriverImpl">
        <argument type="service" id="doctrine.orm.default_metadata_driver"/>
      </call>
      <call method="setProxyDir">
        <argument>/var/www/symfony/var/cache/dev/doctrine/orm/Proxies</argument>
      </call>
      <call method="setProxyNamespace">
        <argument>Proxies</argument>
      </call>
      <call method="setAutoGenerateProxyClasses">
        <argument>false</argument>
      </call>
      <call method="setClassMetadataFactoryName">
        <argument>Doctrine\ORM\Mapping\ClassMetadataFactory</argument>
      </call>
      <call method="setDefaultRepositoryClassName">
        <argument>Doctrine\ORM\EntityRepository</argument>
      </call>
      <call method="setNamingStrategy">
        <argument type="service" id="doctrine.orm.naming_strategy.default"/>
      </call>
      <call method="setQuoteStrategy">
        <argument type="service" id="doctrine.orm.quote_strategy.default"/>
      </call>
      <call method="setEntityListenerResolver">
        <argument type="service" id="doctrine.orm.default_entity_listener_resolver"/>
      </call>
      <call method="setRepositoryFactory">
        <argument type="service" id="doctrine.orm.container_repository_factory"/>
      </call>
    </service>
    <service id="doctrine.orm.default_annotation_metadata_driver" class="Doctrine\ORM\Mapping\Driver\AnnotationDriver" public="false">
      <argument type="service" id="annotations.cached_reader"/>
      <argument type="collection">
        <argument>/var/www/symfony/src/Entity</argument>
      </argument>
    </service>
    <service id="doctrine.orm.default_metadata_driver" class="Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain" public="false">
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_annotation_metadata_driver"/>
        <argument>App\Entity</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.default_metadata_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_default_75d4f1420d7a988ebf1bf046c412008428119cecddf6c98512519edbe343b103</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.default_result_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_default_75d4f1420d7a988ebf1bf046c412008428119cecddf6c98512519edbe343b103</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.default_query_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_default_75d4f1420d7a988ebf1bf046c412008428119cecddf6c98512519edbe343b103</argument>
      </call>
    </service>
    <service id="doctrine.orm.default_entity_listener_resolver" class="Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.orm.default_listeners.attach_entity_listeners" class="Doctrine\ORM\Tools\AttachEntityListenersListener">
      <tag name="doctrine.event_listener" event="loadClassMetadata" connection="default"/>
    </service>
    <service id="doctrine.orm.default_manager_configurator" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.default_entity_manager" class="Doctrine\ORM\EntityManager" public="true" lazy="true">
      <argument type="service" id="doctrine.dbal.default_connection"/>
      <argument type="service" id="doctrine.orm.default_configuration"/>
      <factory class="Doctrine\ORM\EntityManager" method="create"/>
      <configurator service="doctrine.orm.default_manager_configurator" method="configure"/>
    </service>
    <service id="doctrine.orm.default_entity_manager.property_info_extractor" class="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor">
      <tag name="property_info.list_extractor" priority="-1001"/>
      <tag name="property_info.type_extractor" priority="-999"/>
      <argument type="service" id="doctrine.orm.default_entity_manager.metadata_factory"/>
    </service>
    <service id="doctrine.orm.default_entity_manager.metadata_factory" class="Doctrine\Common\Persistence\Mapping\ClassMetadataFactory" public="false">
      <factory service="doctrine.orm.default_entity_manager" method="getMetadataFactory"/>
    </service>
    <service id="doctrine.orm.lp_perl_configuration" class="Doctrine\ORM\Configuration" public="false">
      <call method="setEntityNamespaces">
        <argument type="collection">
          <argument key="LpPerlEntity">App\LpPerlEntity</argument>
        </argument>
      </call>
      <call method="setMetadataCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.lp_perl_metadata_cache"/>
      </call>
      <call method="setQueryCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.lp_perl_query_cache"/>
      </call>
      <call method="setResultCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.lp_perl_result_cache"/>
      </call>
      <call method="setMetadataDriverImpl">
        <argument type="service" id="doctrine.orm.lp_perl_metadata_driver"/>
      </call>
      <call method="setProxyDir">
        <argument>/var/www/symfony/var/cache/dev/doctrine/orm/Proxies</argument>
      </call>
      <call method="setProxyNamespace">
        <argument>Proxies</argument>
      </call>
      <call method="setAutoGenerateProxyClasses">
        <argument>false</argument>
      </call>
      <call method="setClassMetadataFactoryName">
        <argument>Doctrine\ORM\Mapping\ClassMetadataFactory</argument>
      </call>
      <call method="setDefaultRepositoryClassName">
        <argument>Doctrine\ORM\EntityRepository</argument>
      </call>
      <call method="setNamingStrategy">
        <argument type="service" id="doctrine.orm.naming_strategy.default"/>
      </call>
      <call method="setQuoteStrategy">
        <argument type="service" id="doctrine.orm.quote_strategy.default"/>
      </call>
      <call method="setEntityListenerResolver">
        <argument type="service" id="doctrine.orm.lp_perl_entity_listener_resolver"/>
      </call>
      <call method="setRepositoryFactory">
        <argument type="service" id="doctrine.orm.container_repository_factory"/>
      </call>
    </service>
    <service id="doctrine.orm.lp_perl_annotation_metadata_driver" class="Doctrine\ORM\Mapping\Driver\AnnotationDriver" public="false">
      <argument type="service" id="annotations.cached_reader"/>
      <argument type="collection">
        <argument>/var/www/symfony/src/LpPerlEntity</argument>
      </argument>
    </service>
    <service id="doctrine.orm.lp_perl_metadata_driver" class="Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain" public="false">
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.lp_perl_annotation_metadata_driver"/>
        <argument>App\LpPerlEntity</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.lp_perl_metadata_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_lp_perl_75d4f1420d7a988ebf1bf046c412008428119cecddf6c98512519edbe343b103</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.lp_perl_result_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_lp_perl_75d4f1420d7a988ebf1bf046c412008428119cecddf6c98512519edbe343b103</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.lp_perl_query_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_lp_perl_75d4f1420d7a988ebf1bf046c412008428119cecddf6c98512519edbe343b103</argument>
      </call>
    </service>
    <service id="doctrine.orm.lp_perl_entity_listener_resolver" class="Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.orm.lp_perl_listeners.attach_entity_listeners" class="Doctrine\ORM\Tools\AttachEntityListenersListener">
      <tag name="doctrine.event_listener" event="loadClassMetadata" connection="lp_perl"/>
    </service>
    <service id="doctrine.orm.lp_perl_manager_configurator" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.lp_perl_entity_manager" class="Doctrine\ORM\EntityManager" public="true" lazy="true">
      <argument type="service" id="doctrine.dbal.lp_perl_connection"/>
      <argument type="service" id="doctrine.orm.lp_perl_configuration"/>
      <factory class="Doctrine\ORM\EntityManager" method="create"/>
      <configurator service="doctrine.orm.lp_perl_manager_configurator" method="configure"/>
    </service>
    <service id="doctrine.orm.lp_perl_entity_manager.property_info_extractor" class="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor">
      <tag name="property_info.list_extractor" priority="-1001"/>
      <tag name="property_info.type_extractor" priority="-999"/>
      <argument type="service" id="doctrine.orm.lp_perl_entity_manager.metadata_factory"/>
    </service>
    <service id="doctrine.orm.lp_perl_entity_manager.metadata_factory" class="Doctrine\Common\Persistence\Mapping\ClassMetadataFactory" public="false">
      <factory service="doctrine.orm.lp_perl_entity_manager" method="getMetadataFactory"/>
    </service>
    <service id="doctrine_migrations.diff_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.dump_schema_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsDumpSchemaDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.execute_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.generate_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.latest_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.migrate_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.rollup_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsRollupDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.status_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.up_to_date_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsUpToDateDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.version_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id=".1_ServiceLocator~X6Lol.S" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.authorization_checker" type="service" id="security.authorization_checker"/>
        <argument key="security.token_storage" type="service" id="security.token_storage"/>
      </argument>
    </service>
    <service id="security.authorization_checker" class="Symfony\Component\Security\Core\Authorization\AuthorizationChecker" public="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument>false</argument>
    </service>
    <service id="security.token_storage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage" public="true">
      <tag name="kernel.reset" method="setToken"/>
    </service>
    <service id="security.helper" class="Symfony\Component\Security\Core\Security" public="false">
      <argument type="service" id=".1_ServiceLocator~X6Lol.S"/>
    </service>
    <service id="security.authentication.manager" class="Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager" public="false">
      <argument type="iterator">
        <argument type="service" id="security.authentication.provider.guard.main"/>
        <argument type="service" id="security.authentication.provider.anonymous.main"/>
      </argument>
      <argument>true</argument>
      <call method="setEventDispatcher">
        <argument type="service" id="debug.event_dispatcher"/>
      </call>
    </service>
    <service id="security.authentication.trust_resolver" class="Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver" public="false">
      <argument>Symfony\Component\Security\Core\Authentication\Token\AnonymousToken</argument>
      <argument>Symfony\Component\Security\Core\Authentication\Token\RememberMeToken</argument>
    </service>
    <service id="security.authentication.session_strategy" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy" public="false">
      <argument>migrate</argument>
    </service>
    <service id="security.authentication.session_strategy_noop" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy" public="false">
      <argument>none</argument>
    </service>
    <service id="security.encoder_factory.generic" class="Symfony\Component\Security\Core\Encoder\EncoderFactory" public="false">
      <argument type="collection">
        <argument key="App\Entity\User" type="collection">
          <argument key="class">Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder</argument>
          <argument key="arguments" type="collection">
            <argument>12</argument>
          </argument>
        </argument>
        <argument key="App\Entity\Users" type="collection">
          <argument key="class">Symfony\Component\Security\Core\Encoder\Argon2iPasswordEncoder</argument>
          <argument key="arguments" type="collection">
            <argument>null</argument>
            <argument>null</argument>
            <argument>null</argument>
          </argument>
        </argument>
      </argument>
    </service>
    <service id="security.user_password_encoder.generic" class="Symfony\Component\Security\Core\Encoder\UserPasswordEncoder" public="false">
      <argument type="service" id="security.encoder_factory.generic"/>
    </service>
    <service id="security.user_checker" class="Symfony\Component\Security\Core\User\UserChecker" public="false"/>
    <service id="security.expression_language" class="Symfony\Component\Security\Core\Authorization\ExpressionLanguage" public="false">
      <argument type="service" id="cache.security_expression_language"/>
    </service>
    <service id="security.authentication_utils" class="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" public="true">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.role_hierarchy" class="Symfony\Component\Security\Core\Role\RoleHierarchy" public="false">
      <argument type="collection"/>
    </service>
    <service id="security.access.simple_role_voter" class="Symfony\Component\Security\Core\Authorization\Voter\RoleVoter" public="false">
      <tag name="security.voter" priority="245"/>
    </service>
    <service id="security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter" public="false">
      <tag name="security.voter" priority="250"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.access.expression_voter" class="Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter" public="false">
      <tag name="security.voter" priority="245"/>
      <argument type="service" id="security.expression_language"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
    </service>
    <service id="security.firewall.map" class="Symfony\Bundle\SecurityBundle\Security\FirewallMap" public="false">
      <argument type="service" id=".service_locator.ko2dQVn"/>
      <argument type="iterator">
        <argument key="security.firewall.map.context.dev" type="service" id=".security.request_matcher.zfHj2lW"/>
        <argument key="security.firewall.map.context.main">null</argument>
      </argument>
    </service>
    <service id="security.firewall.context" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" public="false" abstract="true">
      <argument type="collection"/>
      <argument type="service" id="security.exception_listener"/>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.firewall.config" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument></argument>
    </service>
    <service id="security.logout_url_generator" class="Symfony\Component\Security\Http\Logout\LogoutUrlGenerator" public="false">
      <argument type="service" id="request_stack" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <call method="registerListener">
        <argument>main</argument>
        <argument>app_logout</argument>
        <argument>logout</argument>
        <argument>_csrf_token</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.user.provider.missing" class="Symfony\Component\Security\Core\User\MissingUserProvider" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="security.user.provider.in_memory" class="Symfony\Component\Security\Core\User\InMemoryUserProvider" public="false" abstract="true"/>
    <service id="security.user.provider.in_memory.user" class="Symfony\Component\Security\Core\User\User" public="false" abstract="true">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.1.</deprecated>
    </service>
    <service id="security.user.provider.ldap" class="Symfony\Component\Security\Core\User\LdapUserProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.user.provider.chain" class="Symfony\Component\Security\Core\User\ChainUserProvider" public="false" abstract="true"/>
    <service id="security.http_utils" class="Symfony\Component\Security\Http\HttpUtils" public="false">
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument>{^https?://%s$}i</argument>
    </service>
    <service id="security.validator.user_password" class="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator" public="false">
      <tag name="validator.constraint_validator" alias="security.validator.user_password"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.encoder_factory.generic"/>
    </service>
    <service id="cache.security_expression_language" class="Symfony\Component\Cache\Adapter\TraceableAdapter" public="false">
      <tag name="cache.pool"/>
      <argument type="service" id="cache.security_expression_language.recorder_inner"/>
    </service>
    <service id="security.authentication.listener.anonymous" class="Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="security.authentication.manager"/>
    </service>
    <service id="security.authentication.provider.anonymous" class="Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider" public="false">
      <argument></argument>
    </service>
    <service id="security.authentication.retry_entry_point" class="Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint" public="false">
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="security.authentication.basic_entry_point" class="Symfony\Component\Security\Http\EntryPoint\BasicAuthenticationEntryPoint" public="false"/>
    <service id="security.channel_listener" class="Symfony\Component\Security\Http\Firewall\ChannelListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.access_map"/>
      <argument type="service" id="security.authentication.retry_entry_point"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.access_map" class="Symfony\Component\Security\Http\AccessMap" public="false">
      <call method="add">
        <argument type="service" id=".security.request_matcher.Yk6K2AJ"/>
        <argument type="collection">
          <argument>ROLE_ADMIN</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.N_xzDpN"/>
        <argument type="collection">
          <argument>ROLE_USER</argument>
        </argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.context_listener" class="Symfony\Component\Security\Http\Firewall\ContextListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.logout_listener" class="Symfony\Component\Security\Http\Firewall\LogoutListener" public="false" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="security.logout.success_handler"/>
      <argument></argument>
      <call method="addHandler">
        <argument type="service" id="security.logout.handler.csrf_token_clearing"/>
      </call>
    </service>
    <service id="security.logout.handler.session" class="Symfony\Component\Security\Http\Logout\SessionLogoutHandler" public="false"/>
    <service id="security.logout.handler.cookie_clearing" class="Symfony\Component\Security\Http\Logout\CookieClearingLogoutHandler" public="false" abstract="true"/>
    <service id="security.logout.success_handler" class="Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler" public="false" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument>/</argument>
    </service>
    <service id="security.authentication.form_entry_point" class="Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint" public="false" abstract="true">
      <argument type="service" id="http_kernel"/>
    </service>
    <service id="security.authentication.listener.abstract" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.custom_success_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler" public="false" abstract="true">
      <argument></argument>
      <argument type="collection"/>
      <argument></argument>
    </service>
    <service id="security.authentication.success_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler" public="false" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
    </service>
    <service id="security.authentication.custom_failure_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler" public="false" abstract="true">
      <argument></argument>
      <argument type="collection"/>
    </service>
    <service id="security.authentication.failure_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.form" class="Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener" public="false" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.simple_form" class="Symfony\Component\Security\Http\Firewall\SimpleFormAuthenticationListener" public="false" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.simple_success_failure_handler" class="Symfony\Component\Security\Http\Authentication\SimpleAuthenticationHandler" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.simple_preauth" class="Symfony\Component\Security\Http\Firewall\SimplePreAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.x509" class="Symfony\Component\Security\Http\Firewall\X509AuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.json" class="Symfony\Component\Security\Http\Firewall\UsernamePasswordJsonAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.remote_user" class="Symfony\Component\Security\Http\Firewall\RemoteUserAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.basic" class="Symfony\Component\Security\Http\Firewall\BasicAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.provider.dao" class="Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="security.encoder_factory.generic"/>
      <argument>true</argument>
    </service>
    <service id="security.authentication.provider.ldap_bind" class="Symfony\Component\Security\Core\Authentication\Provider\LdapBindAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument>true</argument>
    </service>
    <service id="security.authentication.provider.simple" class="Symfony\Component\Security\Core\Authentication\Provider\SimpleAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument>null</argument>
    </service>
    <service id="security.authentication.provider.pre_authenticated" class="Symfony\Component\Security\Core\Authentication\Provider\PreAuthenticatedAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.exception_listener" class="Symfony\Component\Security\Http\Firewall\ExceptionListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.entry_point" on-invalid="null"/>
      <argument>null</argument>
      <argument type="service" id="security.access.denied_handler" on-invalid="null"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.authentication.switchuser_listener" class="Symfony\Component\Security\Http\Firewall\SwitchUserListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>_switch_user</argument>
      <argument>ROLE_ALLOWED_TO_SWITCH</argument>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.access_listener" class="Symfony\Component\Security\Http\Firewall\AccessListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.access_map"/>
      <argument type="service" id="security.authentication.manager"/>
    </service>
    <service id="security.authentication.listener.rememberme" class="Symfony\Component\Security\Http\Firewall\RememberMeListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.rememberme"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument></argument>
      <argument type="service" id="security.authentication.session_strategy"/>
    </service>
    <service id="security.authentication.provider.rememberme" class="Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="security.rememberme.token.provider.in_memory" class="Symfony\Component\Security\Core\Authentication\RememberMe\InMemoryTokenProvider" public="false"/>
    <service id="security.authentication.rememberme.services.abstract" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection"/>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.rememberme.services.persistent" class="Symfony\Component\Security\Http\RememberMe\PersistentTokenBasedRememberMeServices" public="false" abstract="true">
      <argument type="collection"/>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.rememberme.services.simplehash" class="Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices" public="false" abstract="true">
      <argument type="collection"/>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.rememberme.response_listener" class="Symfony\Component\Security\Http\RememberMe\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="templating.helper.logout_url" class="Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper" public="false">
      <tag name="templating.helper" alias="logout_url"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="templating.helper.security" class="Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper" public="false">
      <tag name="templating.helper" alias="security"/>
      <argument type="service" id="security.authorization_checker" on-invalid="ignore"/>
    </service>
    <service id="twig.extension.logout_url" class="Symfony\Bridge\Twig\Extension\LogoutUrlExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="twig.extension.security" class="Symfony\Bridge\Twig\Extension\SecurityExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="security.authorization_checker" on-invalid="ignore"/>
    </service>
    <service id="data_collector.security" class="Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector" public="false">
      <tag name="data_collector" template="@Security/Collector/security.html.twig" id="security" priority="270"/>
      <argument type="service" id="security.token_storage" on-invalid="ignore"/>
      <argument type="service" id="security.role_hierarchy"/>
      <argument type="service" id="security.logout_url_generator"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.security.firewall" on-invalid="null"/>
    </service>
    <service id="security.authentication.guard_handler" class="Symfony\Component\Security\Guard\GuardAuthenticatorHandler" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument type="collection"/>
      <call method="setSessionAuthenticationStrategy">
        <argument type="service" id="security.authentication.session_strategy"/>
      </call>
    </service>
    <service id="security.authentication.provider.guard" class="Symfony\Component\Security\Guard\Provider\GuardAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.authentication.listener.guard" class="Symfony\Component\Security\Guard\Firewall\GuardAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.authentication.guard_handler"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="debug.security.access.decision_manager" class="Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager" public="false">
      <argument type="service" id="debug.security.access.decision_manager.inner"/>
    </service>
    <service id="debug.security.firewall" class="Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="security.user.provider.concrete.app_user_provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider" public="false">
      <argument type="service" id="doctrine"/>
      <argument>App\Entity\Users</argument>
      <argument>email</argument>
      <argument>null</argument>
    </service>
    <service id="security.firewall.map.config.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" public="false">
      <argument>dev</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.zfHj2lW</argument>
      <argument>false</argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument></argument>
    </service>
    <service id=".security.request_matcher.zfHj2lW" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/(_(profiler|wdt)|css|images|js)/</argument>
    </service>
    <service id="security.firewall.map.context.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" public="false">
      <argument type="iterator"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.dev"/>
    </service>
    <service id="security.firewall.map.config.main" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" public="false">
      <argument>main</argument>
      <argument>security.user_checker</argument>
      <argument>null</argument>
      <argument>true</argument>
      <argument>false</argument>
      <argument>security.user.provider.concrete.app_user_provider</argument>
      <argument>main</argument>
      <argument>App\Security\LoginFormAuthenticator</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument>guard</argument>
        <argument>anonymous</argument>
      </argument>
      <argument>null</argument>
    </service>
    <service id="security.context_listener.0" class="Symfony\Component\Security\Http\Firewall\ContextListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <argument>main</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.logout_listener.main" class="Symfony\Component\Security\Http\Firewall\LogoutListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="security.logout.success_handler.main"/>
      <argument type="collection">
        <argument key="csrf_parameter">_csrf_token</argument>
        <argument key="csrf_token_id">logout</argument>
        <argument key="logout_path">app_logout</argument>
      </argument>
      <call method="addHandler">
        <argument type="service" id="security.logout.handler.csrf_token_clearing"/>
      </call>
      <call method="addHandler">
        <argument type="service" id="security.logout.handler.session"/>
      </call>
    </service>
    <service id="security.logout.success_handler.main" class="Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler" public="false">
      <argument type="service" id="security.http_utils"/>
      <argument>/</argument>
    </service>
    <service id="security.authentication.provider.guard.main" class="Symfony\Component\Security\Guard\Provider\GuardAuthenticationProvider" public="false">
      <argument type="iterator">
        <argument type="service" id="App\Security\LoginFormAuthenticator"/>
      </argument>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      <argument>main</argument>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.authentication.listener.guard.main" class="Symfony\Component\Security\Guard\Firewall\GuardAuthenticationListener" public="false">
      <tag name="security.remember_me_aware" id="main" provider="security.user.provider.concrete.app_user_provider"/>
      <argument type="service" id="security.authentication.guard_handler"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument>main</argument>
      <argument type="iterator">
        <argument type="service" id="App\Security\LoginFormAuthenticator"/>
      </argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.anonymous.main" class="Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument>%container.build_hash%</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="security.authentication.manager"/>
    </service>
    <service id="security.authentication.provider.anonymous.main" class="Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider" public="false">
      <argument>%container.build_hash%</argument>
    </service>
    <service id="security.exception_listener.main" class="Symfony\Component\Security\Http\Firewall\ExceptionListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>main</argument>
      <argument type="service" id="App\Security\LoginFormAuthenticator"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.firewall.map.context.main" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" public="false">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="security.context_listener.0"/>
        <argument type="service" id="security.authentication.listener.guard.main"/>
        <argument type="service" id="security.authentication.listener.anonymous.main"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.main"/>
      <argument type="service" id="security.logout_listener.main"/>
      <argument type="service" id="security.firewall.map.config.main"/>
    </service>
    <service id=".service_locator.ko2dQVn" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.firewall.map.context.dev" type="service" id="security.firewall.map.context.dev"/>
        <argument key="security.firewall.map.context.main" type="service" id="security.firewall.map.context.main"/>
      </argument>
    </service>
    <service id=".security.request_matcher.Yk6K2AJ" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/admin</argument>
    </service>
    <service id=".security.request_matcher.N_xzDpN" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/profile</argument>
    </service>
    <service id="security.command.user_password_encoder" class="Symfony\Bundle\SecurityBundle\Command\UserPasswordEncoderCommand" public="false">
      <tag name="console.command" command="security:encode-password"/>
      <argument type="service" id="security.encoder_factory.generic"/>
      <argument type="collection">
        <argument>App\Entity\User</argument>
        <argument>App\Entity\Users</argument>
      </argument>
      <call method="setName">
        <argument>security:encode-password</argument>
      </call>
    </service>
    <service id=".4_Swift_Transport_Esmtp_Auth_NTLMAuthenticator~AxU.j5G" class="Swift_Transport_Esmtp_Auth_NTLMAuthenticator" public="false"/>
    <service id=".3_Swift_Transport_Esmtp_Auth_PlainAuthenticator~AxU.j5G" class="Swift_Transport_Esmtp_Auth_PlainAuthenticator" public="false"/>
    <service id=".2_Swift_Transport_Esmtp_Auth_LoginAuthenticator~AxU.j5G" class="Swift_Transport_Esmtp_Auth_LoginAuthenticator" public="false"/>
    <service id=".1_Swift_Transport_Esmtp_Auth_CramMd5Authenticator~AxU.j5G" class="Swift_Transport_Esmtp_Auth_CramMd5Authenticator" public="false"/>
    <service id="swiftmailer.mailer.abstract" class="Swift_Mailer" public="true" abstract="true">
      <argument type="service" id="swiftmailer.mailer.default.transport.spool"/>
    </service>
    <service id="swiftmailer.transport.smtp.configurator.abstract" class="Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator" public="false" abstract="true"/>
    <service id="swiftmailer.transport.sendmail.abstract" class="Swift_Transport_SendmailTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.null.abstract" class="Swift_Transport_NullTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.failover" class="Swift_Transport_FailoverTransport" public="false"/>
    <service id="swiftmailer.transport.buffer.abstract" class="Swift_Transport_StreamBuffer" public="false" abstract="true">
      <argument type="service" id="swiftmailer.transport.replacementfactory"/>
    </service>
    <service id="swiftmailer.transport.authhandler.abstract" class="Swift_Transport_Esmtp_AuthHandler" public="false" abstract="true">
      <argument type="collection">
        <argument type="service" id=".1_Swift_Transport_Esmtp_Auth_CramMd5Authenticator~AxU.j5G"/>
        <argument type="service" id=".2_Swift_Transport_Esmtp_Auth_LoginAuthenticator~AxU.j5G"/>
        <argument type="service" id=".3_Swift_Transport_Esmtp_Auth_PlainAuthenticator~AxU.j5G"/>
        <argument type="service" id=".4_Swift_Transport_Esmtp_Auth_NTLMAuthenticator~AxU.j5G"/>
      </argument>
    </service>
    <service id="swiftmailer.transport.eventdispatcher.abstract" class="Swift_Events_SimpleEventDispatcher" public="false" abstract="true"/>
    <service id="swiftmailer.transport.replacementfactory" class="Swift_StreamFilters_StringReplacementFilterFactory" public="false"/>
    <service id="swiftmailer.plugin.redirecting.abstract" class="Swift_Plugins_RedirectingPlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.antiflood.abstract" class="Swift_Plugins_AntiFloodPlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.impersonate.abstract" class="Swift_Plugins_ImpersonatePlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.messagelogger.abstract" class="Swift_Plugins_MessageLogger" abstract="true"/>
    <service id="swiftmailer.transport.smtp.abstract" class="Swift_Transport_EsmtpTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.spool.abstract" class="Swift_Transport_SpoolTransport" public="false" abstract="true"/>
    <service id="swiftmailer.spool.file.abstract" class="Swift_FileSpool" public="false" abstract="true">
      <argument>/var/www/symfony/src/../data/swiftmailer/spool</argument>
    </service>
    <service id="swiftmailer.spool.memory.abstract" class="Swift_MemorySpool" public="false" abstract="true"/>
    <service id="swiftmailer.email_sender.listener" class="Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="swiftmailer.data_collector" class="Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector" public="false">
      <tag name="data_collector" template="@Swiftmailer/Collector/swiftmailer.html.twig" id="swiftmailer" priority="245"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="swiftmailer.command.debug" class="Symfony\Bundle\SwiftmailerBundle\Command\DebugCommand">
      <tag name="console.command" command="debug:swiftmailer"/>
      <call method="setName">
        <argument>debug:swiftmailer</argument>
      </call>
    </service>
    <service id="swiftmailer.command.new_email" class="Symfony\Bundle\SwiftmailerBundle\Command\NewEmailCommand">
      <tag name="console.command" command="swiftmailer:email:send"/>
      <call method="setName">
        <argument>swiftmailer:email:send</argument>
      </call>
    </service>
    <service id="swiftmailer.command.send_email" class="Symfony\Bundle\SwiftmailerBundle\Command\SendEmailCommand">
      <tag name="console.command" command="swiftmailer:spool:send"/>
      <call method="setName">
        <argument>swiftmailer:spool:send</argument>
      </call>
    </service>
    <service id="swiftmailer.mailer.default.transport.eventdispatcher" class="Swift_Events_SimpleEventDispatcher" public="false"/>
    <service id="swiftmailer.mailer.default.transport.dynamic" class="Swift_Transport">
      <argument type="collection">
        <argument key="transport">smtp</argument>
        <argument key="url">%env(MAILER_URL)%</argument>
        <argument key="username">null</argument>
        <argument key="password">null</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="timeout">30</argument>
        <argument key="source_ip">null</argument>
        <argument key="local_domain">null</argument>
        <argument key="encryption">null</argument>
        <argument key="auth_mode">null</argument>
        <argument key="command">/usr/sbin/sendmail -bs</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="null"/>
      <argument type="service" id="swiftmailer.mailer.default.transport.eventdispatcher"/>
      <factory class="Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SwiftmailerTransportFactory" method="createTransport"/>
    </service>
    <service id="swiftmailer.mailer.default" class="Swift_Mailer" public="true">
      <argument type="service" id="swiftmailer.mailer.default.transport.spool"/>
    </service>
    <service id="swiftmailer.mailer.default.spool.memory" class="Swift_MemorySpool" public="false"/>
    <service id="swiftmailer.mailer.default.transport.spool" class="Swift_Transport_SpoolTransport" public="false">
      <argument type="service" id="swiftmailer.mailer.default.transport.eventdispatcher"/>
      <argument type="service" id="swiftmailer.mailer.default.spool.memory"/>
      <call method="registerPlugin">
        <argument type="service" id="swiftmailer.mailer.default.plugin.messagelogger"/>
      </call>
    </service>
    <service id="swiftmailer.mailer.default.plugin.messagelogger" class="Swift_Plugins_MessageLogger" public="true">
      <tag name="swiftmailer.default.plugin"/>
    </service>
    <service id=".2_HtmlDumper~muixFlf" class="Symfony\Component\VarDumper\Dumper\HtmlDumper" public="false">
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>1</argument>
      <call method="setDisplayOptions">
        <argument type="collection">
          <argument key="maxStringLength">4096</argument>
          <argument key="fileLinkFormat" type="service" id="debug.file_link_formatter"/>
        </argument>
      </call>
    </service>
    <service id=".1_NonceGenerator~muixFlf" class="Symfony\Bundle\WebProfilerBundle\Csp\NonceGenerator" public="false"/>
    <service id="web_profiler.controller.profiler" class="Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController" public="true">
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="profiler" on-invalid="null"/>
      <argument type="service" id="twig"/>
      <argument>%data_collector.templates%</argument>
      <argument type="service" id="web_profiler.csp.handler"/>
      <argument>/var/www/symfony</argument>
    </service>
    <service id="web_profiler.controller.router" class="Symfony\Bundle\WebProfilerBundle\Controller\RouterController" public="true">
      <argument type="service" id="profiler" on-invalid="null"/>
      <argument type="service" id="twig"/>
      <argument type="service" id="router.default" on-invalid="null"/>
    </service>
    <service id="web_profiler.controller.exception" class="Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController" public="true">
      <argument type="service" id="profiler" on-invalid="null"/>
      <argument type="service" id="twig"/>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
    </service>
    <service id="web_profiler.csp.handler" class="Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler" public="false">
      <argument type="service" id=".1_NonceGenerator~muixFlf"/>
    </service>
    <service id="twig.extension.webprofiler" class="Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id=".2_HtmlDumper~muixFlf"/>
    </service>
    <service id="debug.file_link_formatter.url_format" class="string" public="false">
      <argument type="service" id="router.default"/>
      <argument>_profiler_open_file</argument>
      <argument>?file=%%f&amp;line=%%l#line%%l</argument>
      <factory class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" method="generateUrlFormat"/>
    </service>
    <service id="web_profiler.debug_toolbar" class="Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="twig"/>
      <argument>false</argument>
      <argument>2</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>^/((index|app(_[\w]+)?)\.php/)?_wdt</argument>
      <argument type="service" id="web_profiler.csp.handler"/>
    </service>
    <service id="twig" class="Twig\Environment" public="true">
      <argument type="service" id="twig.loader.native_filesystem"/>
      <argument type="collection">
        <argument key="default_path">/var/www/symfony/templates</argument>
        <argument key="debug">true</argument>
        <argument key="strict_variables">true</argument>
        <argument key="exception_controller">twig.controller.exception::showAction</argument>
        <argument key="form_themes" type="collection">
          <argument>form_div_layout.html.twig</argument>
        </argument>
        <argument key="autoescape">name</argument>
        <argument key="cache">/var/www/symfony/var/cache/dev/twig</argument>
        <argument key="charset">UTF-8</argument>
        <argument key="paths" type="collection"/>
        <argument key="date" type="collection">
          <argument key="format">F j, Y H:i</argument>
          <argument key="interval_format">%d days</argument>
          <argument key="timezone">null</argument>
        </argument>
        <argument key="number_format" type="collection">
          <argument key="decimals">0</argument>
          <argument key="decimal_point">.</argument>
          <argument key="thousands_separator">,</argument>
        </argument>
      </argument>
      <call method="addExtension">
        <argument type="service" id="twig.extension.security_csrf"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.logout_url"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.security"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.profiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.trans"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.assets"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.code"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.routing"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.yaml"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.debug.stopwatch"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.expression"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpkernel"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpfoundation"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.weblink"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.form"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.dump"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="doctrine.twig.doctrine_extension"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.webprofiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="easyadmin.twig.extension"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="vich_uploader.twig.extension.uploader"/>
      </call>
      <call method="addGlobal">
        <argument>app</argument>
        <argument type="service" id="twig.app_variable"/>
      </call>
      <call method="addRuntimeLoader">
        <argument type="service" id="twig.runtime_loader"/>
      </call>
      <call method="addGlobal">
        <argument>basket</argument>
        <argument type="service" id="App\Service\Twig\Basket"/>
      </call>
      <call method="addGlobal">
        <argument>tags</argument>
        <argument type="service" id="App\Service\Twig\Tags"/>
      </call>
      <configurator service="twig.configurator.environment" method="configure"/>
    </service>
    <service id="twig.app_variable" class="Symfony\Bridge\Twig\AppVariable" public="false">
      <call method="setEnvironment">
        <argument>dev</argument>
      </call>
      <call method="setDebug">
        <argument>true</argument>
      </call>
      <call method="setTokenStorage">
        <argument type="service" id="security.token_storage" on-invalid="ignore"/>
      </call>
      <call method="setRequestStack">
        <argument type="service" id="request_stack" on-invalid="ignore"/>
      </call>
    </service>
    <service id="twig.cache_warmer" class="Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <tag name="container.service_subscriber" id="twig"/>
      <argument type="service" id=".service_locator.UEpceA5.twig.cache_warmer"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="/var/www/symfony/vendor/symfony/twig-bridge/Resources/views/Form">null</argument>
      </argument>
    </service>
    <service id="twig.template_iterator" class="Symfony\Bundle\TwigBundle\TemplateIterator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/var/www/symfony/src</argument>
      <argument type="collection">
        <argument key="/var/www/symfony/vendor/symfony/twig-bridge/Resources/views/Form">null</argument>
      </argument>
      <argument>/var/www/symfony/templates</argument>
    </service>
    <service id="twig.template_cache_warmer" class="Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <tag name="container.service_subscriber" id="twig"/>
      <argument type="service" id=".service_locator.UEpceA5.twig.template_cache_warmer"/>
      <argument type="service" id="twig.template_iterator"/>
    </service>
    <service id="twig.loader.native_filesystem" class="Twig\Loader\FilesystemLoader" public="false">
      <tag name="twig.loader"/>
      <argument type="collection"/>
      <argument>/var/www/symfony</argument>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/framework-bundle/Resources/views</argument>
        <argument>Framework</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/framework-bundle/Resources/views</argument>
        <argument>!Framework</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/doctrine/doctrine-bundle/Resources/views</argument>
        <argument>Doctrine</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/doctrine/doctrine-bundle/Resources/views</argument>
        <argument>!Doctrine</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/security-bundle/Resources/views</argument>
        <argument>Security</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/security-bundle/Resources/views</argument>
        <argument>!Security</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/swiftmailer-bundle/Resources/views</argument>
        <argument>Swiftmailer</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/swiftmailer-bundle/Resources/views</argument>
        <argument>!Swiftmailer</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/web-profiler-bundle/Resources/views</argument>
        <argument>WebProfiler</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/web-profiler-bundle/Resources/views</argument>
        <argument>!WebProfiler</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/twig-bundle/Resources/views</argument>
        <argument>Twig</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/twig-bundle/Resources/views</argument>
        <argument>!Twig</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/debug-bundle/Resources/views</argument>
        <argument>Debug</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/debug-bundle/Resources/views</argument>
        <argument>!Debug</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/src/Lp/CatalogBundle/Resources/views</argument>
        <argument>LpCatalog</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/src/Lp/CatalogBundle/Resources/views</argument>
        <argument>!LpCatalog</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/views</argument>
        <argument>EasyAdmin</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/easycorp/easyadmin-bundle/src/Resources/views</argument>
        <argument>!EasyAdmin</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/views</argument>
        <argument>VichUploader</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/vich/uploader-bundle/Resources/views</argument>
        <argument>!VichUploader</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/overblog/graphiql-bundle/Resources/views</argument>
        <argument>OverblogGraphiQL</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/overblog/graphiql-bundle/Resources/views</argument>
        <argument>!OverblogGraphiQL</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/src/Resources/views</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/templates</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/symfony/vendor/symfony/twig-bridge/Resources/views/Form</argument>
      </call>
    </service>
    <service id="twig.loader.chain" class="Twig\Loader\ChainLoader" public="false"/>
    <service id="twig.extension.profiler" class="Symfony\Bridge\Twig\Extension\ProfilerExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="debug.stopwatch" on-invalid="null"/>
    </service>
    <service id="twig.profile" class="Twig\Profiler\Profile" public="false"/>
    <service id="data_collector.twig" class="Symfony\Bridge\Twig\DataCollector\TwigDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/twig.html.twig" id="twig" priority="257"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.extension.trans" class="Symfony\Bridge\Twig\Extension\TranslationExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="translator.data_collector" on-invalid="null"/>
    </service>
    <service id="twig.extension.assets" class="Symfony\Bridge\Twig\Extension\AssetExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="assets.packages"/>
    </service>
    <service id="twig.extension.code" class="Symfony\Bridge\Twig\Extension\CodeExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>/var/www/symfony/src</argument>
      <argument>UTF-8</argument>
    </service>
    <service id="twig.extension.routing" class="Symfony\Bridge\Twig\Extension\RoutingExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="twig.extension.yaml" class="Symfony\Bridge\Twig\Extension\YamlExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.debug.stopwatch" class="Symfony\Bridge\Twig\Extension\StopwatchExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
      <argument>true</argument>
    </service>
    <service id="twig.extension.expression" class="Symfony\Bridge\Twig\Extension\ExpressionExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.runtime.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="fragment.handler"/>
    </service>
    <service id="twig.extension.httpfoundation" class="Symfony\Bridge\Twig\Extension\HttpFoundationExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
    </service>
    <service id="twig.extension.debug" class="Twig\Extension\DebugExtension" public="false"/>
    <service id="twig.extension.weblink" class="Symfony\Bridge\Twig\Extension\WebLinkExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="twig.translation.extractor" class="Symfony\Bridge\Twig\Translation\TwigExtractor" public="false">
      <tag name="translation.extractor" alias="twig"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.exception_listener" class="Symfony\Component\HttpKernel\EventListener\ExceptionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <argument>twig.controller.exception::showAction</argument>
      <argument type="service" id="monolog.logger.request" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id="twig.controller.exception" class="Symfony\Bundle\TwigBundle\Controller\ExceptionController" public="true">
      <argument type="service" id="twig"/>
      <argument>true</argument>
    </service>
    <service id="twig.controller.preview_error" class="Symfony\Bundle\TwigBundle\Controller\PreviewErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>twig.controller.exception::showAction</argument>
    </service>
    <service id="twig.configurator.environment" class="Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator" public="false">
      <argument>F j, Y H:i</argument>
      <argument>%d days</argument>
      <argument>null</argument>
      <argument>0</argument>
      <argument>.</argument>
      <argument>,</argument>
    </service>
    <service id="twig.runtime_loader" class="Twig\RuntimeLoader\ContainerRuntimeLoader" public="false">
      <argument type="service" id=".service_locator.uxa.tru"/>
    </service>
    <service id="twig.extension.form" class="Symfony\Bridge\Twig\Extension\FormExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>twig.form.renderer</argument>
      </argument>
    </service>
    <service id="twig.form.engine" class="Symfony\Bridge\Twig\Form\TwigRendererEngine" public="false">
      <argument>%twig.form.resources%</argument>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.form.renderer" class="Symfony\Component\Form\FormRenderer" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="twig.form.engine"/>
      <argument type="service" id="security.csrf.token_manager" on-invalid="null"/>
    </service>
    <service id="twig.command.debug" class="Symfony\Bridge\Twig\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:twig"/>
      <argument type="service" id="twig"/>
      <argument>/var/www/symfony</argument>
      <call method="setName">
        <argument>debug:twig</argument>
      </call>
    </service>
    <service id="twig.command.lint" class="Symfony\Bundle\TwigBundle\Command\LintCommand" public="false">
      <tag name="console.command" command="lint:twig"/>
      <argument type="service" id="twig"/>
      <call method="setName">
        <argument>lint:twig</argument>
      </call>
    </service>
    <service id="monolog.logger" class="Symfony\Bridge\Monolog\Logger" public="false">
      <argument>app</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="useMicrosecondTimestamps">
        <argument>true</argument>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger_prototype" class="Symfony\Bridge\Monolog\Logger" abstract="true">
      <argument></argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
    </service>
    <service id="monolog.activation_strategy.not_found" class="Symfony\Bridge\Monolog\Handler\FingersCrossed\NotFoundActivationStrategy" abstract="true"/>
    <service id="monolog.handler.fingers_crossed.error_level_activation_strategy" class="Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy" abstract="true"/>
    <service id="monolog.formatter.chrome_php" class="Monolog\Formatter\ChromePHPFormatter" public="false"/>
    <service id="monolog.formatter.gelf_message" class="Monolog\Formatter\GelfMessageFormatter" public="false"/>
    <service id="monolog.formatter.html" class="Monolog\Formatter\HtmlFormatter" public="false"/>
    <service id="monolog.formatter.json" class="Monolog\Formatter\JsonFormatter" public="false"/>
    <service id="monolog.formatter.line" class="Monolog\Formatter\LineFormatter" public="false"/>
    <service id="monolog.formatter.loggly" class="Monolog\Formatter\LogglyFormatter" public="false"/>
    <service id="monolog.formatter.normalizer" class="Monolog\Formatter\NormalizerFormatter" public="false"/>
    <service id="monolog.formatter.scalar" class="Monolog\Formatter\ScalarFormatter" public="false"/>
    <service id="monolog.formatter.wildfire" class="Monolog\Formatter\WildfireFormatter" public="false"/>
    <service id="monolog.formatter.logstash" class="Monolog\Formatter\LogstashFormatter" public="false">
      <argument>app</argument>
    </service>
    <service id="monolog.processor.psr_log_message" class="Monolog\Processor\PsrLogMessageProcessor" public="false"/>
    <service id="monolog.handler.main" class="Monolog\Handler\StreamHandler">
      <argument>/var/www/symfony/var/log/dev.log</argument>
      <argument>100</argument>
      <argument>true</argument>
      <argument>null</argument>
      <call method="pushProcessor">
        <argument type="service" id="monolog.processor.psr_log_message"/>
      </call>
    </service>
    <service id="monolog.handler.console" class="Symfony\Bridge\Monolog\Handler\ConsoleHandler">
      <tag name="kernel.event_subscriber"/>
      <argument>null</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id=".5_HtmlDescriptor~QhBYYBz" class="Symfony\Component\VarDumper\Command\Descriptor\HtmlDescriptor" public="false">
      <argument type="service" id="var_dumper.html_dumper"/>
    </service>
    <service id=".4_CliDescriptor~QhBYYBz" class="Symfony\Component\VarDumper\Command\Descriptor\CliDescriptor" public="false">
      <argument type="service" id="var_dumper.cli_dumper"/>
    </service>
    <service id=".3_CliContextProvider~QhBYYBz" class="Symfony\Component\VarDumper\Dumper\ContextProvider\CliContextProvider" public="false"/>
    <service id=".2_RequestContextProvider~QhBYYBz" class="Symfony\Component\VarDumper\Dumper\ContextProvider\RequestContextProvider" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id=".1_SourceContextProvider~QhBYYBz" class="Symfony\Component\VarDumper\Dumper\ContextProvider\SourceContextProvider" public="false">
      <argument>UTF-8</argument>
      <argument>/var/www/symfony</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
    </service>
    <service id="twig.extension.dump" class="Symfony\Bridge\Twig\Extension\DumpExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="var_dumper.cloner"/>
      <argument type="service" id="var_dumper.html_dumper"/>
    </service>
    <service id="data_collector.dump" class="Symfony\Component\HttpKernel\DataCollector\DumpDataCollector" public="true">
      <tag name="data_collector" id="dump" template="@Debug/Profiler/dump.html.twig" priority="240"/>
      <argument type="service" id="debug.stopwatch" on-invalid="ignore"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>UTF-8</argument>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="var_dumper.server_connection"/>
    </service>
    <service id="debug.dump_listener" class="Symfony\Component\HttpKernel\EventListener\DumpListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="var_dumper.cloner"/>
      <argument type="service" id="var_dumper.cli_dumper"/>
      <argument type="service" id="var_dumper.server_connection"/>
    </service>
    <service id="var_dumper.cloner" class="Symfony\Component\VarDumper\Cloner\VarCloner" public="true">
      <call method="setMaxItems">
        <argument>2500</argument>
      </call>
      <call method="setMinDepth">
        <argument>1</argument>
      </call>
      <call method="setMaxString">
        <argument>-1</argument>
      </call>
    </service>
    <service id="var_dumper.cli_dumper" class="Symfony\Component\VarDumper\Dumper\CliDumper" public="false">
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>0</argument>
    </service>
    <service id="var_dumper.html_dumper" class="Symfony\Component\VarDumper\Dumper\HtmlDumper" public="false">
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>0</argument>
      <call method="setDisplayOptions">
        <argument type="collection">
          <argument key="fileLinkFormat" type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
        </argument>
      </call>
    </service>
    <service id="var_dumper.server_connection" class="Symfony\Component\VarDumper\Server\Connection" public="false">
      <argument>tcp://%env(VAR_DUMPER_SERVER)%</argument>
      <argument type="collection">
        <argument key="source" type="service" id=".1_SourceContextProvider~QhBYYBz"/>
        <argument key="request" type="service" id=".2_RequestContextProvider~QhBYYBz"/>
        <argument key="cli" type="service" id=".3_CliContextProvider~QhBYYBz"/>
      </argument>
    </service>
    <service id="var_dumper.dump_server" class="Symfony\Component\VarDumper\Server\DumpServer" public="false">
      <tag name="monolog.logger" channel="debug"/>
      <argument>tcp://%env(VAR_DUMPER_SERVER)%</argument>
      <argument type="service" id="monolog.logger.debug" on-invalid="null"/>
    </service>
    <service id="var_dumper.command.server_dump" class="Symfony\Component\VarDumper\Command\ServerDumpCommand" public="false">
      <tag name="console.command" command="server:dump"/>
      <argument type="service" id="var_dumper.dump_server"/>
      <argument type="collection">
        <argument key="cli" type="service" id=".4_CliDescriptor~QhBYYBz"/>
        <argument key="html" type="service" id=".5_HtmlDescriptor~QhBYYBz"/>
      </argument>
      <call method="setName">
        <argument>server:dump</argument>
      </call>
    </service>
    <service id="maker.file_manager" class="Symfony\Bundle\MakerBundle\FileManager" public="false">
      <argument type="service" id="filesystem"/>
      <argument type="service" id="maker.autoloader_util"/>
      <argument>/var/www/symfony</argument>
    </service>
    <service id="maker.autoloader_finder" class="Symfony\Bundle\MakerBundle\Util\ComposerAutoloaderFinder" public="false"/>
    <service id="maker.autoloader_util" class="Symfony\Bundle\MakerBundle\Util\AutoloaderUtil" public="false">
      <argument type="service" id="maker.autoloader_finder"/>
    </service>
    <service id="maker.event_registry" class="Symfony\Bundle\MakerBundle\EventRegistry" public="false">
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="maker.console_error_listener" class="Symfony\Bundle\MakerBundle\Event\ConsoleErrorSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="maker.doctrine_helper" class="Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper" public="false">
      <argument>App\Entity</argument>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
    </service>
    <service id="maker.auto_command.abstract" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false" abstract="true">
      <argument></argument>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.generator" class="Symfony\Bundle\MakerBundle\Generator" public="false">
      <argument type="service" id="maker.file_manager"/>
      <argument>App</argument>
    </service>
    <service id="maker.entity_class_generator" class="Symfony\Bundle\MakerBundle\Doctrine\EntityClassGenerator" public="false">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.user_class_builder" class="Symfony\Bundle\MakerBundle\Security\UserClassBuilder" public="false"/>
    <service id="maker.security_config_updater" class="Symfony\Bundle\MakerBundle\Security\SecurityConfigUpdater" public="false"/>
    <service id="maker.renderer.form_type_renderer" class="Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer" public="false">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.maker.make_authenticator" class="Symfony\Bundle\MakerBundle\Maker\MakeAuthenticator" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.maker.make_command" class="Symfony\Bundle\MakerBundle\Maker\MakeCommand" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeController" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_crud" class="Symfony\Bundle\MakerBundle\Maker\MakeCrud" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_entity" class="Symfony\Bundle\MakerBundle\Maker\MakeEntity" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument>/var/www/symfony</argument>
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.maker.make_fixtures" class="Symfony\Bundle\MakerBundle\Maker\MakeFixtures" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form" class="Symfony\Bundle\MakerBundle\Maker\MakeForm" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_functional_test" class="Symfony\Bundle\MakerBundle\Maker\MakeFunctionalTest" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_registration_form" class="Symfony\Bundle\MakerBundle\Maker\MakeRegistrationForm" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="maker.maker.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerEncoder" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerNormalizer" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_subscriber" class="Symfony\Bundle\MakerBundle\Maker\MakeSubscriber" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
    </service>
    <service id="maker.maker.make_twig_extension" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigExtension" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_unit_test" class="Symfony\Bundle\MakerBundle\Maker\MakeUnitTest" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_validator" class="Symfony\Bundle\MakerBundle\Maker\MakeValidator" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_voter" class="Symfony\Bundle\MakerBundle\Maker\MakeVoter" public="false">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_user" class="Symfony\Bundle\MakerBundle\Maker\MakeUser" public="false">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.user_class_builder"/>
      <argument type="service" id="maker.security_config_updater"/>
    </service>
    <service id="maker.maker.make_migration" class="Symfony\Bundle\MakerBundle\Maker\MakeMigration" public="false">
      <tag name="maker.command"/>
      <argument>/var/www/symfony</argument>
    </service>
    <service id="web_server.command.server_run" class="Symfony\Bundle\WebServerBundle\Command\ServerRunCommand" public="false">
      <tag name="console.command" command="server:run"/>
      <argument>/var/www/symfony/public</argument>
      <argument>dev</argument>
      <call method="setName">
        <argument>server:run</argument>
      </call>
    </service>
    <service id="web_server.command.server_start" class="Symfony\Bundle\WebServerBundle\Command\ServerStartCommand" public="false">
      <tag name="console.command" command="server:start"/>
      <argument>/var/www/symfony/public</argument>
      <argument>dev</argument>
      <call method="setName">
        <argument>server:start</argument>
      </call>
    </service>
    <service id="web_server.command.server_stop" class="Symfony\Bundle\WebServerBundle\Command\ServerStopCommand" public="false">
      <tag name="console.command" command="server:stop"/>
      <call method="setName">
        <argument>server:stop</argument>
      </call>
    </service>
    <service id="web_server.command.server_status" class="Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand" public="false">
      <tag name="console.command" command="server:status"/>
      <call method="setName">
        <argument>server:status</argument>
      </call>
    </service>
    <service id="web_server.command.server_log" class="Symfony\Bundle\WebServerBundle\Command\ServerLogCommand" public="false">
      <tag name="console.command" command="server:log"/>
      <call method="setName">
        <argument>server:log</argument>
      </call>
    </service>
    <service id="easyadmin.cache.manager" class="EasyCorp\Bundle\EasyAdminBundle\Cache\CacheManager" public="true">
      <argument>/var/www/symfony/var/cache/dev/easy_admin</argument>
    </service>
    <service id="easyadmin.config.manager" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\ConfigManager" public="true">
      <argument type="service" id="easyadmin.cache.manager"/>
      <argument type="service" id="property_accessor"/>
      <argument>%easyadmin.config%</argument>
      <argument>true</argument>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.normalizer_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.design_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.menu_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.action_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.metadata_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.property_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.view_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.template_config_pass"/>
      </call>
      <call method="addConfigPass">
        <argument type="service" id="easyadmin.configuration.default_config_pass"/>
      </call>
    </service>
    <service id="easyadmin.query_builder" class="EasyCorp\Bundle\EasyAdminBundle\Search\QueryBuilder" public="true">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="easyadmin.finder" class="EasyCorp\Bundle\EasyAdminBundle\Search\Finder" public="false">
      <argument type="service" id="easyadmin.query_builder"/>
      <argument type="service" id="easyadmin.paginator"/>
    </service>
    <service id="easyadmin.autocomplete" class="EasyCorp\Bundle\EasyAdminBundle\Search\Autocomplete" public="true">
      <argument type="service" id="easyadmin.config.manager"/>
      <argument type="service" id="easyadmin.finder"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="easyadmin.paginator" class="EasyCorp\Bundle\EasyAdminBundle\Search\Paginator" public="true"/>
    <service id="easyadmin.router" class="EasyCorp\Bundle\EasyAdminBundle\Router\EasyAdminRouter" public="true">
      <argument type="service" id="easyadmin.config.manager"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="easyadmin.twig.extension" class="EasyCorp\Bundle\EasyAdminBundle\Twig\EasyAdminTwigExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="easyadmin.config.manager"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="easyadmin.router"/>
      <argument>true</argument>
      <argument type="service" id="security.logout_url_generator" on-invalid="null"/>
    </service>
    <service id="easyadmin.listener.controller" class="EasyCorp\Bundle\EasyAdminBundle\EventListener\ControllerListener" public="true">
      <tag name="kernel.event_listener" event="kernel.controller" method="onKernelController"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="easyadmin.config.manager"/>
      <argument type="service" id="debug.controller_resolver"/>
    </service>
    <service id="easyadmin.listener.request_post_initialize" class="EasyCorp\Bundle\EasyAdminBundle\EventListener\RequestPostInitializeListener" public="true">
      <tag name="kernel.event_listener" event="easy_admin.post_initialize" method="initializeRequest"/>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="easyadmin.data_collector" class="EasyCorp\Bundle\EasyAdminBundle\DataCollector\EasyAdminDataCollector" public="false">
      <tag name="data_collector" template="@EasyAdmin/data_collector/easyadmin.html.twig" id="easyadmin"/>
      <argument type="service" id="easyadmin.config.manager"/>
    </service>
    <service id="easyadmin.configuration.normalizer_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\NormalizerConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="90"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="easyadmin.configuration.design_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\DesignConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="80"/>
      <argument type="service" id="service_container"/>
      <argument>true</argument>
      <argument>en</argument>
    </service>
    <service id="easyadmin.configuration.menu_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\MenuConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="70"/>
    </service>
    <service id="easyadmin.configuration.action_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\ActionConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="60"/>
    </service>
    <service id="easyadmin.configuration.metadata_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\MetadataConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="50"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="easyadmin.configuration.property_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\PropertyConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="40"/>
      <argument type="service" id="form.registry"/>
    </service>
    <service id="easyadmin.configuration.view_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\ViewConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="30"/>
    </service>
    <service id="easyadmin.configuration.template_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\TemplateConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="20"/>
      <argument type="service" id="twig.loader.native_filesystem"/>
    </service>
    <service id="easyadmin.configuration.default_config_pass" class="EasyCorp\Bundle\EasyAdminBundle\Configuration\DefaultConfigPass" public="false">
      <tag name="easyadmin.config_pass" priority="10"/>
    </service>
    <service id="easyadmin.form.type" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminFormType">
      <tag name="form.type"/>
      <argument type="service" id="easyadmin.config.manager"/>
      <argument type="collection">
        <argument key="5" type="service" id="easyadmin.form.type.configurator.autocomplete"/>
        <argument key="4" type="service" id="easyadmin.form.type.configurator.collection"/>
        <argument key="3" type="service" id="easyadmin.form.type.configurator.checkbox"/>
        <argument key="2" type="service" id="easyadmin.form.type.configurator.type"/>
        <argument key="1" type="service" id="easyadmin.form.type.configurator.entity"/>
        <argument key="0" type="service" id="easyadmin.form.type.configurator.fos_ckeditor"/>
      </argument>
    </service>
    <service id="easyadmin.form.type.autocomplete" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminAutocompleteType">
      <tag name="form.type" alias="easyadmin_autocomplete"/>
      <argument type="service" id="easyadmin.config.manager"/>
    </service>
    <service id="easyadmin.form.type.divider" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminDividerType">
      <tag name="form.type" alias="easyadmin_divider"/>
    </service>
    <service id="easyadmin.form.type.section" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminSectionType">
      <tag name="form.type" alias="easyadmin_section"/>
    </service>
    <service id="easyadmin.form.type.group" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminGroupType">
      <tag name="form.type" alias="easyadmin_group"/>
    </service>
    <service id="easyadmin.form.type.extension" class="EasyCorp\Bundle\EasyAdminBundle\Form\Extension\EasyAdminExtension">
      <tag name="form.type_extension" alias="form" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
    </service>
    <service id="easyadmin.form.type_guesser_chain" class="Symfony\Component\Form\FormTypeGuesserChain" public="false">
      <argument type="collection">
        <argument type="service" id="form.type_guesser.validator"/>
        <argument type="service" id="form.type_guesser.doctrine"/>
        <argument type="service" id="easyadmin.form.guesser.missing_doctrine_orm_type_guesser"/>
      </argument>
    </service>
    <service id="easyadmin.form.type.configurator.autocomplete" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\AutocompleteTypeConfigurator" public="false">
      <tag name="easyadmin.form.type.configurator" priority="30"/>
    </service>
    <service id="easyadmin.form.type.configurator.collection" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\CollectionTypeConfigurator" public="false">
      <tag name="easyadmin.form.type.configurator" priority="20"/>
    </service>
    <service id="easyadmin.form.type.configurator.checkbox" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\CheckboxTypeConfigurator" public="false">
      <tag name="easyadmin.form.type.configurator" priority="10"/>
    </service>
    <service id="easyadmin.form.type.configurator.type" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\TypeConfigurator" public="false">
      <tag name="easyadmin.form.type.configurator" priority="0"/>
      <argument type="service" id="easyadmin.config.manager"/>
    </service>
    <service id="easyadmin.form.type.configurator.entity" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\EntityTypeConfigurator" public="false">
      <tag name="easyadmin.form.type.configurator" priority="-20"/>
    </service>
    <service id="easyadmin.form.type.configurator.fos_ckeditor" class="EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\FOSCKEditorTypeConfigurator" public="false">
      <tag name="easyadmin.form.type.configurator" priority="-130"/>
    </service>
    <service id="easyadmin.form.guesser.missing_doctrine_orm_type_guesser" class="EasyCorp\Bundle\EasyAdminBundle\Form\Guesser\MissingDoctrineOrmTypeGuesser" public="true">
      <tag name="form.type_guesser"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.fixtures_load_command" class="Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand">
      <tag name="console.command" command="doctrine:fixtures:load"/>
      <argument type="service" id="doctrine.fixtures.loader"/>
      <call method="setName">
        <argument>doctrine:fixtures:load</argument>
      </call>
    </service>
    <service id="doctrine.fixtures.loader" class="Doctrine\Bundle\FixturesBundle\Loader\SymfonyFixturesLoader" public="false">
      <argument type="service" id="service_container"/>
      <call method="addFixtures">
        <argument type="collection">
          <argument type="collection">
            <argument key="fixture" type="service" id="App\DataFixtures\AppFixtures"/>
            <argument key="groups" type="collection"/>
          </argument>
          <argument type="collection">
            <argument key="fixture" type="service" id="App\DataFixtures\UrlFixture"/>
            <argument key="groups" type="collection"/>
          </argument>
          <argument type="collection">
            <argument key="fixture" type="service" id="App\DataFixtures\UserFixture"/>
            <argument key="groups" type="collection"/>
          </argument>
          <argument type="collection">
            <argument key="fixture" type="service" id="App\DataFixtures\UserProfileFixtures"/>
            <argument key="groups" type="collection"/>
          </argument>
        </argument>
      </call>
    </service>
    <service id="vich_uploader.adapter.propel" class="Vich\UploaderBundle\Adapter\Propel\PropelORMAdapter" public="false"/>
    <service id="vich_uploader.adapter.mongodb" class="Vich\UploaderBundle\Adapter\ODM\MongoDB\MongoDBAdapter" public="false"/>
    <service id="vich_uploader.adapter.orm" class="Vich\UploaderBundle\Adapter\ORM\DoctrineORMAdapter" public="false"/>
    <service id="vich_uploader.adapter.phpcr" class="Vich\UploaderBundle\Adapter\PHPCR\PHPCRAdapter" public="false"/>
    <service id="vich_uploader.listener.doctrine.base" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.orm" class="Vich\UploaderBundle\EventListener\Doctrine\InjectListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.orm" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.orm" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.orm" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\InjectListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.mongodb" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\InjectListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.phpcr" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.propel.base" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.inject.propel" class="Vich\UploaderBundle\EventListener\Propel\InjectListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.propel" class="Vich\UploaderBundle\EventListener\Propel\UploadListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.clean.propel" class="Vich\UploaderBundle\EventListener\Propel\CleanListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.propel" class="Vich\UploaderBundle\EventListener\Propel\RemoveListener" public="false">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.storage.file_system" class="Vich\UploaderBundle\Storage\FileSystemStorage" public="false">
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
    </service>
    <service id="vich_uploader.file_injector" class="Vich\UploaderBundle\Injector\FileInjector" public="false">
      <argument type="service" id="vich_uploader.storage.file_system"/>
    </service>
    <service id="vich_uploader.metadata.file_locator" class="Metadata\Driver\FileLocator" public="false">
      <argument type="collection"/>
    </service>
    <service id="vich_uploader.metadata_driver.annotation" class="Vich\UploaderBundle\Metadata\Driver\AnnotationDriver" public="false">
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="vich_uploader.metadata_driver.xml" class="Vich\UploaderBundle\Metadata\Driver\XmlDriver" public="false">
      <argument type="service" id="vich_uploader.metadata.file_locator"/>
    </service>
    <service id="vich_uploader.metadata_driver.yaml" class="Vich\UploaderBundle\Metadata\Driver\YamlDriver" public="false">
      <argument type="service" id="vich_uploader.metadata.file_locator"/>
    </service>
    <service id="vich_uploader.metadata_driver.chain" class="Metadata\Driver\DriverChain" public="false">
      <argument type="collection">
        <argument type="service" id="vich_uploader.metadata_driver.xml"/>
        <argument type="service" id="vich_uploader.metadata_driver.annotation"/>
        <argument type="service" id="vich_uploader.metadata_driver.yaml"/>
      </argument>
    </service>
    <service id="vich_uploader.metadata.cache.file_cache" class="Metadata\Cache\FileCache" public="false">
      <argument>/var/www/symfony/var/cache/dev/vich_uploader</argument>
    </service>
    <service id="vich_uploader.metadata_factory" class="Metadata\MetadataFactory" public="false">
      <argument type="service" id="vich_uploader.metadata_driver.chain"/>
      <argument>Metadata\ClassHierarchyMetadata</argument>
      <argument>true</argument>
      <call method="setCache">
        <argument type="service" id="vich_uploader.metadata.cache.file_cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="vich_uploader.metadata_reader" class="Vich\UploaderBundle\Metadata\MetadataReader" public="false">
      <argument type="service" id="vich_uploader.metadata_factory"/>
    </service>
    <service id="vich_uploader.property_mapping_factory" class="Vich\UploaderBundle\Mapping\PropertyMappingFactory" public="false">
      <argument type="service" id="service_container"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument>%vich_uploader.mappings%</argument>
      <argument>_name</argument>
    </service>
    <service id="Vich\UploaderBundle\Naming\UniqidNamer" class="Vich\UploaderBundle\Naming\UniqidNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\PropertyNamer" class="Vich\UploaderBundle\Naming\PropertyNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\OrignameNamer" class="Vich\UploaderBundle\Naming\OrignameNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\HashNamer" class="Vich\UploaderBundle\Naming\HashNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\Base64Namer" class="Vich\UploaderBundle\Naming\Base64Namer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\SubdirDirectoryNamer" class="Vich\UploaderBundle\Naming\SubdirDirectoryNamer" public="true"/>
    <service id="Vich\UploaderBundle\Naming\PropertyDirectoryNamer" class="Vich\UploaderBundle\Naming\PropertyDirectoryNamer" public="true">
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="vich_uploader.current_date_time_helper" class="Vich\UploaderBundle\Naming\CurrentDateTimeHelper" public="false"/>
    <service id="Vich\UploaderBundle\Naming\CurrentDateTimeDirectoryNamer" class="Vich\UploaderBundle\Naming\CurrentDateTimeDirectoryNamer" public="true">
      <argument type="service" id="vich_uploader.current_date_time_helper" on-invalid="null"/>
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="vich_uploader.download_handler" class="Vich\UploaderBundle\Handler\DownloadHandler" public="true">
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
    </service>
    <service id="vich_uploader.upload_handler" class="Vich\UploaderBundle\Handler\UploadHandler" public="true">
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
      <argument type="service" id="vich_uploader.file_injector"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="vich_uploader.command.mapping_debug_class" class="Vich\UploaderBundle\Command\MappingDebugClassCommand" public="false">
      <tag name="console.command" command="vich:mapping:debug-class"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <call method="setName">
        <argument>vich:mapping:debug-class</argument>
      </call>
    </service>
    <service id="vich_uploader.command.mapping_debug" class="Vich\UploaderBundle\Command\MappingDebugCommand" public="false">
      <tag name="console.command" command="vich:mapping:debug"/>
      <argument>%vich_uploader.mappings%</argument>
      <call method="setName">
        <argument>vich:mapping:debug</argument>
      </call>
    </service>
    <service id="vich_uploader.command.mapping_list_classes" class="Vich\UploaderBundle\Command\MappingListClassesCommand" public="false">
      <tag name="console.command" command="vich:mapping:list-classes"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <call method="setName">
        <argument>vich:mapping:list-classes</argument>
      </call>
    </service>
    <service id="Vich\UploaderBundle\DataCollector\MappingCollector" class="Vich\UploaderBundle\DataCollector\MappingCollector" public="false">
      <tag name="data_collector" template="@VichUploader/Collector/mapping_collector.html.twig" id="vich_uploader.mapping_collector"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
    </service>
    <service id="vich_uploader.form.type.file" class="Vich\UploaderBundle\Form\Type\VichFileType" public="true">
      <tag name="form.type" alias="vich_file"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="vich_uploader.form.type.image" class="Vich\UploaderBundle\Form\Type\VichImageType" public="true">
      <tag name="form.type" alias="vich_image"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
      <argument type="service" id="vich_uploader.property_mapping_factory"/>
      <argument type="service" id="property_accessor"/>
      <argument>null</argument>
    </service>
    <service id="vich_uploader.templating.helper.uploader_helper" class="Vich\UploaderBundle\Templating\Helper\UploaderHelper" public="true">
      <tag name="templating.helper" alias="vich_uploader"/>
      <argument type="service" id="vich_uploader.storage.file_system"/>
    </service>
    <service id="vich_uploader.twig.extension.uploader" class="Vich\UploaderBundle\Twig\Extension\UploaderExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="vich_uploader.templating.helper.uploader_helper"/>
    </service>
    <service id="vich_uploader.listener.clean.product_images" class="Vich\UploaderBundle\EventListener\Doctrine\CleanListener" public="false">
      <tag name="doctrine.event_subscriber" priority="50"/>
      <argument>product_images</argument>
      <argument type="service" id="vich_uploader.adapter.orm"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.remove.product_images" class="Vich\UploaderBundle\EventListener\Doctrine\RemoveListener" public="false">
      <tag name="doctrine.event_subscriber" priority="0"/>
      <argument>product_images</argument>
      <argument type="service" id="vich_uploader.adapter.orm"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="vich_uploader.listener.upload.product_images" class="Vich\UploaderBundle\EventListener\Doctrine\UploadListener" public="false">
      <tag name="doctrine.event_subscriber" priority="0"/>
      <argument>product_images</argument>
      <argument type="service" id="vich_uploader.adapter.orm"/>
      <argument type="service" id="vich_uploader.metadata_reader"/>
      <argument type="service" id="vich_uploader.upload_handler"/>
    </service>
    <service id="overblog_graphql.executor.default" class="Overblog\GraphQLBundle\Executor\Executor" public="false"/>
    <service id="overblog_graphql.request_executor" class="Overblog\GraphQLBundle\Request\Executor" public="true">
      <argument type="service" id="overblog_graphql.executor.default"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="overblog_graphql.promise_adapter.default"/>
      <argument>%overblog_graphql.default_resolver%</argument>
      <call method="setMaxQueryComplexity">
        <argument>false</argument>
      </call>
      <call method="setMaxQueryDepth">
        <argument>false</argument>
      </call>
      <call method="addSchema">
        <argument>default</argument>
        <argument type="service" id="overblog_graphql.schema_default"/>
      </call>
      <call method="enableIntrospectionQuery"/>
    </service>
    <service id="overblog_graphql.request_parser" class="Overblog\GraphQLBundle\Request\Parser" public="true"/>
    <service id="overblog_graphql.request_batch_parser" class="Overblog\GraphQLBundle\Request\BatchParser"/>
    <service id="overblog_graphql.schema_builder" class="Overblog\GraphQLBundle\Definition\Builder\SchemaBuilder" public="false">
      <argument type="service" id="overblog_graphql.type_resolver"/>
      <argument>true</argument>
    </service>
    <service id="overblog_graphql.type_factory" class="Overblog\GraphQLBundle\Definition\Builder\TypeFactory" public="false">
      <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor"/>
      <argument type="service" id="Overblog\GraphQLBundle\Definition\GlobalVariables"/>
    </service>
    <service id="overblog_graphql.type_resolver" class="Overblog\GraphQLBundle\Resolver\TypeResolver" public="true">
      <tag name="overblog_graphql.global_variable" alias="typeResolver"/>
      <call method="addSolution">
        <argument>App\GraphQL\Type\DateTimeType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Type\DateTimeType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>DateTime</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Type\DateTimeType</argument>
          <argument key="aliases" type="collection">
            <argument>DateTime</argument>
          </argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.string_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.string_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>String</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.string_type</argument>
          <argument key="aliases" type="collection">
            <argument>String</argument>
          </argument>
          <argument key="alias">String</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.int_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.int_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Int</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.int_type</argument>
          <argument key="aliases" type="collection">
            <argument>Int</argument>
          </argument>
          <argument key="alias">Int</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.float_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.float_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Float</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.float_type</argument>
          <argument key="aliases" type="collection">
            <argument>Float</argument>
          </argument>
          <argument key="alias">Float</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.boolean_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.boolean_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Boolean</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.boolean_type</argument>
          <argument key="aliases" type="collection">
            <argument>Boolean</argument>
          </argument>
          <argument key="alias">Boolean</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.id_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.id_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ID</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.id_type</argument>
          <argument key="aliases" type="collection">
            <argument>ID</argument>
          </argument>
          <argument key="alias">ID</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Query</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
          <argument key="aliases" type="collection">
            <argument>Query</argument>
          </argument>
          <argument key="alias">Query</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\DateTimeType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\DateTimeType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>DateTime</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\DateTimeType</argument>
          <argument key="aliases" type="collection">
            <argument>DateTime</argument>
          </argument>
          <argument key="alias">DateTime</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>User</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\UserType</argument>
          <argument key="aliases" type="collection">
            <argument>User</argument>
          </argument>
          <argument key="alias">User</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AuthorizedUserType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AuthorizedUserType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>AuthorizedUser</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\AuthorizedUserType</argument>
          <argument key="aliases" type="collection">
            <argument>AuthorizedUser</argument>
          </argument>
          <argument key="alias">AuthorizedUser</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\createOrderInputType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\createOrderInputType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>createOrderInput</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\createOrderInputType</argument>
          <argument key="aliases" type="collection">
            <argument>createOrderInput</argument>
          </argument>
          <argument key="alias">createOrderInput</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\SaleType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\SaleType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Sale</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\SaleType</argument>
          <argument key="aliases" type="collection">
            <argument>Sale</argument>
          </argument>
          <argument key="alias">Sale</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\SaleItemType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\SaleItemType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>SaleItem</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\SaleItemType</argument>
          <argument key="aliases" type="collection">
            <argument>SaleItem</argument>
          </argument>
          <argument key="alias">SaleItem</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressConnectionType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressConnectionType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>AddressConnection</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\AddressConnectionType</argument>
          <argument key="aliases" type="collection">
            <argument>AddressConnection</argument>
          </argument>
          <argument key="alias">AddressConnection</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductConnectionType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductConnectionType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ProductConnection</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ProductConnectionType</argument>
          <argument key="aliases" type="collection">
            <argument>ProductConnection</argument>
          </argument>
          <argument key="alias">ProductConnection</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BannerType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BannerType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Banner</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\BannerType</argument>
          <argument key="aliases" type="collection">
            <argument>Banner</argument>
          </argument>
          <argument key="alias">Banner</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BannerItemType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BannerItemType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>BannerItem</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\BannerItemType</argument>
          <argument key="aliases" type="collection">
            <argument>BannerItem</argument>
          </argument>
          <argument key="alias">BannerItem</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UsersOrdersType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UsersOrdersType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>UsersOrders</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\UsersOrdersType</argument>
          <argument key="aliases" type="collection">
            <argument>UsersOrders</argument>
          </argument>
          <argument key="alias">UsersOrders</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserOrderType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserOrderType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>UserOrder</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\UserOrderType</argument>
          <argument key="aliases" type="collection">
            <argument>UserOrder</argument>
          </argument>
          <argument key="alias">UserOrder</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\OrderItemType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\OrderItemType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>OrderItem</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\OrderItemType</argument>
          <argument key="aliases" type="collection">
            <argument>OrderItem</argument>
          </argument>
          <argument key="alias">OrderItem</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressesType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressesType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Addresses</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\AddressesType</argument>
          <argument key="aliases" type="collection">
            <argument>Addresses</argument>
          </argument>
          <argument key="alias">Addresses</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddBasketInputType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddBasketInputType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>AddBasketInput</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\AddBasketInputType</argument>
          <argument key="aliases" type="collection">
            <argument>AddBasketInput</argument>
          </argument>
          <argument key="alias">AddBasketInput</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductItemType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductItemType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ProductItem</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ProductItemType</argument>
          <argument key="aliases" type="collection">
            <argument>ProductItem</argument>
          </argument>
          <argument key="alias">ProductItem</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Product</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ProductType</argument>
          <argument key="aliases" type="collection">
            <argument>Product</argument>
          </argument>
          <argument key="alias">Product</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductFiltersType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductFiltersType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ProductFilters</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ProductFiltersType</argument>
          <argument key="aliases" type="collection">
            <argument>ProductFilters</argument>
          </argument>
          <argument key="alias">ProductFilters</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Address</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\AddressType</argument>
          <argument key="aliases" type="collection">
            <argument>Address</argument>
          </argument>
          <argument key="alias">Address</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ItemConnectionType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ItemConnectionType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ItemConnection</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ItemConnectionType</argument>
          <argument key="aliases" type="collection">
            <argument>ItemConnection</argument>
          </argument>
          <argument key="alias">ItemConnection</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BasketType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BasketType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Basket</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\BasketType</argument>
          <argument key="aliases" type="collection">
            <argument>Basket</argument>
          </argument>
          <argument key="alias">Basket</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BasketProductType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BasketProductType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>BasketProduct</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\BasketProductType</argument>
          <argument key="aliases" type="collection">
            <argument>BasketProduct</argument>
          </argument>
          <argument key="alias">BasketProduct</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UpdateBasketInputType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UpdateBasketInputType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>UpdateBasketInput</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\UpdateBasketInputType</argument>
          <argument key="aliases" type="collection">
            <argument>UpdateBasketInput</argument>
          </argument>
          <argument key="alias">UpdateBasketInput</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserInputType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserInputType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>UserInput</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\UserInputType</argument>
          <argument key="aliases" type="collection">
            <argument>UserInput</argument>
          </argument>
          <argument key="alias">UserInput</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Catalog</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\CatalogType</argument>
          <argument key="aliases" type="collection">
            <argument>Catalog</argument>
          </argument>
          <argument key="alias">Catalog</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFiltersType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFiltersType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>CatalogFilters</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFiltersType</argument>
          <argument key="aliases" type="collection">
            <argument>CatalogFilters</argument>
          </argument>
          <argument key="alias">CatalogFilters</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFilterItemType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFilterItemType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>CatalogFilterItem</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFilterItemType</argument>
          <argument key="aliases" type="collection">
            <argument>CatalogFilterItem</argument>
          </argument>
          <argument key="alias">CatalogFilterItem</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\MutationType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\MutationType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Mutation</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\MutationType</argument>
          <argument key="aliases" type="collection">
            <argument>Mutation</argument>
          </argument>
          <argument key="alias">Mutation</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\OrderType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\OrderType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Order</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\OrderType</argument>
          <argument key="aliases" type="collection">
            <argument>Order</argument>
          </argument>
          <argument key="alias">Order</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>PageInfo</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
          <argument key="aliases" type="collection">
            <argument>PageInfo</argument>
          </argument>
          <argument key="alias">PageInfo</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressEdgeType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressEdgeType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>AddressEdge</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\AddressEdgeType</argument>
          <argument key="aliases" type="collection">
            <argument>AddressEdge</argument>
          </argument>
          <argument key="alias">AddressEdge</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductEdgeType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductEdgeType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ProductEdge</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ProductEdgeType</argument>
          <argument key="aliases" type="collection">
            <argument>ProductEdge</argument>
          </argument>
          <argument key="alias">ProductEdge</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ItemEdgeType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ItemEdgeType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ItemEdge</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ItemEdgeType</argument>
          <argument key="aliases" type="collection">
            <argument>ItemEdge</argument>
          </argument>
          <argument key="alias">ItemEdge</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
    </service>
    <service id="overblog_graphql.resolver_resolver" class="Overblog\GraphQLBundle\Resolver\ResolverResolver" public="true">
      <tag name="overblog_graphql.global_variable" alias="resolverResolver" public=""/>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AddressField</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AddressField</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AddressField</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AddressField::data</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AddressField</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AddressField</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">data</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AddressResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AddressResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Address</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AddressResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Address</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AuthAlias::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AuthAlias</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AuthAlias</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AuthAlias::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AuthAlias</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AuthAlias</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AuthAlias::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AuthAlias</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AuthAlias</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\AuthAlias::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\AuthAlias</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>App\GraphQL\Resolver\AuthAlias</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\AuthAlias</argument>
          <argument key="aliases" type="collection">
            <argument>App\GraphQL\Resolver\AuthAlias</argument>
          </argument>
          <argument key="method">resolve</argument>
          <argument key="alias">App\GraphQL\Resolver\AuthAlias</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\BannerResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\BannerResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Banner</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\BannerResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Banner</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\BasketResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\BasketResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Basket</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\BasketResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Basket</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\BasketResolver::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\BasketResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\BasketResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\BasketResolver::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\BasketResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\BasketResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\BasketResolver::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\BasketResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\BasketResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver::name</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">name</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver::id</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">id</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver::products</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">products</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver::count</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">count</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Catalog</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Catalog</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\CatalogResolver::tags</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\CatalogResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\CatalogResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">tags</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::name</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">name</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::url</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">url</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::id</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">id</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::tags</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">tags</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::items</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">items</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductFieldResolver::getAliases</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductFieldResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAliases</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductItemResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductItemResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ProductItem</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductItemResolver</argument>
          <argument key="aliases" type="collection">
            <argument>ProductItem</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Product</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Product</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ProductsFieldsResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ProductsFieldsResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Catalog</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ProductsFieldsResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Catalog</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\SalesResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\SalesResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Sales</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\SalesResolver</argument>
          <argument key="aliases" type="collection">
            <argument>Sales</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\UserResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\UserResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>User</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\UserResolver</argument>
          <argument key="aliases" type="collection">
            <argument>User</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\UsersOrdersResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\UsersOrdersResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>UsersOrders</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\UsersOrdersResolver</argument>
          <argument key="aliases" type="collection">
            <argument>UsersOrders</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\UsersOrdersResolver::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\UsersOrdersResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\UsersOrdersResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\UsersOrdersResolver::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\UsersOrdersResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\UsersOrdersResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\UsersOrdersResolver::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\UsersOrdersResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\UsersOrdersResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_mutation_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_mutation_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_node_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_node_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_plural_identifying_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_plural_identifying_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_globalid_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_globalid_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
    </service>
    <service id="overblog_graphql.mutation_resolver" class="Overblog\GraphQLBundle\Resolver\MutationResolver" public="true">
      <tag name="overblog_graphql.global_variable" alias="mutationResolver" public=""/>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\AuthMutation::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\AuthMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\AuthMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\AuthMutation::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\AuthMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\AuthMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\AuthMutation::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\AuthMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\AuthMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\BasketMutation::add</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\BasketMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\BasketMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">add</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\BasketMutation::remove</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\BasketMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\BasketMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">remove</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\BasketMutation::update</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\BasketMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\BasketMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">update</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\BasketMutation::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\BasketMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\BasketMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\BasketMutation::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\BasketMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\BasketMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\BasketMutation::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\BasketMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\BasketMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\OrderMutation::create</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\OrderMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\OrderMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">create</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\OrderMutation::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\OrderMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\OrderMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\OrderMutation::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\OrderMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\OrderMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\OrderMutation::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\OrderMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\OrderMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\UserMutation::auth</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\UserMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\UserMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">auth</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\UserMutation::getSessionKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\UserMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\UserMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getSessionKey</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\UserMutation::getUser</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\UserMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\UserMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getUser</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Mutation\UserMutation::getAuthKey</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Mutation\UserMutation</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Mutation\UserMutation</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">getAuthKey</argument>
        </argument>
      </call>
    </service>
    <service id="overblog_graphql.access_resolver" class="Overblog\GraphQLBundle\Resolver\AccessResolver" public="true">
      <argument type="service" id="overblog_graphql.promise_adapter.default"/>
    </service>
    <service id="overblog_graphql.expression_language.default" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionLanguage" public="false">
      <argument>null</argument>
      <call method="addGlobalName">
        <argument>globalVariable-&gt;get('typeResolver')</argument>
        <argument>typeResolver</argument>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.parameter_alias"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.service_alias"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.mutation_alias"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.resolver_alias"/>
      </call>
    </service>
    <service id="overblog_graphql.cache_compiler" class="Overblog\GraphQLBundle\Generator\TypeGenerator" public="true">
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__</argument>
      <argument type="collection">
        <argument>/var/www/symfony/vendor/overblog/graphql-bundle/src/Resources/skeleton</argument>
      </argument>
      <argument>null</argument>
      <argument>%overblog_graphql_types.config%</argument>
      <argument>true</argument>
      <argument>null</argument>
      <argument>/var/www/symfony/var/cache/dev</argument>
      <argument>null</argument>
      <call method="addUseStatement">
        <argument>Overblog\GraphQLBundle\Definition\ConfigProcessor</argument>
      </call>
      <call method="addUseStatement">
        <argument>Overblog\GraphQLBundle\Definition\LazyConfig</argument>
      </call>
      <call method="addUseStatement">
        <argument>Overblog\GraphQLBundle\Definition\GlobalVariables</argument>
      </call>
      <call method="addImplement">
        <argument>Overblog\GraphQLBundle\Definition\Type\GeneratedTypeInterface</argument>
      </call>
      <call method="setExpressionLanguage">
        <argument type="service" id="overblog_graphql.expression_language.default"/>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\RequestFilesListener" class="Overblog\GraphQLBundle\EventListener\RequestFilesListener" public="true">
      <tag name="kernel.event_listener" event="graphql.executor.context" method="onExecutorContextEvent"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="overblog_graphql.promise_adapter.default" class="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter" public="false"/>
    <service id="overblog_graphql.react.promise_adapter" class="Overblog\GraphQLBundle\Executor\Promise\Adapter\ReactPromiseAdapter" public="false"/>
    <service id="overblog_graphql.controller.graphql" class="Overblog\GraphQLBundle\Controller\GraphController" public="true">
      <argument type="service" id="overblog_graphql.request_batch_parser"/>
      <argument type="service" id="overblog_graphql.request_executor"/>
      <argument type="service" id="overblog_graphql.request_parser"/>
      <argument>true</argument>
      <argument>relay</argument>
    </service>
    <service id="overblog_graphql.command.dump_schema" class="Overblog\GraphQLBundle\Command\GraphQLDumpSchemaCommand" public="true">
      <tag name="console.command"/>
      <argument>/var/www/symfony/src</argument>
      <call method="setRequestExecutorFactory">
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.request_executor</argument>
          </argument>
        </argument>
      </call>
    </service>
    <service id="overblog_graphql.command.debug" class="Overblog\GraphQLBundle\Command\DebugCommand" public="true">
      <tag name="console.command"/>
      <argument type="service" id="overblog_graphql.type_resolver"/>
      <argument type="service" id="overblog_graphql.mutation_resolver"/>
      <argument type="service" id="overblog_graphql.resolver_resolver"/>
    </service>
    <service id="overblog_graphql.command.compile" class="Overblog\GraphQLBundle\Command\CompileCommand" public="true">
      <tag name="console.command"/>
      <argument type="service" id="overblog_graphql.cache_compiler"/>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor" public="false">
      <call method="addConfigProcessor">
        <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor\PublicFieldsFilterConfigProcessor"/>
        <argument>2048</argument>
      </call>
      <call method="addConfigProcessor">
        <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor\AclConfigProcessor"/>
        <argument>512</argument>
      </call>
      <call method="addConfigProcessor">
        <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor\WrapArgumentConfigProcessor"/>
        <argument>0</argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\GlobalVariables" class="Overblog\GraphQLBundle\Definition\GlobalVariables" public="false">
      <argument type="collection">
        <argument key="container" type="service" id="service_container"/>
        <argument key="typeResolver" type="service" id="overblog_graphql.type_resolver"/>
        <argument key="resolverResolver" type="service" id="overblog_graphql.resolver_resolver"/>
        <argument key="mutationResolver" type="service" id="overblog_graphql.mutation_resolver"/>
      </argument>
    </service>
    <service id="overblog_graphql.definition.string_type" class="GraphQL\Type\Definition\StringType" public="true">
      <tag name="overblog_graphql.type" alias="String"/>
      <factory class="GraphQL\Type\Definition\Type" method="string"/>
    </service>
    <service id="overblog_graphql.definition.int_type" class="GraphQL\Type\Definition\IntType" public="true">
      <tag name="overblog_graphql.type" alias="Int"/>
      <factory class="GraphQL\Type\Definition\Type" method="int"/>
    </service>
    <service id="overblog_graphql.definition.float_type" class="GraphQL\Type\Definition\FloatType" public="true">
      <tag name="overblog_graphql.type" alias="Float"/>
      <factory class="GraphQL\Type\Definition\Type" method="Float"/>
    </service>
    <service id="overblog_graphql.definition.boolean_type" class="GraphQL\Type\Definition\BooleanType" public="true">
      <tag name="overblog_graphql.type" alias="Boolean"/>
      <factory class="GraphQL\Type\Definition\Type" method="boolean"/>
    </service>
    <service id="overblog_graphql.definition.id_type" class="GraphQL\Type\Definition\IDType" public="true">
      <tag name="overblog_graphql.type" alias="ID"/>
      <factory class="GraphQL\Type\Definition\Type" method="id"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" public="false">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="expression_function.parameter_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" public="false">
      <tag name="overblog_graphql.expression_function"/>
      <argument>param</argument>
    </service>
    <service id="expression_function.service_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" public="false">
      <tag name="overblog_graphql.expression_function"/>
      <argument>serv</argument>
    </service>
    <service id="expression_function.mutation_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" public="false">
      <tag name="overblog_graphql.expression_function"/>
      <argument>mut</argument>
    </service>
    <service id="expression_function.resolver_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" public="false">
      <tag name="overblog_graphql.expression_function"/>
      <argument>res</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor\PublicFieldsFilterConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor\PublicFieldsFilterConfigProcessor" public="false">
      <tag name="overblog_graphql.definition_config_processor" priority="2048"/>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor\AclConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor\AclConfigProcessor" public="false">
      <tag name="overblog_graphql.definition_config_processor" priority="512"/>
      <argument type="service" id="overblog_graphql.access_resolver"/>
      <argument>%overblog_graphql.default_resolver%</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor\WrapArgumentConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor\WrapArgumentConfigProcessor" public="false">
      <tag name="overblog_graphql.definition_config_processor"/>
    </service>
    <service id="overblog_graphql.schema_default" class="GraphQL\Type\Schema" public="false">
      <argument>Query</argument>
      <argument>Mutation</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <argument type="collection"/>
      <factory service="overblog_graphql.schema_builder" method="create"/>
    </service>
    <service id="overblog_graphql.error_handler" class="Overblog\GraphQLBundle\Error\ErrorHandler" public="false">
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>Internal server Error</argument>
      <argument type="collection"/>
      <argument>false</argument>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\ErrorHandlerListener" class="Overblog\GraphQLBundle\EventListener\ErrorHandlerListener" public="true">
      <tag name="kernel.event_listener" event="graphql.post_executor" method="onPostExecutor"/>
      <argument type="service" id="overblog_graphql.error_handler"/>
      <argument>false</argument>
      <argument>true</argument>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\ErrorLoggerListener" class="Overblog\GraphQLBundle\EventListener\ErrorLoggerListener" public="true">
      <tag name="kernel.event_listener" event="graphql.error_formatting" method="onErrorFormatting"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\DebugListener" class="Overblog\GraphQLBundle\EventListener\DebugListener">
      <tag name="kernel.event_listener" event="graphql.pre_executor" method="onPreExecutor"/>
      <tag name="kernel.event_listener" event="graphql.post_executor" method="onPostExecutor"/>
    </service>
    <service id="overblog_graphql.event_listener.classloader_listener" class="Overblog\GraphQLBundle\EventListener\ClassLoaderListener" public="true">
      <tag name="kernel.event_listener" event="kernel.request" method="load" priority="255"/>
      <tag name="kernel.event_listener" event="console.command" method="load" priority="255"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="overblog_graphql.cache_compiler"/>
    </service>
    <service id="Overblog\GraphQLBundle\CacheWarmer\CompileCacheWarmer" class="Overblog\GraphQLBundle\CacheWarmer\CompileCacheWarmer">
      <tag name="kernel.cache_warmer" priority="50"/>
      <argument type="service" id="overblog_graphql.cache_compiler"/>
    </service>
    <service id="overblog_graphiql.controller.graphql.endpoint" class="Overblog\GraphiQLBundle\Config\GraphQLEndpoint\RouteResolver" public="false">
      <argument type="service" id="router.default"/>
      <argument type="collection">
        <argument>Overblog\GraphiQLBundle\Config\GraphQLEndpoint\Helpers\OverblogGraphQLBundleEndpointResolver</argument>
        <argument>getByName</argument>
      </argument>
    </service>
    <service id="overblog_graphiql.view.config" class="Overblog\GraphiQLBundle\Config\GraphiQLViewConfig" public="false">
      <argument type="service" id="overblog_graphiql.view.config.javascript_libraries"/>
      <argument>@OverblogGraphiQL/GraphiQL/index.html.twig</argument>
    </service>
    <service id="overblog_graphiql.view.config.javascript_libraries" class="Overblog\GraphiQLBundle\Config\GraphiQLViewJavaScriptLibraries" public="false">
      <argument>0.11</argument>
      <argument>15.6</argument>
      <argument>2.0</argument>
    </service>
    <service id="overblog_graphiql.controller" class="Overblog\GraphiQLBundle\Controller\GraphiQLController" public="true">
      <argument type="service" id="twig"/>
      <argument type="service" id="overblog_graphiql.view.config"/>
      <argument type="service" id="overblog_graphiql.controller.graphql.endpoint"/>
    </service>
    <service id="phpspreadsheet" class="Onurb\Bundle\ExcelBundle\Factory\ExcelFactory" public="true"/>
    <service id="phpexcel" class="Onurb\Bundle\ExcelBundle\Factory\CompatibilityFactory" public="true">
      <argument type="service" id="phpspreadsheet"/>
    </service>
    <service id="lexik_jwt_authentication.check_config_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\CheckConfigCommand" public="true">
      <tag name="console.command" command="lexik:jwt:check-config"/>
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>RS256</argument>
      <call method="setName">
        <argument>lexik:jwt:check-config</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.generate_token_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\GenerateTokenCommand" public="true">
      <tag name="console.command" command="lexik:jwt:generate-token"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <call method="setName">
        <argument>lexik:jwt:generate-token</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider" public="false">
      <argument></argument>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>username</argument>
      <call method="setUserIdentityField">
        <argument>username</argument>
      </call>
      <deprecated>The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.listener" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <call method="setDispatcher">
        <argument type="service" id="debug.event_dispatcher"/>
      </call>
      <deprecated>The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.entry_point" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\EntryPoint\JWTEntryPoint" public="false">
      <deprecated>The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.jwt_manager" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager" public="true">
      <argument type="service" id="lexik_jwt_authentication.encoder.lcobucci"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>username</argument>
      <call method="setUserIdentityField">
        <argument>username</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.key_loader.abstract" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
    </service>
    <service id="lexik_jwt_authentication.key_loader.openssl" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\OpenSSLKeyLoader" public="false">
      <argument></argument>
      <argument></argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <deprecated>The "%service_id%" service is deprecated since version 2.5 and will be removed in 3.0. Use lexik_jwt_authentication.key_loader.raw instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.key_loader.raw" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\RawKeyLoader" public="false">
      <argument>%env(resolve:JWT_SECRET_KEY)%</argument>
      <argument>%env(resolve:JWT_PUBLIC_KEY)%</argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
    </service>
    <service id="lexik_jwt_authentication.encoder.default" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\DefaultEncoder">
      <argument type="service" id="lexik_jwt_authentication.jws_provider.default"/>
    </service>
    <service id="lexik_jwt_authentication.jws_provider.default" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\DefaultJWSProvider" public="false">
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>openssl</argument>
      <argument>RS256</argument>
      <argument>3600</argument>
      <argument>0</argument>
      <deprecated>The "%service_id%" is deprecated since version 2.5 and will be removed in 5.0, use "lexik_jwt_authentication.jws_provider.lcobucci" instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.encoder.lcobucci" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\LcobucciJWTEncoder">
      <argument type="service" id="lexik_jwt_authentication.jws_provider.lcobucci"/>
    </service>
    <service id="lexik_jwt_authentication.jws_provider.lcobucci" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\LcobucciJWSProvider" public="false">
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>openssl</argument>
      <argument>RS256</argument>
      <argument>3600</argument>
      <argument>0</argument>
    </service>
    <service id="lexik_jwt_authentication.handler.authentication_success" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="lexik_jwt_authentication.handler.authentication_failure" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="lexik_jwt_authentication.security.guard.jwt_token_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
    </service>
    <service id="lexik_jwt_authentication.extractor.chain_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor" public="false">
      <argument type="collection">
        <argument type="service" id="lexik_jwt_authentication.extractor.authorization_header_extractor"/>
      </argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.authorization_header_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor">
      <argument>Bearer</argument>
      <argument>Authorization</argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.query_parameter_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.cookie_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\CookieTokenExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.security.jwt_user_provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\User\JWTUserProvider" public="false">
      <argument></argument>
    </service>
    <service id="assoconnect_graphql_mutation_validator.validator" class="AssoConnect\GraphQLMutationValidatorBundle\Validator\MutationValidator" public="true">
      <argument type="service" id="debug.validator"/>
    </service>
    <service id="assoconnect_graphql_mutation_validator.formatter" class="AssoConnect\GraphQLMutationValidatorBundle\Formatter\Formatter" public="false">
      <tag name="kernel.event_listener" event="graphql.error_formatting" method="onErrorFormatting"/>
    </service>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.App\Command\ImportProductCommand" class="App\Command\ImportProductCommand" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Command\ImportProductCommand" class="App\Command\ImportProductCommand" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.App\Command\MigrateCommand" class="App\Command\MigrateCommand" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Command\MigrateCommand" class="App\Command\MigrateCommand" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\Admin\ConfigurationController" class="App\Controller\Admin\ConfigurationController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\Admin\ConfigurationController" class="App\Controller\Admin\ConfigurationController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\Admin\ImportProductController" class="App\Controller\Admin\ImportProductController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\Admin\ImportProductController" class="App\Controller\Admin\ImportProductController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\Admin\ItemsController" class="App\Controller\Admin\ItemsController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\Admin\ItemsController" class="App\Controller\Admin\ItemsController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\Admin\OrderController" class="App\Controller\Admin\OrderController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\Admin\OrderController" class="App\Controller\Admin\OrderController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\Admin\ProductController" class="App\Controller\Admin\ProductController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\Admin\ProductController" class="App\Controller\Admin\ProductController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\Admin\ProductTagController" class="App\Controller\Admin\ProductTagController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\Admin\ProductTagController" class="App\Controller\Admin\ProductTagController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Controller\AdminController" class="App\Controller\AdminController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\AdminController" class="App\Controller\AdminController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\RootController" class="App\Controller\RootController" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\RootController" class="App\Controller\RootController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\RootController" class="App\Controller\RootController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\SecurityController" class="App\Controller\SecurityController" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\SecurityController" class="App\Controller\SecurityController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\SecurityController" class="App\Controller\SecurityController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\FixturesBundle\ORMFixtureInterface.0.App\DataFixtures\AppFixtures" class="App\DataFixtures\AppFixtures" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\DataFixtures\AppFixtures" class="App\DataFixtures\AppFixtures" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\FixturesBundle\ORMFixtureInterface.0.App\DataFixtures\UrlFixture" class="App\DataFixtures\UrlFixture" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\DataFixtures\UrlFixture" class="App\DataFixtures\UrlFixture" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\FixturesBundle\ORMFixtureInterface.0.App\DataFixtures\UserFixture" class="App\DataFixtures\UserFixture" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\DataFixtures\UserFixture" class="App\DataFixtures\UserFixture" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\FixturesBundle\ORMFixtureInterface.0.App\DataFixtures\UserProfileFixtures" class="App\DataFixtures\UserProfileFixtures" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\DataFixtures\UserProfileFixtures" class="App\DataFixtures\UserProfileFixtures" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.App\Form\Type\Image" class="App\Form\Type\Image" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Form\Type\Image" class="App\Form\Type\Image" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.App\Form\Type\MultipleImage" class="App\Form\Type\MultipleImage" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Form\Type\MultipleImage" class="App\Form\Type\MultipleImage" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.App\Form\Type\ShippingType" class="App\Form\Type\ShippingType" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Form\Type\ShippingType" class="App\Form\Type\ShippingType" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\MutationInterface.0.App\GraphQL\Mutation\AuthMutation" class="App\GraphQL\Mutation\AuthMutation" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Mutation\AuthMutation" class="App\GraphQL\Mutation\AuthMutation" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\MutationInterface.0.App\GraphQL\Mutation\BasketMutation" class="App\GraphQL\Mutation\BasketMutation" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Mutation\BasketMutation" class="App\GraphQL\Mutation\BasketMutation" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\MutationInterface.0.App\GraphQL\Mutation\OrderMutation" class="App\GraphQL\Mutation\OrderMutation" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Mutation\OrderMutation" class="App\GraphQL\Mutation\OrderMutation" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\MutationInterface.0.App\GraphQL\Mutation\UserMutation" class="App\GraphQL\Mutation\UserMutation" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Mutation\UserMutation" class="App\GraphQL\Mutation\UserMutation" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\AddressField" class="App\GraphQL\Resolver\AddressField" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\AddressField" class="App\GraphQL\Resolver\AddressField" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\AddressResolver" class="App\GraphQL\Resolver\AddressResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\AddressResolver" class="App\GraphQL\Resolver\AddressResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\AuthAlias" class="App\GraphQL\Resolver\AuthAlias" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\AuthAlias" class="App\GraphQL\Resolver\AuthAlias" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\BannerResolver" class="App\GraphQL\Resolver\BannerResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\BannerResolver" class="App\GraphQL\Resolver\BannerResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\BasketResolver" class="App\GraphQL\Resolver\BasketResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\BasketResolver" class="App\GraphQL\Resolver\BasketResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\CatalogResolver" class="App\GraphQL\Resolver\CatalogResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\CatalogResolver" class="App\GraphQL\Resolver\CatalogResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\ProductFieldResolver" class="App\GraphQL\Resolver\ProductFieldResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\ProductFieldResolver" class="App\GraphQL\Resolver\ProductFieldResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\ProductItemResolver" class="App\GraphQL\Resolver\ProductItemResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\ProductItemResolver" class="App\GraphQL\Resolver\ProductItemResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\ProductResolver" class="App\GraphQL\Resolver\ProductResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\ProductResolver" class="App\GraphQL\Resolver\ProductResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\ProductsFieldsResolver" class="App\GraphQL\Resolver\ProductsFieldsResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\ProductsFieldsResolver" class="App\GraphQL\Resolver\ProductsFieldsResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\SalesResolver" class="App\GraphQL\Resolver\SalesResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\SalesResolver" class="App\GraphQL\Resolver\SalesResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\UserResolver" class="App\GraphQL\Resolver\UserResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\UserResolver" class="App\GraphQL\Resolver\UserResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\UsersOrdersResolver" class="App\GraphQL\Resolver\UsersOrdersResolver" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\UsersOrdersResolver" class="App\GraphQL\Resolver\UsersOrdersResolver" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\BasketBundle\Controller\BasketController" class="App\Lp\BasketBundle\Controller\BasketController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\BasketBundle\Controller\BasketController" class="App\Lp\BasketBundle\Controller\BasketController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\CatalogBundle\Controller\CatalogController" class="App\Lp\CatalogBundle\Controller\CatalogController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\CatalogBundle\Controller\CatalogController" class="App\Lp\CatalogBundle\Controller\CatalogController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\CatalogBundle\Controller\ProductController" class="App\Lp\CatalogBundle\Controller\ProductController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\CatalogBundle\Controller\ProductController" class="App\Lp\CatalogBundle\Controller\ProductController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\CmsBundle\Controller\CmsController" class="App\Lp\CmsBundle\Controller\CmsController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\CmsBundle\Controller\CmsController" class="App\Lp\CmsBundle\Controller\CmsController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\Framework\LpController" class="App\Lp\Framework\LpController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\Framework\LpController" class="App\Lp\Framework\LpController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\ProfileBundle\Controller\ProfileController" class="App\Lp\ProfileBundle\Controller\ProfileController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\ProfileBundle\Controller\ProfileController" class="App\Lp\ProfileBundle\Controller\ProfileController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.App\Lp\UrlsBundle\Controller\UrlController" class="App\Lp\UrlsBundle\Controller\UrlController" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Lp\UrlsBundle\Controller\UrlController" class="App\Lp\UrlsBundle\Controller\UrlController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\AccountRepository" class="App\Repository\AccountRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\AccountRepository" class="App\Repository\AccountRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\AddressRepository" class="App\Repository\AddressRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\AddressRepository" class="App\Repository\AddressRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\BannerRepository" class="App\Repository\BannerRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\BannerRepository" class="App\Repository\BannerRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\BasketItemRepository" class="App\Repository\BasketItemRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\BasketItemRepository" class="App\Repository\BasketItemRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\BasketRepository" class="App\Repository\BasketRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\BasketRepository" class="App\Repository\BasketRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CatalogRepository" class="App\Repository\CatalogRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CatalogRepository" class="App\Repository\CatalogRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CatalogTagItemRepository" class="App\Repository\CatalogTagItemRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CatalogTagItemRepository" class="App\Repository\CatalogTagItemRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CatalogTagItemValueRepository" class="App\Repository\CatalogTagItemValueRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CatalogTagItemValueRepository" class="App\Repository\CatalogTagItemValueRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CatalogTagRepository" class="App\Repository\CatalogTagRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CatalogTagRepository" class="App\Repository\CatalogTagRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CatalogUrlRepository" class="App\Repository\CatalogUrlRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CatalogUrlRepository" class="App\Repository\CatalogUrlRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ConfigurationRepository" class="App\Repository\ConfigurationRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ConfigurationRepository" class="App\Repository\ConfigurationRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\DeliveryRepository" class="App\Repository\DeliveryRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\DeliveryRepository" class="App\Repository\DeliveryRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ImagesRepository" class="App\Repository\ImagesRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ImagesRepository" class="App\Repository\ImagesRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ImportProductRepository" class="App\Repository\ImportProductRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ImportProductRepository" class="App\Repository\ImportProductRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ImportQueueRelationRepository" class="App\Repository\ImportQueueRelationRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ImportQueueRelationRepository" class="App\Repository\ImportQueueRelationRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ImportQueueRepository" class="App\Repository\ImportQueueRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ImportQueueRepository" class="App\Repository\ImportQueueRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ImportRelationRepository" class="App\Repository\ImportRelationRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ImportRelationRepository" class="App\Repository\ImportRelationRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\MenuItemRepository" class="App\Repository\MenuItemRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\MenuItemRepository" class="App\Repository\MenuItemRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\MenuRepository" class="App\Repository\MenuRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\MenuRepository" class="App\Repository\MenuRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\OrderItemRepository" class="App\Repository\OrderItemRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\OrderItemRepository" class="App\Repository\OrderItemRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\OrdersRepository" class="App\Repository\OrdersRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\OrdersRepository" class="App\Repository\OrdersRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\PaymentMethodRepository" class="App\Repository\PaymentMethodRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\PaymentMethodRepository" class="App\Repository\PaymentMethodRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductItemImageRepository" class="App\Repository\ProductItemImageRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductItemImageRepository" class="App\Repository\ProductItemImageRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductItemRepository" class="App\Repository\ProductItemRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductItemRepository" class="App\Repository\ProductItemRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductRepository" class="App\Repository\ProductRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductRepository" class="App\Repository\ProductRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductTagItemRepository" class="App\Repository\ProductTagItemRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductTagItemRepository" class="App\Repository\ProductTagItemRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductTagItemValueRepository" class="App\Repository\ProductTagItemValueRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductTagItemValueRepository" class="App\Repository\ProductTagItemValueRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductTagRepository" class="App\Repository\ProductTagRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductTagRepository" class="App\Repository\ProductTagRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductTagValueRepository" class="App\Repository\ProductTagValueRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductTagValueRepository" class="App\Repository\ProductTagValueRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProductUrlRepository" class="App\Repository\ProductUrlRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProductUrlRepository" class="App\Repository\ProductUrlRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\SaleRepository" class="App\Repository\SaleRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\SaleRepository" class="App\Repository\SaleRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\TagsRepository" class="App\Repository\TagsRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\TagsRepository" class="App\Repository\TagsRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\UrlsRepository" class="App\Repository\UrlsRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\UrlsRepository" class="App\Repository\UrlsRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\UsersRepository" class="App\Repository\UsersRepository" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\UsersRepository" class="App\Repository\UsersRepository" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\BasketService" class="App\Service\BasketService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\BasketService" class="App\Service\BasketService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\BasketService" class="App\Service\BasketService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\BeguService" class="App\Service\BeguService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\BeguService" class="App\Service\BeguService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\BeguService" class="App\Service\BeguService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\ConfigService" class="App\Service\ConfigService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\ConfigService" class="App\Service\ConfigService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\ConfigService" class="App\Service\ConfigService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\DoctrineService" class="App\Service\DoctrineService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\DoctrineService" class="App\Service\DoctrineService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\DoctrineService" class="App\Service\DoctrineService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\Import\Importer" class="App\Service\Import\Importer" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\Import\Importer" class="App\Service\Import\Importer" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\Import\Importer" class="App\Service\Import\Importer" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\ImportParser" class="App\Service\ImportParser" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\ImportParser" class="App\Service\ImportParser" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\ImportParser" class="App\Service\ImportParser" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\LpService" class="App\Service\LpService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\LpService" class="App\Service\LpService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\LpService" class="App\Service\LpService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\Manager\TagManager" class="App\Service\Manager\TagManager" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\Manager\TagManager" class="App\Service\Manager\TagManager" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\Manager\TagManager" class="App\Service\Manager\TagManager" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\OrderService" class="App\Service\OrderService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\OrderService" class="App\Service\OrderService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\OrderService" class="App\Service\OrderService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\TagService" class="App\Service\TagService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\TagService" class="App\Service\TagService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\TagService" class="App\Service\TagService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\Twig\Basket" class="App\Service\Twig\Basket" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\Twig\Basket" class="App\Service\Twig\Basket" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\Twig\Basket" class="App\Service\Twig\Basket" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Service\UrlParseService" class="App\Service\UrlParseService" public="false" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Service\UrlParseService" class="App\Service\UrlParseService" public="false" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Service\UrlParseService" class="App\Service\UrlParseService" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="maker.auto_command.make_auth" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:auth"/>
      <argument type="service" id="maker.maker.make_authenticator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:auth</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_command" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:command"/>
      <argument type="service" id="maker.maker.make_command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:command</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:controller"/>
      <argument type="service" id="maker.maker.make_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:controller</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_crud" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:crud"/>
      <argument type="service" id="maker.maker.make_crud"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:crud</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_entity" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:entity"/>
      <argument type="service" id="maker.maker.make_entity"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:entity</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_fixtures" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:fixtures"/>
      <argument type="service" id="maker.maker.make_fixtures"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:fixtures</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:form"/>
      <argument type="service" id="maker.maker.make_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:form</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_functional_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:functional-test"/>
      <argument type="service" id="maker.maker.make_functional_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:functional-test</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_registration_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:registration-form"/>
      <argument type="service" id="maker.maker.make_registration_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:registration-form</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:serializer:encoder"/>
      <argument type="service" id="maker.maker.make_serializer_encoder"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:serializer:encoder</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:serializer:normalizer"/>
      <argument type="service" id="maker.maker.make_serializer_normalizer"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:serializer:normalizer</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_subscriber" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:subscriber"/>
      <argument type="service" id="maker.maker.make_subscriber"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:subscriber</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_extension" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:twig-extension"/>
      <argument type="service" id="maker.maker.make_twig_extension"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:twig-extension</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_unit_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:unit-test"/>
      <argument type="service" id="maker.maker.make_unit_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:unit-test</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_validator" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:validator"/>
      <argument type="service" id="maker.maker.make_validator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:validator</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_voter" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:voter"/>
      <argument type="service" id="maker.maker.make_voter"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:voter</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_user" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:user"/>
      <argument type="service" id="maker.maker.make_user"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:user</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_migration" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" public="false">
      <tag name="console.command" command="make:migration"/>
      <argument type="service" id="maker.maker.make_migration"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <call method="setName">
        <argument>make:migration</argument>
      </call>
    </service>
    <service id=".service_locator.ypl2DZZ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authenticationUtils" type="service" id="security.authentication_utils"/>
      </argument>
    </service>
    <service id=".service_locator.5IVKRU1" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="args" type="service" id=".errored..service_locator.5IVKRU1.Overblog\GraphQLBundle\Definition\Argument"/>
      </argument>
    </service>
    <service id=".service_locator.hjI4Dm4" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Controller\SecurityController::login" type="service" id=".service_locator.ypl2DZZ"/>
        <argument key="App\Service\UrlParseService::parse" type="service" id=".service_locator.5IVKRU1"/>
        <argument key="App\Controller\SecurityController:login" type="service" id=".service_locator.ypl2DZZ"/>
        <argument key="App\Service\UrlParseService:parse" type="service" id=".service_locator.5IVKRU1"/>
      </argument>
    </service>
    <service id=".service_locator.yQVjGlt" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="translation.loader.csv" type="service" id="translation.loader.csv"/>
        <argument key="translation.loader.dat" type="service" id="translation.loader.dat"/>
        <argument key="translation.loader.ini" type="service" id="translation.loader.ini"/>
        <argument key="translation.loader.json" type="service" id="translation.loader.json"/>
        <argument key="translation.loader.mo" type="service" id="translation.loader.mo"/>
        <argument key="translation.loader.php" type="service" id="translation.loader.php"/>
        <argument key="translation.loader.po" type="service" id="translation.loader.po"/>
        <argument key="translation.loader.qt" type="service" id="translation.loader.qt"/>
        <argument key="translation.loader.res" type="service" id="translation.loader.res"/>
        <argument key="translation.loader.xliff" type="service" id="translation.loader.xliff"/>
        <argument key="translation.loader.yml" type="service" id="translation.loader.yml"/>
      </argument>
    </service>
    <service id=".service_locator.gmwRZ3h" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id="debug.argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="100"/>
      <argument type="service" id="debug.argument_resolver.request_attribute.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="50"/>
      <argument type="service" id="debug.argument_resolver.request.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="50"/>
      <argument type="service" id="debug.argument_resolver.session.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.security.user_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="40"/>
      <argument type="service" id="debug.security.user_value_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="-50"/>
      <argument type="service" id="debug.argument_resolver.service.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="-100"/>
      <argument type="service" id="debug.argument_resolver.default.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <tag name="controller.argument_value_resolver" priority="-150"/>
      <argument type="service" id="debug.argument_resolver.variadic.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".service_locator.xySqgao" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Form\Type\Image" type="service" id="App\Form\Type\Image"/>
        <argument key="App\Form\Type\MultipleImage" type="service" id="App\Form\Type\MultipleImage"/>
        <argument key="App\Form\Type\ShippingType" type="service" id="App\Form\Type\ShippingType"/>
        <argument key="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminAutocompleteType" type="service" id="easyadmin.form.type.autocomplete"/>
        <argument key="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminDividerType" type="service" id="easyadmin.form.type.divider"/>
        <argument key="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminFormType" type="service" id="easyadmin.form.type"/>
        <argument key="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminGroupType" type="service" id="easyadmin.form.type.group"/>
        <argument key="EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminSectionType" type="service" id="easyadmin.form.type.section"/>
        <argument key="Symfony\Bridge\Doctrine\Form\Type\EntityType" type="service" id="form.type.entity"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\ChoiceType" type="service" id="form.type.choice"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="service" id="form.type.form"/>
        <argument key="Vich\UploaderBundle\Form\Type\VichFileType" type="service" id="vich_uploader.form.type.file"/>
        <argument key="Vich\UploaderBundle\Form\Type\VichImageType" type="service" id="vich_uploader.form.type.image"/>
      </argument>
    </service>
    <service id=".service_locator.cfEy9_N" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Repository\AccountRepository" type="service" id="App\Repository\AccountRepository"/>
        <argument key="App\Repository\AddressRepository" type="service" id="App\Repository\AddressRepository"/>
        <argument key="App\Repository\BannerRepository" type="service" id="App\Repository\BannerRepository"/>
        <argument key="App\Repository\BasketItemRepository" type="service" id="App\Repository\BasketItemRepository"/>
        <argument key="App\Repository\BasketRepository" type="service" id="App\Repository\BasketRepository"/>
        <argument key="App\Repository\CatalogRepository" type="service" id="App\Repository\CatalogRepository"/>
        <argument key="App\Repository\CatalogTagItemRepository" type="service" id="App\Repository\CatalogTagItemRepository"/>
        <argument key="App\Repository\CatalogTagItemValueRepository" type="service" id="App\Repository\CatalogTagItemValueRepository"/>
        <argument key="App\Repository\CatalogTagRepository" type="service" id="App\Repository\CatalogTagRepository"/>
        <argument key="App\Repository\CatalogUrlRepository" type="service" id="App\Repository\CatalogUrlRepository"/>
        <argument key="App\Repository\ConfigurationRepository" type="service" id="App\Repository\ConfigurationRepository"/>
        <argument key="App\Repository\DeliveryRepository" type="service" id="App\Repository\DeliveryRepository"/>
        <argument key="App\Repository\ImagesRepository" type="service" id="App\Repository\ImagesRepository"/>
        <argument key="App\Repository\ImportProductRepository" type="service" id="App\Repository\ImportProductRepository"/>
        <argument key="App\Repository\ImportQueueRelationRepository" type="service" id="App\Repository\ImportQueueRelationRepository"/>
        <argument key="App\Repository\ImportQueueRepository" type="service" id="App\Repository\ImportQueueRepository"/>
        <argument key="App\Repository\ImportRelationRepository" type="service" id="App\Repository\ImportRelationRepository"/>
        <argument key="App\Repository\MenuItemRepository" type="service" id="App\Repository\MenuItemRepository"/>
        <argument key="App\Repository\MenuRepository" type="service" id="App\Repository\MenuRepository"/>
        <argument key="App\Repository\OrderItemRepository" type="service" id="App\Repository\OrderItemRepository"/>
        <argument key="App\Repository\OrdersRepository" type="service" id="App\Repository\OrdersRepository"/>
        <argument key="App\Repository\PaymentMethodRepository" type="service" id="App\Repository\PaymentMethodRepository"/>
        <argument key="App\Repository\ProductItemImageRepository" type="service" id="App\Repository\ProductItemImageRepository"/>
        <argument key="App\Repository\ProductItemRepository" type="service" id="App\Repository\ProductItemRepository"/>
        <argument key="App\Repository\ProductRepository" type="service" id="App\Repository\ProductRepository"/>
        <argument key="App\Repository\ProductTagItemRepository" type="service" id="App\Repository\ProductTagItemRepository"/>
        <argument key="App\Repository\ProductTagItemValueRepository" type="service" id="App\Repository\ProductTagItemValueRepository"/>
        <argument key="App\Repository\ProductTagRepository" type="service" id="App\Repository\ProductTagRepository"/>
        <argument key="App\Repository\ProductTagValueRepository" type="service" id="App\Repository\ProductTagValueRepository"/>
        <argument key="App\Repository\ProductUrlRepository" type="service" id="App\Repository\ProductUrlRepository"/>
        <argument key="App\Repository\SaleRepository" type="service" id="App\Repository\SaleRepository"/>
        <argument key="App\Repository\TagsRepository" type="service" id="App\Repository\TagsRepository"/>
        <argument key="App\Repository\UrlsRepository" type="service" id="App\Repository\UrlsRepository"/>
        <argument key="App\Repository\UsersRepository" type="service" id="App\Repository\UsersRepository"/>
      </argument>
    </service>
    <service id="security.logout.handler.csrf_token_clearing" class="Symfony\Component\Security\Http\Logout\CsrfTokenClearingLogoutHandler" public="false">
      <argument type="service" id="security.csrf.token_storage"/>
    </service>
    <service id="monolog.logger.request" class="Symfony\Bridge\Monolog\Logger">
      <argument>request</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.console" class="Symfony\Bridge\Monolog\Logger">
      <argument>console</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.cache" class="Symfony\Bridge\Monolog\Logger">
      <argument>cache</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.translation" class="Symfony\Bridge\Monolog\Logger">
      <argument>translation</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.profiler" class="Symfony\Bridge\Monolog\Logger">
      <argument>profiler</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.php" class="Symfony\Bridge\Monolog\Logger">
      <argument>php</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.event" class="Symfony\Bridge\Monolog\Logger">
      <argument>event</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.null_internal"/>
      </call>
    </service>
    <service id="monolog.logger.router" class="Symfony\Bridge\Monolog\Logger">
      <argument>router</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.doctrine" class="Symfony\Bridge\Monolog\Logger">
      <argument>doctrine</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.security" class="Symfony\Bridge\Monolog\Logger">
      <argument>security</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.debug" class="Symfony\Bridge\Monolog\Logger">
      <argument>debug</argument>
      <call method="pushProcessor">
        <argument type="service" id="debug.log_processor"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.handler.null_internal" class="Monolog\Handler\NullHandler"/>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_mutation_field" method="__invoke"/>
      <argument type="service" id="overblog_graphql.promise_adapter.default"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_node_field" method="__invoke"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_plural_identifying_field" method="__invoke"/>
      <argument type="service" id="overblog_graphql.promise_adapter.default"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" public="true" autowire="true">
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_globalid_field" method="__invoke"/>
    </service>
    <service id=".service_locator.ychIlgF" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine" type="service" id="doctrine" on-invalid="ignore"/>
        <argument key="form.factory" type="service" id="form.factory" on-invalid="ignore"/>
        <argument key="http_kernel" type="service" id="http_kernel" on-invalid="ignore"/>
        <argument key="parameter_bag" type="service" id="parameter_bag" on-invalid="ignore"/>
        <argument key="request_stack" type="service" id="request_stack" on-invalid="ignore"/>
        <argument key="router" type="service" id="router.default" on-invalid="ignore"/>
        <argument key="security.authorization_checker" type="service" id="security.authorization_checker" on-invalid="ignore"/>
        <argument key="security.csrf.token_manager" type="service" id="security.csrf.token_manager" on-invalid="ignore"/>
        <argument key="security.token_storage" type="service" id="security.token_storage" on-invalid="ignore"/>
        <argument key="serializer" type="service" id="serializer" on-invalid="ignore"/>
        <argument key="session" type="service" id="session" on-invalid="ignore"/>
        <argument key="twig" type="service" id="twig" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.ychIlgF.App\Controller\RootController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\RootController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Controller\SecurityController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\SecurityController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\BasketService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\BasketService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\BeguService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\BeguService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\ConfigService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\ConfigService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\DoctrineService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\DoctrineService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\Import\Importer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\Import\Importer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\ImportParser" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\ImportParser</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\LpService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\LpService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\Manager\TagManager" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\Manager\TagManager</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\OrderService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\OrderService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\TagService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\TagService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\Twig\Basket" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\Twig\Basket</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.ychIlgF.App\Service\UrlParseService" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Service\UrlParseService</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.ychIlgF" method="withContext"/>
    </service>
    <service id=".service_locator.3nNxzEJ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="translator" type="service" id="translator.data_collector"/>
      </argument>
    </service>
    <service id=".service_locator.3nNxzEJ.translation.warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>translation.warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.3nNxzEJ" method="withContext"/>
    </service>
    <service id=".service_locator.oNnsU_h" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.oNnsU_h.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.oNnsU_h" method="withContext"/>
    </service>
    <service id=".service_locator.tdKlFgs" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.tdKlFgs.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.tdKlFgs" method="withContext"/>
    </service>
    <service id=".service_locator.UEpceA5" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="twig" type="service" id="twig"/>
      </argument>
    </service>
    <service id=".service_locator.UEpceA5.twig.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>twig.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.UEpceA5" method="withContext"/>
    </service>
    <service id=".service_locator.UEpceA5.twig.template_cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>twig.template_cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.UEpceA5" method="withContext"/>
    </service>
    <service id="debug.validator.inner" class="Symfony\Component\Validator\Validator\ValidatorInterface" public="false">
      <factory service="validator.builder" method="getValidator"/>
    </service>
    <service id="debug.event_dispatcher.inner" class="Symfony\Component\EventDispatcher\EventDispatcher" public="false"/>
    <service id="debug.controller_resolver.inner" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
      <argument type="service" id="service_container"/>
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
    </service>
    <service id="debug.argument_resolver.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver" public="false">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="debug.argument_resolver.request_attribute"/>
        <argument type="service" id="debug.argument_resolver.request"/>
        <argument type="service" id="debug.argument_resolver.session"/>
        <argument type="service" id="debug.security.user_value_resolver"/>
        <argument type="service" id="debug.argument_resolver.service"/>
        <argument type="service" id="debug.argument_resolver.default"/>
        <argument type="service" id="debug.argument_resolver.variadic"/>
      </argument>
    </service>
    <service id="debug.security.access.decision_manager.inner" class="Symfony\Component\Security\Core\Authorization\AccessDecisionManager" public="false">
      <argument type="iterator">
        <argument type="service" id="security.access.authenticated_voter"/>
        <argument type="service" id="security.access.simple_role_voter"/>
        <argument type="service" id="security.access.expression_voter"/>
      </argument>
      <argument>affirmative</argument>
      <argument>false</argument>
      <argument>true</argument>
    </service>
    <service id="debug.argument_resolver.request_attribute.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" public="false"/>
    <service id="debug.argument_resolver.request.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" public="false"/>
    <service id="debug.argument_resolver.session.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" public="false"/>
    <service id="debug.security.user_value_resolver.inner" class="Symfony\Component\Security\Http\Controller\UserValueResolver" public="false">
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="debug.argument_resolver.service.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" public="false">
      <argument type="service" id=".service_locator.hjI4Dm4"/>
    </service>
    <service id="debug.argument_resolver.default.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" public="false"/>
    <service id="debug.argument_resolver.variadic.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" public="false"/>
    <service id=".errored..service_locator.5IVKRU1.Overblog\GraphQLBundle\Definition\Argument" class="Overblog\GraphQLBundle\Definition\Argument"/>
    <service id=".service_locator.HKoUR8q" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator" type="service" id="doctrine.orm.validator.unique"/>
        <argument key="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator" type="service" id="security.validator.user_password"/>
        <argument key="Symfony\Component\Validator\Constraints\EmailValidator" type="service" id="validator.email"/>
        <argument key="Symfony\Component\Validator\Constraints\ExpressionValidator" type="service" id="validator.expression"/>
        <argument key="doctrine.orm.validator.unique" type="service" id="doctrine.orm.validator.unique"/>
        <argument key="security.validator.user_password" type="service" id="security.validator.user_password"/>
        <argument key="validator.expression" type="service" id="validator.expression"/>
      </argument>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <argument type="service" id=".service_locator.1Ki_a13"/>
      <argument type="collection">
        <argument key="lp:productimport">App\Command\ImportProductCommand</argument>
        <argument key="lp:migrate">App\Command\MigrateCommand</argument>
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="debug:translation">console.command.translation_debug</argument>
        <argument key="translation:update">console.command.translation_update</argument>
        <argument key="lint:xliff">console.command.xliff_lint</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="debug:form">console.command.form_debug</argument>
        <argument key="doctrine:database:create">doctrine.database_create_command</argument>
        <argument key="doctrine:database:drop">doctrine.database_drop_command</argument>
        <argument key="doctrine:generate:entities">doctrine.generate_entities_command</argument>
        <argument key="doctrine:query:sql">doctrine.query_sql_command</argument>
        <argument key="doctrine:cache:clear-metadata">doctrine.cache_clear_metadata_command</argument>
        <argument key="doctrine:cache:clear-query">doctrine.cache_clear_query_cache_command</argument>
        <argument key="doctrine:cache:clear-result">doctrine.cache_clear_result_command</argument>
        <argument key="doctrine:cache:clear-collection-region">doctrine.cache_collection_region_command</argument>
        <argument key="doctrine:mapping:convert">doctrine.mapping_convert_command</argument>
        <argument key="doctrine:schema:create">doctrine.schema_create_command</argument>
        <argument key="doctrine:schema:drop">doctrine.schema_drop_command</argument>
        <argument key="doctrine:ensure-production-settings">doctrine.ensure_production_settings_command</argument>
        <argument key="doctrine:cache:clear-entity-region">doctrine.clear_entity_region_command</argument>
        <argument key="doctrine:database:import">doctrine.database_import_command</argument>
        <argument key="doctrine:mapping:info">doctrine.mapping_info_command</argument>
        <argument key="doctrine:cache:clear-query-region">doctrine.clear_query_region_command</argument>
        <argument key="doctrine:query:dql">doctrine.query_dql_command</argument>
        <argument key="doctrine:schema:update">doctrine.schema_update_command</argument>
        <argument key="doctrine:schema:validate">doctrine.schema_validate_command</argument>
        <argument key="doctrine:mapping:import">doctrine.mapping_import_command</argument>
        <argument key="security:encode-password">security.command.user_password_encoder</argument>
        <argument key="debug:swiftmailer">swiftmailer.command.debug</argument>
        <argument key="swiftmailer:email:send">swiftmailer.command.new_email</argument>
        <argument key="swiftmailer:spool:send">swiftmailer.command.send_email</argument>
        <argument key="debug:twig">twig.command.debug</argument>
        <argument key="lint:twig">twig.command.lint</argument>
        <argument key="server:dump">var_dumper.command.server_dump</argument>
        <argument key="server:run">web_server.command.server_run</argument>
        <argument key="server:start">web_server.command.server_start</argument>
        <argument key="server:stop">web_server.command.server_stop</argument>
        <argument key="server:status">web_server.command.server_status</argument>
        <argument key="server:log">web_server.command.server_log</argument>
        <argument key="doctrine:fixtures:load">doctrine.fixtures_load_command</argument>
        <argument key="vich:mapping:debug-class">vich_uploader.command.mapping_debug_class</argument>
        <argument key="vich:mapping:debug">vich_uploader.command.mapping_debug</argument>
        <argument key="vich:mapping:list-classes">vich_uploader.command.mapping_list_classes</argument>
        <argument key="lexik:jwt:check-config">lexik_jwt_authentication.check_config_command</argument>
        <argument key="lexik:jwt:generate-token">lexik_jwt_authentication.generate_token_command</argument>
        <argument key="make:auth">maker.auto_command.make_auth</argument>
        <argument key="make:command">maker.auto_command.make_command</argument>
        <argument key="make:controller">maker.auto_command.make_controller</argument>
        <argument key="make:crud">maker.auto_command.make_crud</argument>
        <argument key="make:entity">maker.auto_command.make_entity</argument>
        <argument key="make:fixtures">maker.auto_command.make_fixtures</argument>
        <argument key="make:form">maker.auto_command.make_form</argument>
        <argument key="make:functional-test">maker.auto_command.make_functional_test</argument>
        <argument key="make:registration-form">maker.auto_command.make_registration_form</argument>
        <argument key="make:serializer:encoder">maker.auto_command.make_serializer_encoder</argument>
        <argument key="make:serializer:normalizer">maker.auto_command.make_serializer_normalizer</argument>
        <argument key="make:subscriber">maker.auto_command.make_subscriber</argument>
        <argument key="make:twig-extension">maker.auto_command.make_twig_extension</argument>
        <argument key="make:unit-test">maker.auto_command.make_unit_test</argument>
        <argument key="make:validator">maker.auto_command.make_validator</argument>
        <argument key="make:voter">maker.auto_command.make_voter</argument>
        <argument key="make:user">maker.auto_command.make_user</argument>
        <argument key="make:migration">maker.auto_command.make_migration</argument>
      </argument>
    </service>
    <service id=".service_locator.1Ki_a13" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Command\ImportProductCommand" type="service" id="App\Command\ImportProductCommand"/>
        <argument key="App\Command\MigrateCommand" type="service" id="App\Command\MigrateCommand"/>
        <argument key="console.command.about" type="service" id="console.command.about"/>
        <argument key="console.command.assets_install" type="service" id="console.command.assets_install"/>
        <argument key="console.command.cache_clear" type="service" id="console.command.cache_clear"/>
        <argument key="console.command.cache_pool_clear" type="service" id="console.command.cache_pool_clear"/>
        <argument key="console.command.cache_pool_delete" type="service" id="console.command.cache_pool_delete"/>
        <argument key="console.command.cache_pool_prune" type="service" id="console.command.cache_pool_prune"/>
        <argument key="console.command.cache_warmup" type="service" id="console.command.cache_warmup"/>
        <argument key="console.command.config_debug" type="service" id="console.command.config_debug"/>
        <argument key="console.command.config_dump_reference" type="service" id="console.command.config_dump_reference"/>
        <argument key="console.command.container_debug" type="service" id="console.command.container_debug"/>
        <argument key="console.command.debug_autowiring" type="service" id="console.command.debug_autowiring"/>
        <argument key="console.command.event_dispatcher_debug" type="service" id="console.command.event_dispatcher_debug"/>
        <argument key="console.command.form_debug" type="service" id="console.command.form_debug"/>
        <argument key="console.command.router_debug" type="service" id="console.command.router_debug"/>
        <argument key="console.command.router_match" type="service" id="console.command.router_match"/>
        <argument key="console.command.translation_debug" type="service" id="console.command.translation_debug"/>
        <argument key="console.command.translation_update" type="service" id="console.command.translation_update"/>
        <argument key="console.command.xliff_lint" type="service" id="console.command.xliff_lint"/>
        <argument key="console.command.yaml_lint" type="service" id="console.command.yaml_lint"/>
        <argument key="doctrine.cache_clear_metadata_command" type="service" id="doctrine.cache_clear_metadata_command"/>
        <argument key="doctrine.cache_clear_query_cache_command" type="service" id="doctrine.cache_clear_query_cache_command"/>
        <argument key="doctrine.cache_clear_result_command" type="service" id="doctrine.cache_clear_result_command"/>
        <argument key="doctrine.cache_collection_region_command" type="service" id="doctrine.cache_collection_region_command"/>
        <argument key="doctrine.clear_entity_region_command" type="service" id="doctrine.clear_entity_region_command"/>
        <argument key="doctrine.clear_query_region_command" type="service" id="doctrine.clear_query_region_command"/>
        <argument key="doctrine.database_create_command" type="service" id="doctrine.database_create_command"/>
        <argument key="doctrine.database_drop_command" type="service" id="doctrine.database_drop_command"/>
        <argument key="doctrine.database_import_command" type="service" id="doctrine.database_import_command"/>
        <argument key="doctrine.ensure_production_settings_command" type="service" id="doctrine.ensure_production_settings_command"/>
        <argument key="doctrine.fixtures_load_command" type="service" id="doctrine.fixtures_load_command"/>
        <argument key="doctrine.generate_entities_command" type="service" id="doctrine.generate_entities_command"/>
        <argument key="doctrine.mapping_convert_command" type="service" id="doctrine.mapping_convert_command"/>
        <argument key="doctrine.mapping_import_command" type="service" id="doctrine.mapping_import_command"/>
        <argument key="doctrine.mapping_info_command" type="service" id="doctrine.mapping_info_command"/>
        <argument key="doctrine.query_dql_command" type="service" id="doctrine.query_dql_command"/>
        <argument key="doctrine.query_sql_command" type="service" id="doctrine.query_sql_command"/>
        <argument key="doctrine.schema_create_command" type="service" id="doctrine.schema_create_command"/>
        <argument key="doctrine.schema_drop_command" type="service" id="doctrine.schema_drop_command"/>
        <argument key="doctrine.schema_update_command" type="service" id="doctrine.schema_update_command"/>
        <argument key="doctrine.schema_validate_command" type="service" id="doctrine.schema_validate_command"/>
        <argument key="lexik_jwt_authentication.check_config_command" type="service" id="lexik_jwt_authentication.check_config_command"/>
        <argument key="lexik_jwt_authentication.generate_token_command" type="service" id="lexik_jwt_authentication.generate_token_command"/>
        <argument key="maker.auto_command.make_auth" type="service" id="maker.auto_command.make_auth"/>
        <argument key="maker.auto_command.make_command" type="service" id="maker.auto_command.make_command"/>
        <argument key="maker.auto_command.make_controller" type="service" id="maker.auto_command.make_controller"/>
        <argument key="maker.auto_command.make_crud" type="service" id="maker.auto_command.make_crud"/>
        <argument key="maker.auto_command.make_entity" type="service" id="maker.auto_command.make_entity"/>
        <argument key="maker.auto_command.make_fixtures" type="service" id="maker.auto_command.make_fixtures"/>
        <argument key="maker.auto_command.make_form" type="service" id="maker.auto_command.make_form"/>
        <argument key="maker.auto_command.make_functional_test" type="service" id="maker.auto_command.make_functional_test"/>
        <argument key="maker.auto_command.make_migration" type="service" id="maker.auto_command.make_migration"/>
        <argument key="maker.auto_command.make_registration_form" type="service" id="maker.auto_command.make_registration_form"/>
        <argument key="maker.auto_command.make_serializer_encoder" type="service" id="maker.auto_command.make_serializer_encoder"/>
        <argument key="maker.auto_command.make_serializer_normalizer" type="service" id="maker.auto_command.make_serializer_normalizer"/>
        <argument key="maker.auto_command.make_subscriber" type="service" id="maker.auto_command.make_subscriber"/>
        <argument key="maker.auto_command.make_twig_extension" type="service" id="maker.auto_command.make_twig_extension"/>
        <argument key="maker.auto_command.make_unit_test" type="service" id="maker.auto_command.make_unit_test"/>
        <argument key="maker.auto_command.make_user" type="service" id="maker.auto_command.make_user"/>
        <argument key="maker.auto_command.make_validator" type="service" id="maker.auto_command.make_validator"/>
        <argument key="maker.auto_command.make_voter" type="service" id="maker.auto_command.make_voter"/>
        <argument key="security.command.user_password_encoder" type="service" id="security.command.user_password_encoder"/>
        <argument key="swiftmailer.command.debug" type="service" id="swiftmailer.command.debug"/>
        <argument key="swiftmailer.command.new_email" type="service" id="swiftmailer.command.new_email"/>
        <argument key="swiftmailer.command.send_email" type="service" id="swiftmailer.command.send_email"/>
        <argument key="twig.command.debug" type="service" id="twig.command.debug"/>
        <argument key="twig.command.lint" type="service" id="twig.command.lint"/>
        <argument key="var_dumper.command.server_dump" type="service" id="var_dumper.command.server_dump"/>
        <argument key="vich_uploader.command.mapping_debug" type="service" id="vich_uploader.command.mapping_debug"/>
        <argument key="vich_uploader.command.mapping_debug_class" type="service" id="vich_uploader.command.mapping_debug_class"/>
        <argument key="vich_uploader.command.mapping_list_classes" type="service" id="vich_uploader.command.mapping_list_classes"/>
        <argument key="web_server.command.server_log" type="service" id="web_server.command.server_log"/>
        <argument key="web_server.command.server_run" type="service" id="web_server.command.server_run"/>
        <argument key="web_server.command.server_start" type="service" id="web_server.command.server_start"/>
        <argument key="web_server.command.server_status" type="service" id="web_server.command.server_status"/>
        <argument key="web_server.command.server_stop" type="service" id="web_server.command.server_stop"/>
      </argument>
    </service>
    <service id="cache.app.recorder_inner" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false">
      <argument>1sGhzchoOt</argument>
      <argument>0</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.system.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <argument>d1srnbdUSx</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <argument>-kObdeJ+QJ</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <argument>zv+8GSbTe9</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <argument>grZEzMqNUP</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.security_expression_language.recorder_inner" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <argument>+oxPAH45zq</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/symfony/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id=".service_locator.uxa.tru" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Twig\Extension\CsrfRuntime" type="service" id="twig.runtime.security_csrf"/>
        <argument key="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" type="service" id="twig.runtime.httpkernel"/>
        <argument key="Symfony\Component\Form\FormRenderer" type="service" id="twig.form.renderer"/>
      </argument>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\QueryType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Query" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\DateTimeType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="DateTime" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\DateTimeType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\UserType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="User" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\AuthorizedUserType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="AuthorizedUser" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AuthorizedUserType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\createOrderInputType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="createOrderInput" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\createOrderInputType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\SaleType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Sale" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\SaleType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\SaleItemType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="SaleItem" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\SaleItemType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\AddressConnectionType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="AddressConnection" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressConnectionType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ProductConnectionType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="ProductConnection" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductConnectionType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\BannerType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Banner" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BannerType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\BannerItemType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="BannerItem" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BannerItemType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\UsersOrdersType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="UsersOrders" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UsersOrdersType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\UserOrderType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="UserOrder" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserOrderType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\OrderItemType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="OrderItem" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\OrderItemType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\AddressesType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Addresses" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressesType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\AddBasketInputType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="AddBasketInput" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddBasketInputType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ProductItemType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="ProductItem" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductItemType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ProductType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Product" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ProductFiltersType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="ProductFilters" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductFiltersType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\AddressType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Address" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ItemConnectionType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="ItemConnection" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ItemConnectionType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\BasketType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Basket" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BasketType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\BasketProductType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="BasketProduct" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\BasketProductType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\UpdateBasketInputType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="UpdateBasketInput" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UpdateBasketInputType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\UserInputType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="UserInput" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\UserInputType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\CatalogType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Catalog" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFiltersType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="CatalogFilters" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFiltersType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFilterItemType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="CatalogFilterItem" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\CatalogFilterItemType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\MutationType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Mutation" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\MutationType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\OrderType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="Order" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\OrderType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="PageInfo" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\AddressEdgeType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="AddressEdge" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\AddressEdgeType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ProductEdgeType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="ProductEdge" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ProductEdgeType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ItemEdgeType" class="GraphQL\Type\Definition\Type" public="true">
      <tag name="overblog_graphql.type" alias="ItemEdge" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ItemEdgeType</argument>
      <factory service="overblog_graphql.type_factory" method="create"/>
    </service>
    <service id="Psr\Container\ContainerInterface" alias="service_container" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface" alias="service_container" public="false"/>
    <service id="Doctrine\ORM\EntityManager" alias="doctrine.orm.default_entity_manager" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher" public="false"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel" public="false"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack" public="false"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel" public="false"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem" public="false"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator" public="false"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app" public="false"/>
    <service id="Psr\SimpleCache\CacheInterface" alias="cache.app.simple" public="false"/>
    <service id="Symfony\Component\Cache\Adapter\AdapterInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Component\Translation\TranslatorInterface" alias="translator.data_collector" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" alias="session" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" alias="session.storage.native" public="false"/>
    <service id="SessionHandlerInterface" alias="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface" alias="session.flash_bag" public="false"/>
    <service id="session.storage.filesystem" alias="session.storage.mock_file" public="false"/>
    <service id="session.storage" alias="session.storage.native"/>
    <service id="session.handler" alias="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler"/>
    <service id="Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface" alias="security.csrf.token_generator" public="false"/>
    <service id="Symfony\Component\Security\Csrf\TokenStorage\TokenStorageInterface" alias="security.csrf.token_storage" public="false"/>
    <service id="Symfony\Component\Security\Csrf\CsrfTokenManagerInterface" alias="security.csrf.token_manager" public="false"/>
    <service id="Symfony\Component\Form\ResolvedFormTypeFactoryInterface" alias="form.resolved_type_factory" public="false"/>
    <service id="Symfony\Component\Form\FormRegistryInterface" alias="form.registry" public="false"/>
    <service id="Symfony\Component\Form\FormFactoryInterface" alias="form.factory" public="false"/>
    <service id="form.property_accessor" alias="property_accessor" public="false"/>
    <service id="form.choice_list_factory" alias="form.choice_list_factory.cached" public="false"/>
    <service id="Symfony\Component\Asset\Packages" alias="assets.packages" public="false"/>
    <service id="Symfony\Component\Validator\Validator\ValidatorInterface" alias="debug.validator" public="false"/>
    <service id="validator.mapping.class_metadata_factory" alias="debug.validator" public="false"/>
    <service id="Symfony\Component\Translation\Reader\TranslationReaderInterface" alias="translation.reader" public="false"/>
    <service id="Symfony\Component\Translation\Extractor\ExtractorInterface" alias="translation.extractor" public="false"/>
    <service id="Symfony\Component\Translation\Writer\TranslationWriterInterface" alias="translation.writer" public="false"/>
    <service id="translator" alias="translator.data_collector" public="true"/>
    <service id="translator.formatter" alias="translator.formatter.default" public="false"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC" public="false"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX" public="false"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter" public="false"/>
    <service id="Symfony\Component\Stopwatch\Stopwatch" alias="debug.stopwatch" public="false"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context" public="false"/>
    <service id="annotation_reader" alias="annotations.cached_reader"/>
    <service id="Doctrine\Common\Annotations\Reader" alias="annotations.cached_reader" public="false"/>
    <service id="Symfony\Component\PropertyAccess\PropertyAccessorInterface" alias="property_accessor" public="false"/>
    <service id="Symfony\Component\Serializer\SerializerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\NormalizerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\DenormalizerInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Encoder\EncoderInterface" alias="serializer" public="false"/>
    <service id="Symfony\Component\Serializer\Encoder\DecoderInterface" alias="serializer" public="false"/>
    <service id="serializer.property_accessor" alias="property_accessor" public="false"/>
    <service id="Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface" alias="serializer.mapping.class_discriminator_resolver" public="false"/>
    <service id="Symfony\Component\Serializer\Normalizer\ObjectNormalizer" alias="serializer.normalizer.object" public="false"/>
    <service id="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface" alias="serializer.mapping.class_metadata_factory" public="false"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface" alias="property_info" public="false"/>
    <service id="sensio_framework_extra.converter.doctrine.orm.expression_language" alias="sensio_framework_extra.converter.doctrine.orm.expression_language.default" public="false"/>
    <service id="sensio_framework_extra.security.expression_language" alias="sensio_framework_extra.security.expression_language.default" public="false"/>
    <service id="Doctrine\DBAL\Driver\Connection" alias="doctrine.dbal.default_connection" public="false"/>
    <service id="Doctrine\DBAL\Connection" alias="doctrine.dbal.default_connection" public="false"/>
    <service id="Doctrine\Common\Persistence\ManagerRegistry" alias="doctrine" public="false"/>
    <service id="Symfony\Bridge\Doctrine\RegistryInterface" alias="doctrine" public="false"/>
    <service id="database_connection" alias="doctrine.dbal.default_connection" public="true"/>
    <service id="doctrine.dbal.event_manager" alias="doctrine.dbal.default_connection.event_manager" public="false"/>
    <service id="Doctrine\Common\Persistence\ObjectManager" alias="doctrine.orm.default_entity_manager" public="false"/>
    <service id="Doctrine\ORM\EntityManagerInterface" alias="doctrine.orm.default_entity_manager" public="false"/>
    <service id="doctrine.orm.metadata.annotation_reader" alias="annotations.cached_reader" public="false"/>
    <service id="doctrine.orm.entity_manager" alias="doctrine.orm.default_entity_manager" public="true"/>
    <service id="doctrine.orm.default_metadata_cache" alias="doctrine_cache.providers.doctrine.orm.default_metadata_cache" public="true"/>
    <service id="doctrine.orm.default_result_cache" alias="doctrine_cache.providers.doctrine.orm.default_result_cache" public="true"/>
    <service id="doctrine.orm.default_query_cache" alias="doctrine_cache.providers.doctrine.orm.default_query_cache" public="true"/>
    <service id="doctrine.orm.default_entity_manager.event_manager" alias="doctrine.dbal.default_connection.event_manager" public="false"/>
    <service id="doctrine.orm.lp_perl_metadata_cache" alias="doctrine_cache.providers.doctrine.orm.lp_perl_metadata_cache" public="true"/>
    <service id="doctrine.orm.lp_perl_result_cache" alias="doctrine_cache.providers.doctrine.orm.lp_perl_result_cache" public="true"/>
    <service id="doctrine.orm.lp_perl_query_cache" alias="doctrine_cache.providers.doctrine.orm.lp_perl_query_cache" public="true"/>
    <service id="doctrine.orm.lp_perl_entity_manager.event_manager" alias="doctrine.dbal.lp_perl_connection.event_manager" public="false"/>
    <service id="Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface" alias="security.authorization_checker" public="false"/>
    <service id="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface" alias="security.token_storage" public="false"/>
    <service id="Symfony\Component\Security\Core\Security" alias="security.helper" public="false"/>
    <service id="Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface" alias="security.authentication.manager" public="false"/>
    <service id="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategyInterface" alias="security.authentication.session_strategy" public="false"/>
    <service id="security.encoder_factory" alias="security.encoder_factory.generic" public="false"/>
    <service id="Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface" alias="security.encoder_factory.generic" public="false"/>
    <service id="security.password_encoder" alias="security.user_password_encoder.generic" public="true"/>
    <service id="Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface" alias="security.user_password_encoder.generic" public="false"/>
    <service id="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" alias="security.authentication_utils" public="false"/>
    <service id="Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface" alias="debug.security.access.decision_manager" public="false"/>
    <service id="Symfony\Component\Security\Core\Role\RoleHierarchyInterface" alias="security.role_hierarchy" public="false"/>
    <service id="Symfony\Component\Security\Http\Firewall" alias="debug.security.firewall" public="false"/>
    <service id="Symfony\Component\Security\Http\HttpUtils" alias="security.http_utils" public="false"/>
    <service id="Symfony\Component\Security\Guard\GuardAuthenticatorHandler" alias="security.authentication.guard_handler" public="false"/>
    <service id="security.firewall" alias="debug.security.firewall" public="false"/>
    <service id="Symfony\Component\Security\Core\User\UserProviderInterface" alias="security.user.provider.concrete.app_user_provider"/>
    <service id="security.authentication.session_strategy.main" alias="security.authentication.session_strategy"/>
    <service id="security.user_checker.main" alias="security.user_checker" public="false"/>
    <service id="Symfony\Component\Security\Core\User\UserCheckerInterface" alias="security.user_checker" public="false"/>
    <service id="swiftmailer.mailer.default.transport" alias="swiftmailer.mailer.default.transport.spool"/>
    <service id="swiftmailer.mailer.default.spool" alias="swiftmailer.mailer.default.spool.memory"/>
    <service id="swiftmailer.mailer.default.transport.real" alias="swiftmailer.mailer.default.transport.dynamic" public="true"/>
    <service id="swiftmailer.spool" alias="swiftmailer.mailer.default.spool.memory"/>
    <service id="swiftmailer.transport.real" alias="swiftmailer.mailer.default.transport.dynamic"/>
    <service id="Swift_Spool" alias="swiftmailer.mailer.default.spool.memory" public="false"/>
    <service id="swiftmailer.plugin.messagelogger" alias="swiftmailer.mailer.default.plugin.messagelogger"/>
    <service id="swiftmailer.mailer" alias="swiftmailer.mailer.default"/>
    <service id="swiftmailer.transport" alias="swiftmailer.mailer.default.transport.spool" public="true"/>
    <service id="Swift_Mailer" alias="swiftmailer.mailer.default" public="false"/>
    <service id="Swift_Transport" alias="swiftmailer.mailer.default.transport.spool" public="false"/>
    <service id="mailer" alias="swiftmailer.mailer.default" public="true"/>
    <service id="Twig_Environment" alias="twig" public="false"/>
    <service id="Twig\Environment" alias="twig" public="false"/>
    <service id="logger" alias="monolog.logger"/>
    <service id="Psr\Log\LoggerInterface" alias="monolog.logger" public="false"/>
    <service id="easy_admin.property_accessor" alias="property_accessor" public="true"/>
    <service id="vich_uploader.storage" alias="vich_uploader.storage.file_system"/>
    <service id="Vich\UploaderBundle\Storage\StorageInterface" alias="vich_uploader.storage.file_system" public="false"/>
    <service id="Vich\UploaderBundle\Storage\FileSystemStorage" alias="vich_uploader.storage.file_system" public="false"/>
    <service id="vich_uploader.metadata_driver" alias="vich_uploader.metadata_driver.chain" public="false"/>
    <service id="vich_uploader.metadata.cache" alias="vich_uploader.metadata.cache.file_cache" public="false"/>
    <service id="Vich\UploaderBundle\Mapping\PropertyMappingFactory" alias="vich_uploader.property_mapping_factory" public="false"/>
    <service id="vich_uploader.namer_uniqid" alias="Vich\UploaderBundle\Naming\UniqidNamer" public="true"/>
    <service id="vich_uploader.namer_property" alias="Vich\UploaderBundle\Naming\PropertyNamer" public="true"/>
    <service id="vich_uploader.namer_origname" alias="Vich\UploaderBundle\Naming\OrignameNamer" public="true"/>
    <service id="vich_uploader.namer_hash" alias="Vich\UploaderBundle\Naming\HashNamer" public="true"/>
    <service id="vich_uploader.namer_base64" alias="Vich\UploaderBundle\Naming\Base64Namer" public="true"/>
    <service id="vich_uploader.directory_namer_subdir" alias="Vich\UploaderBundle\Naming\SubdirDirectoryNamer" public="true"/>
    <service id="vich_uploader.namer_directory_property" alias="Vich\UploaderBundle\Naming\PropertyDirectoryNamer" public="true"/>
    <service id="vich_uploader.namer_directory_current_date_time" alias="Vich\UploaderBundle\Naming\CurrentDateTimeDirectoryNamer" public="true"/>
    <service id="Vich\UploaderBundle\Handler\DownloadHandler" alias="vich_uploader.download_handler" public="false"/>
    <service id="Vich\UploaderBundle\Handler\UploadHandler" alias="vich_uploader.upload_handler" public="false"/>
    <service id="Vich\UploaderBundle\Form\Type\VichFileType" alias="vich_uploader.form.type.file" public="false"/>
    <service id="Vich\UploaderBundle\Form\Type\VichImageType" alias="vich_uploader.form.type.image" public="false"/>
    <service id="Vich\UploaderBundle\Templating\Helper\UploaderHelper" alias="vich_uploader.templating.helper.uploader_helper" public="false"/>
    <service id="Vich\UploaderBundle\Twig\Extension\UploaderExtension" alias="vich_uploader.twig.extension.uploader" public="false"/>
    <service id="Overblog\GraphQLBundle\Request\Executor" alias="overblog_graphql.request_executor"/>
    <service id="Overblog\GraphQLBundle\Resolver\TypeResolver" alias="overblog_graphql.type_resolver"/>
    <service id="Overblog\GraphQLBundle\Resolver\ResolverResolver" alias="overblog_graphql.resolver_resolver"/>
    <service id="Overblog\GraphQLBundle\Resolver\MutationResolver" alias="overblog_graphql.mutation_resolver"/>
    <service id="Overblog\GraphQLBundle\Resolver\AccessResolver" alias="overblog_graphql.access_resolver"/>
    <service id="Overblog\GraphQLBundle\Controller\GraphController" alias="overblog_graphql.controller.graphql" public="true"/>
    <service id="overblog_graphql.executor" alias="overblog_graphql.executor.default"/>
    <service id="overblog_graphql.promise_adapter" alias="overblog_graphql.promise_adapter.default"/>
    <service id="overblog_graphql.expression_language" alias="overblog_graphql.expression_language.default"/>
    <service id="Overblog\GraphiQLBundle\Controller\GraphiQLController" alias="overblog_graphiql.controller" public="true"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenInterface" alias="lexik_jwt_authentication.jwt_manager"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface" alias="lexik_jwt_authentication.jwt_manager"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface" alias="lexik_jwt_authentication.jws_provider.lcobucci"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler" alias="lexik_jwt_authentication.handler.authentication_success"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler" alias="lexik_jwt_authentication.handler.authentication_failure"/>
    <service id="lexik_jwt_authentication.jwt_token_authenticator" alias="lexik_jwt_authentication.security.guard.jwt_token_authenticator"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface" alias="lexik_jwt_authentication.extractor.chain_extractor"/>
    <service id="lexik_jwt_authentication.encoder" alias="lexik_jwt_authentication.encoder.lcobucci" public="true"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Encoder\JWTEncoderInterface" alias="lexik_jwt_authentication.encoder.lcobucci"/>
    <service id="lexik_jwt_authentication.key_loader" alias="lexik_jwt_authentication.key_loader.raw" public="true"/>
    <service id="AssoConnect\GraphQLMutationValidatorBundle\Validator\MutationValidator" alias="assoconnect_graphql_mutation_validator.validator"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.hjI4Dm4"/>
    <service id="twig.loader.filesystem" alias="twig.loader.native_filesystem" public="false"/>
    <service id="twig.loader" alias="twig.loader.native_filesystem"/>
    <service id="GraphQL\Executor\Promise\PromiseAdapter" alias="overblog_graphql.promise_adapter.default"/>
    <service id=".service_locator.AoifO_3" alias=".2_ServiceLocator~S_1adHL" public="false"/>
    <service id=".service_locator.jD4_ZG7" alias=".1_ServiceLocator~X6Lol.S" public="false"/>
    <service id="validator" alias="debug.validator" public="true"/>
    <service id="translator.data_collector.inner" alias="translator.default" public="false"/>
    <service id="event_dispatcher" alias="debug.event_dispatcher" public="true"/>
    <service id="controller_resolver" alias="debug.controller_resolver" public="false"/>
    <service id="argument_resolver" alias="debug.argument_resolver" public="false"/>
    <service id="security.access.decision_manager" alias="debug.security.access.decision_manager" public="false"/>
    <service id="argument_resolver.request_attribute" alias="debug.argument_resolver.request_attribute" public="false"/>
    <service id="argument_resolver.request" alias="debug.argument_resolver.request" public="false"/>
    <service id="argument_resolver.session" alias="debug.argument_resolver.session" public="false"/>
    <service id="security.user_value_resolver" alias="debug.security.user_value_resolver" public="false"/>
    <service id="argument_resolver.service" alias="debug.argument_resolver.service" public="false"/>
    <service id="argument_resolver.default" alias="debug.argument_resolver.default" public="false"/>
    <service id="argument_resolver.variadic" alias="debug.argument_resolver.variadic" public="false"/>
    <service id="console.command.public_alias.doctrine_cache.contains_command" alias="doctrine_cache.contains_command" public="true"/>
    <service id="console.command.public_alias.doctrine_cache.delete_command" alias="doctrine_cache.delete_command" public="true"/>
    <service id="console.command.public_alias.doctrine_cache.flush_command" alias="doctrine_cache.flush_command" public="true"/>
    <service id="console.command.public_alias.doctrine_cache.stats_command" alias="doctrine_cache.stats_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.diff_command" alias="doctrine_migrations.diff_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.dump_schema_command" alias="doctrine_migrations.dump_schema_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.execute_command" alias="doctrine_migrations.execute_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.generate_command" alias="doctrine_migrations.generate_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.latest_command" alias="doctrine_migrations.latest_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.migrate_command" alias="doctrine_migrations.migrate_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.rollup_command" alias="doctrine_migrations.rollup_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.status_command" alias="doctrine_migrations.status_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.up_to_date_command" alias="doctrine_migrations.up_to_date_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.version_command" alias="doctrine_migrations.version_command" public="true"/>
  </services>
</container>
