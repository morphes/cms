<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ProductTag extends \App\Entity\ProductTag implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'id', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'name', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'created', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'entity_id', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'productTagItems', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'type', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'slug', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'catalog', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'input_type'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'id', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'name', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'created', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'entity_id', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'productTagItems', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'type', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'slug', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'catalog', '' . "\0" . 'App\\Entity\\ProductTag' . "\0" . 'input_type'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ProductTag $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTimeInterface $created): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityId(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityId', []);

        return parent::getEntityId();
    }

    /**
     * {@inheritDoc}
     */
    public function addEntityId(\App\Entity\Product $entityId): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEntityId', [$entityId]);

        return parent::addEntityId($entityId);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEntityId(\App\Entity\Product $entityId): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEntityId', [$entityId]);

        return parent::removeEntityId($entityId);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductTagItems(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductTagItems', []);

        return parent::getProductTagItems();
    }

    /**
     * {@inheritDoc}
     */
    public function addProductTagItem(\App\Entity\ProductTagItem $productTagItem): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProductTagItem', [$productTagItem]);

        return parent::addProductTagItem($productTagItem);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProductTagItem(\App\Entity\ProductTagItem $productTagItem): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProductTagItem', [$productTagItem]);

        return parent::removeProductTagItem($productTagItem);
    }

    /**
     * {@inheritDoc}
     */
    public function getType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(?string $type): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', []);

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible(?string $visible): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', [$visible]);

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug(?string $slug): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getCatalog(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCatalog', []);

        return parent::getCatalog();
    }

    /**
     * {@inheritDoc}
     */
    public function addCatalog(\App\Entity\Catalog $catalog): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCatalog', [$catalog]);

        return parent::addCatalog($catalog);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCatalog(\App\Entity\Catalog $catalog): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCatalog', [$catalog]);

        return parent::removeCatalog($catalog);
    }

    /**
     * {@inheritDoc}
     */
    public function getInputType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInputType', []);

        return parent::getInputType();
    }

    /**
     * {@inheritDoc}
     */
    public function setInputType(?string $input_type): \App\Entity\ProductTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInputType', [$input_type]);

        return parent::setInputType($input_type);
    }

}
