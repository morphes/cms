<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Catalog extends \App\Entity\Catalog implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'pid', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'created', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'updated', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'brand', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'products', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'catalogUrls', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'sales', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'catalogTags', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'parsed', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'productTags', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'productTagItems'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'pid', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'created', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'updated', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'brand', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'products', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'catalogUrls', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'sales', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'catalogTags', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'parsed', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'productTags', '' . "\0" . 'App\\Entity\\Catalog' . "\0" . 'productTagItems'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Catalog $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPid(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPid', []);

        return parent::getPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setPid(?int $pid): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPid', [$pid]);

        return parent::setPid($pid);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', []);

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible(bool $visible): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', [$visible]);

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTimeInterface $created): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated(\DateTimeInterface $updated): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getBrand(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBrand', []);

        return parent::getBrand();
    }

    /**
     * {@inheritDoc}
     */
    public function setBrand(?bool $brand): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBrand', [$brand]);

        return parent::setBrand($brand);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getProducts(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProducts', []);

        return parent::getProducts();
    }

    /**
     * {@inheritDoc}
     */
    public function addProduct(\App\Entity\Product $product): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProduct', [$product]);

        return parent::addProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProduct(\App\Entity\Product $product): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProduct', [$product]);

        return parent::removeProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getCatalogUrls(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCatalogUrls', []);

        return parent::getCatalogUrls();
    }

    /**
     * {@inheritDoc}
     */
    public function addCatalogUrl(\App\Entity\CatalogUrl $catalogUrl): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCatalogUrl', [$catalogUrl]);

        return parent::addCatalogUrl($catalogUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCatalogUrl(\App\Entity\CatalogUrl $catalogUrl): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCatalogUrl', [$catalogUrl]);

        return parent::removeCatalogUrl($catalogUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getSales(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSales', []);

        return parent::getSales();
    }

    /**
     * {@inheritDoc}
     */
    public function addSale(\App\Entity\Sale $sale): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSale', [$sale]);

        return parent::addSale($sale);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSale(\App\Entity\Sale $sale): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSale', [$sale]);

        return parent::removeSale($sale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCatalogTags(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCatalogTags', []);

        return parent::getCatalogTags();
    }

    /**
     * {@inheritDoc}
     */
    public function addCatalogTag(\App\Entity\CatalogTag $catalogTag): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCatalogTag', [$catalogTag]);

        return parent::addCatalogTag($catalogTag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCatalogTag(\App\Entity\CatalogTag $catalogTag): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCatalogTag', [$catalogTag]);

        return parent::removeCatalogTag($catalogTag);
    }

    /**
     * {@inheritDoc}
     */
    public function setParsed($parsed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParsed', [$parsed]);

        return parent::setParsed($parsed);
    }

    /**
     * {@inheritDoc}
     */
    public function getParsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParsed', []);

        return parent::getParsed();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductTags(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductTags', []);

        return parent::getProductTags();
    }

    /**
     * {@inheritDoc}
     */
    public function addProductTag(\App\Entity\ProductTag $productTag): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProductTag', [$productTag]);

        return parent::addProductTag($productTag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProductTag(\App\Entity\ProductTag $productTag): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProductTag', [$productTag]);

        return parent::removeProductTag($productTag);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductTagItems(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductTagItems', []);

        return parent::getProductTagItems();
    }

    /**
     * {@inheritDoc}
     */
    public function addProductTagItem(\App\Entity\ProductTagItem $productTagItem): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProductTagItem', [$productTagItem]);

        return parent::addProductTagItem($productTagItem);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProductTagItem(\App\Entity\ProductTagItem $productTagItem): \App\Entity\Catalog
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProductTagItem', [$productTagItem]);

        return parent::removeProductTagItem($productTagItem);
    }

}
